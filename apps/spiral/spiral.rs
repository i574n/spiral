#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unreachable_code)]
#![allow(unused_attributes)]
#![allow(unused_imports)]
#![allow(unused_macros)]
#![allow(unused_parens)]
#![allow(unused_variables)]
#![allow(unused_assignments)]
use fable_library_rust::NativeArray_::array_from;
use fable_library_rust::String_::fromString;
mod module_6ff740fe {
    pub mod Spiral {
        use super::*;
        use fable_library_rust::Array_::skip;
        use fable_library_rust::Array_::skipWhile;
        use fable_library_rust::Array_::tryItem;
        use fable_library_rust::Async_::Async;
        use fable_library_rust::DateTime_::DateTime;
        use fable_library_rust::Encoding_::get_UTF8;
        use fable_library_rust::Encoding_::Encoding;
        use fable_library_rust::Exception_::try_catch;
        use fable_library_rust::Guid_::new_guid;
        use fable_library_rust::Guid_::parse;
        use fable_library_rust::Guid_::Guid;
        use fable_library_rust::List_::cons;
        use fable_library_rust::List_::empty;
        use fable_library_rust::List_::ofArray;
        use fable_library_rust::List_::toArray;
        use fable_library_rust::List_::List;
        use fable_library_rust::Map_::find;
        use fable_library_rust::Map_::ofSeq;
        use fable_library_rust::NativeArray_::get_Count;
        use fable_library_rust::NativeArray_::new_array;
        use fable_library_rust::NativeArray_::new_empty;
        use fable_library_rust::NativeArray_::new_init;
        use fable_library_rust::NativeArray_::Array;
        use fable_library_rust::Native_::getNull;
        use fable_library_rust::Native_::interface_cast;
        use fable_library_rust::Native_::refCell;
        use fable_library_rust::Native_::unbox;
        use fable_library_rust::Native_::Any;
        use fable_library_rust::Native_::Arc;
        use fable_library_rust::Native_::Func0;
        use fable_library_rust::Native_::Func1;
        use fable_library_rust::Native_::Func2;
        use fable_library_rust::Native_::Lrc;
        use fable_library_rust::Native_::LrcPtr;
        use fable_library_rust::Native_::MutCell;
        use fable_library_rust::Native_::OnceInit;
        use fable_library_rust::Option_::defaultValue;
        use fable_library_rust::Option_::map;
        use fable_library_rust::Range_::rangeNumeric;
        use fable_library_rust::Seq_::delay;
        use fable_library_rust::Seq_::map as map_1;
        use fable_library_rust::Seq_::ofArray as ofArray_1;
        use fable_library_rust::Seq_::ofList;
        use fable_library_rust::Seq_::toArray as toArray_1;
        use fable_library_rust::String_::append;
        use fable_library_rust::String_::concat;
        use fable_library_rust::String_::contains;
        use fable_library_rust::String_::endsWith3;
        use fable_library_rust::String_::getCharAt;
        use fable_library_rust::String_::getSlice;
        use fable_library_rust::String_::indexOf;
        use fable_library_rust::String_::join;
        use fable_library_rust::String_::length;
        use fable_library_rust::String_::ofChar;
        use fable_library_rust::String_::printfn;
        use fable_library_rust::String_::replace;
        use fable_library_rust::String_::split;
        use fable_library_rust::String_::sprintf;
        use fable_library_rust::String_::startsWith3;
        use fable_library_rust::String_::string;
        use fable_library_rust::String_::toLower;
        use fable_library_rust::String_::toString;
        use fable_library_rust::String_::toUpper;
        use fable_library_rust::String_::trimEndChars;
        use fable_library_rust::String_::trimStartChars;
        use fable_library_rust::TimeSpan_::TimeSpan;
        type ConcurrentStack_1<T> = T;
        use fable_library_rust::System::Collections::Generic::IEnumerable_1;
        use fable_library_rust::System::Exception;
        use fable_library_rust::System::IDisposable;
        use fable_library_rust::System::Text::StringBuilder;
        use fable_library_rust::System::Threading::CancellationToken;
        type TaskCanceledException = ();
        type TimeZoneInfo = i64;
        pub mod TraceState {
            use super::*;
            pub fn trace_state() -> LrcPtr<
                MutCell<
                    Option<(
                        LrcPtr<Spiral::Mut0>,
                        LrcPtr<Spiral::Mut1>,
                        LrcPtr<Spiral::Mut2>,
                        LrcPtr<Spiral::Mut3>,
                        LrcPtr<Spiral::Mut4>,
                        Option<i64>,
                    )>,
                >,
            > {
                static trace_state: OnceInit<
                    LrcPtr<
                        MutCell<
                            Option<(
                                LrcPtr<Spiral::Mut0>,
                                LrcPtr<Spiral::Mut1>,
                                LrcPtr<Spiral::Mut2>,
                                LrcPtr<Spiral::Mut3>,
                                LrcPtr<Spiral::Mut4>,
                                Option<i64>,
                            )>,
                        >,
                    >,
                > = OnceInit::new();
                trace_state
                    .get_or_init(|| {
                        LrcPtr::new(MutCell::new(
                            None::<(
                                LrcPtr<Spiral::Mut0>,
                                LrcPtr<Spiral::Mut1>,
                                LrcPtr<Spiral::Mut2>,
                                LrcPtr<Spiral::Mut3>,
                                LrcPtr<Spiral::Mut4>,
                                Option<i64>,
                            )>,
                        ))
                    })
                    .clone()
            }
        }
        pub trait IOsEnviron: core::fmt::Debug + core::fmt::Display {
            fn environ(&self) -> LrcPtr<dyn Any>;
        }
        impl<V: IOsEnviron + core::fmt::Debug + core::fmt::Display> IOsEnviron for LrcPtr<V> {
            #[inline]
            fn environ(&self) -> LrcPtr<dyn Any> {
                (**self).environ()
            }
        }
        pub trait ICryptoCreateHash: core::fmt::Debug + core::fmt::Display {
            fn createHash(&self, x: string) -> LrcPtr<dyn Any>;
        }
        impl<V: ICryptoCreateHash + core::fmt::Debug + core::fmt::Display> ICryptoCreateHash for LrcPtr<V> {
            #[inline]
            fn createHash(&self, x: string) -> LrcPtr<dyn Any> {
                (**self).createHash(x)
            }
        }
        pub trait IHashlibSha256: core::fmt::Debug + core::fmt::Display {
            fn sha256(&self) -> LrcPtr<dyn Any>;
        }
        impl<V: IHashlibSha256 + core::fmt::Debug + core::fmt::Display> IHashlibSha256 for LrcPtr<V> {
            #[inline]
            fn sha256(&self) -> LrcPtr<dyn Any> {
                (**self).sha256()
            }
        }
        pub trait IFs: core::fmt::Debug + core::fmt::Display {
            fn realpathSync(&self, path: string) -> string;
        }
        impl<V: IFs + core::fmt::Debug + core::fmt::Display> IFs for LrcPtr<V> {
            #[inline]
            fn realpathSync(&self, path: string) -> string {
                (**self).realpathSync(path)
            }
        }
        pub trait IPathJoin: core::fmt::Debug + core::fmt::Display {
            fn join(&self, paths: Array<string>) -> string;
        }
        impl<V: IPathJoin + core::fmt::Debug + core::fmt::Display> IPathJoin for LrcPtr<V> {
            #[inline]
            fn join(&self, paths: Array<string>) -> string {
                (**self).join(paths)
            }
        }
        pub trait IFsExistsSync: core::fmt::Debug + core::fmt::Display {
            fn existsSync(&self, path: string) -> bool;
        }
        impl<V: IFsExistsSync + core::fmt::Debug + core::fmt::Display> IFsExistsSync for LrcPtr<V> {
            #[inline]
            fn existsSync(&self, path: string) -> bool {
                (**self).existsSync(path)
            }
        }
        pub trait IPathDirname: core::fmt::Debug + core::fmt::Display {
            fn dirname(&self, path: string) -> string;
        }
        impl<V: IPathDirname + core::fmt::Debug + core::fmt::Display> IPathDirname for LrcPtr<V> {
            #[inline]
            fn dirname(&self, path: string) -> string {
                (**self).dirname(path)
            }
        }
        pub trait IPathBasename: core::fmt::Debug + core::fmt::Display {
            fn basename(&self, path: string) -> string;
        }
        impl<V: IPathBasename + core::fmt::Debug + core::fmt::Display> IPathBasename for LrcPtr<V> {
            #[inline]
            fn basename(&self, path: string) -> string {
                (**self).basename(path)
            }
        }
        #[derive(Clone, Debug)]
        pub struct Disposable {
            f: Func0<()>,
        }
        impl Disposable {
            pub fn _ctor__3A5B6456(f: Func0<()>) -> LrcPtr<Spiral::Disposable> {
                let f_1;
                ();
                f_1 = f;
                ();
                LrcPtr::new(Spiral::Disposable { f: f_1 })
            }
        }
        impl core::fmt::Display for Disposable {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        impl IDisposable for Disposable {
            fn Dispose(&self) {
                (self.f)();
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US0 {
            US0_0,
            US0_1,
            US0_2,
            US0_3,
            US0_4,
        }
        impl core::fmt::Display for US0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut0 {
            pub l0: MutCell<i64>,
        }
        impl core::fmt::Display for Mut0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Mut1 {
            pub l0: MutCell<Func1<string, ()>>,
        }
        impl core::fmt::Display for Mut1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut2 {
            pub l0: MutCell<bool>,
        }
        impl core::fmt::Display for Mut2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut3 {
            pub l0: MutCell<string>,
        }
        impl core::fmt::Display for Mut3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut4 {
            pub l0: MutCell<Spiral::US0>,
        }
        impl core::fmt::Display for Mut4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US1 {
            US1_0(Spiral::US0),
            US1_1,
        }
        impl core::fmt::Display for US1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US2 {
            US2_0(i64),
            US2_1,
        }
        impl core::fmt::Display for US2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US3 {
            US3_0,
            US3_1,
            US3_2,
        }
        impl core::fmt::Display for US3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US4 {
            US4_0(Spiral::US3),
            US4_1(Spiral::US3),
            US4_2(Spiral::US3),
            US4_3(Spiral::US3),
            US4_4(Spiral::US3),
            US4_5(Spiral::US3),
        }
        impl core::fmt::Display for US4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US5 {
            US5_0(string),
            US5_1,
        }
        impl core::fmt::Display for US5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US6 {
            US6_0(std::string::String, clap::ArgMatches),
            US6_1,
        }
        impl core::fmt::Display for US6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US7 {
            US7_0(std::string::String),
            US7_1,
        }
        impl core::fmt::Display for US7 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US10 {
            US10_0,
            US10_1,
        }
        impl core::fmt::Display for US10 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US9 {
            US9_0(Spiral::US10),
            US9_1,
        }
        impl core::fmt::Display for US9 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US8 {
            US8_0(Spiral::US9),
            US8_1,
        }
        impl core::fmt::Display for US8 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US11 {
            US11_0(Vec<std::string::String>),
            US11_1,
        }
        impl core::fmt::Display for US11 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut5 {
            pub l0: MutCell<i32>,
        }
        impl core::fmt::Display for Mut5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US12 {
            US12_0,
            US12_1,
        }
        impl core::fmt::Display for US12 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US13 {
            US13_0(string),
            US13_1(string),
        }
        impl core::fmt::Display for US13 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US14 {
            US14_0(std::path::PathBuf),
            US14_1(string),
        }
        impl core::fmt::Display for US14 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US15 {
            US15_0(std::path::PathBuf),
            US15_1,
        }
        impl core::fmt::Display for US15 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut6 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<i32>,
            pub l2: MutCell<Array<string>>,
        }
        impl core::fmt::Display for Mut6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US16 {
            US16_0,
            US16_1(std::string::String),
        }
        impl core::fmt::Display for US16 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US17 {
            US17_0(string, Spiral::US5),
            US17_1(string),
        }
        impl core::fmt::Display for US17 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US18 {
            US18_0(char, string, LrcPtr<StringBuilder>, i32, i32),
            US18_1(string),
        }
        impl core::fmt::Display for US18 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum UH0 {
            UH0_0,
            UH0_1(char, LrcPtr<Spiral::UH0>),
        }
        impl core::fmt::Display for UH0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum UH1 {
            UH1_0,
            UH1_1(
                Func1<(string, LrcPtr<StringBuilder>, i32, i32), Spiral::US18>,
                LrcPtr<Spiral::UH1>,
            ),
        }
        impl core::fmt::Display for UH1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US19 {
            US19_0(string, string, LrcPtr<StringBuilder>, i32, i32),
            US19_1(string),
        }
        impl core::fmt::Display for US19 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US20 {
            US20_0(char),
            US20_1,
        }
        impl core::fmt::Display for US20 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US21 {
            US21_0(string, LrcPtr<StringBuilder>, i32, i32),
            US21_1(string),
        }
        impl core::fmt::Display for US21 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US22 {
            US22_0(string, Spiral::US5, string, LrcPtr<StringBuilder>, i32, i32),
            US22_1(string),
        }
        impl core::fmt::Display for US22 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US23 {
            US23_0(Spiral::US20, string, LrcPtr<StringBuilder>, i32, i32),
            US23_1(string),
        }
        impl core::fmt::Display for US23 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US24 {
            US24_0(Spiral::US5, string, LrcPtr<StringBuilder>, i32, i32),
            US24_1(string),
        }
        impl core::fmt::Display for US24 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US25 {
            US25_0(Array<string>),
            US25_1(string),
        }
        impl core::fmt::Display for US25 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum UH2 {
            UH2_0,
            UH2_1(string, LrcPtr<Spiral::UH2>),
        }
        impl core::fmt::Display for UH2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US26 {
            US26_0(LrcPtr<Spiral::UH2>, string, LrcPtr<StringBuilder>, i32, i32),
            US26_1(string),
        }
        impl core::fmt::Display for US26 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum UH3 {
            UH3_0,
            UH3_1(
                Func1<(string, LrcPtr<StringBuilder>, i32, i32), Spiral::US19>,
                LrcPtr<Spiral::UH3>,
            ),
        }
        impl core::fmt::Display for UH3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US27 {
            US27_0(std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>),
            US27_1(std::string::String),
        }
        impl core::fmt::Display for US27 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US28 {
            US28_0(
                std::sync::Arc<
                    std::sync::Mutex<
                        std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                    >,
                >,
            ),
            US28_1,
        }
        impl core::fmt::Display for US28 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US29 {
            US29_0(std::string::String),
            US29_1(std::string::String),
        }
        impl core::fmt::Display for US29 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US30 {
            US30_0(Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>),
            US30_1,
        }
        impl core::fmt::Display for US30 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US31 {
            US31_0(std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>),
            US31_1,
        }
        impl core::fmt::Display for US31 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US32 {
            US32_0(std::process::Output),
            US32_1(std::string::String),
        }
        impl core::fmt::Display for US32 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US33 {
            US33_0(i32),
            US33_1,
        }
        impl core::fmt::Display for US33 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US34 {
            US34_0(Func1<(i32, string, bool), Arc<Async<()>>>),
            US34_1,
        }
        impl core::fmt::Display for US34 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US35 {
            US35_0(CancellationToken),
            US35_1,
        }
        impl core::fmt::Display for US35 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US38 {
            US38_0,
            US38_1,
        }
        impl core::fmt::Display for US38 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US37 {
            US37_0(Spiral::US38),
            US37_1,
        }
        impl core::fmt::Display for US37 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US36 {
            US36_0(Spiral::US37),
            US36_1,
        }
        impl core::fmt::Display for US36 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US40 {
            US40_0(string),
            US40_1(string),
        }
        impl core::fmt::Display for US40 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US39 {
            US39_0(Spiral::US40),
            US39_1,
        }
        impl core::fmt::Display for US39 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US41 {
            US41_0,
            US41_1,
            US41_2,
        }
        impl core::fmt::Display for US41 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US42 {
            US42_0(Spiral::US41),
            US42_1,
        }
        impl core::fmt::Display for US42 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum UH4 {
            UH4_0,
            UH4_1(string, string, LrcPtr<Spiral::UH4>),
        }
        impl core::fmt::Display for UH4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US43 {
            US43_0(chrono::DateTime<chrono::Utc>),
            US43_1,
        }
        impl core::fmt::Display for US43 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US44 {
            US44_0(i32, string),
            US44_1(i32, string),
        }
        impl core::fmt::Display for US44 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US45 {
            US45_0(std::collections::HashMap<string, string>),
            US45_1,
        }
        impl core::fmt::Display for US45 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US46 {
            US46_0(Spiral::US5),
            US46_1,
        }
        impl core::fmt::Display for US46 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum UH5 {
            UH5_0,
            UH5_1(string, bool, LrcPtr<Spiral::UH5>),
        }
        impl core::fmt::Display for UH5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US47 {
            US47_0,
            US47_1(string),
        }
        impl core::fmt::Display for US47 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US48 {
            US48_0(std::fs::FileType),
            US48_1(std::string::String),
        }
        impl core::fmt::Display for US48 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US49 {
            US49_0,
            US49_1,
            US49_2,
        }
        impl core::fmt::Display for US49 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US50 {
            US50_0(async_walkdir::DirEntry),
            US50_1(std::string::String),
        }
        impl core::fmt::Display for US50 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US51 {
            US51_0(string, string),
            US51_1,
        }
        impl core::fmt::Display for US51 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        pub fn method0() -> clap::Command {
            let v1_1: string = string("r#\"command\"#");
            let v2: &'static str = r#"command"#;
            let v4: clap::Command = clap::Command::new(v2);
            let v6: clap::Command = clap::Command::subcommand_required(v4, true);
            let v8: string = string("r#\"fsharp\"#");
            let v9: &'static str = r#"fsharp"#;
            let v11: clap::Command = clap::Command::new(v9);
            let v13: string = string("r#\"spi-path\"#");
            let v14: &'static str = r#"spi-path"#;
            let v16: clap::Arg = clap::Arg::new(v14);
            let v18: clap::Arg = v16.short('s');
            let v19: string = string("r#\"spi-path\"#");
            let v20: &'static str = r#"spi-path"#;
            let v22: clap::Arg = v18.long(v20);
            let v24: clap::Arg = v22.required(true);
            let v26: clap::Command = clap::Command::arg(v11, v24);
            let v28: clap::Command = clap::Command::subcommand(v6, v26);
            let v30: string = string("r#\"gleam\"#");
            let v31: &'static str = r#"gleam"#;
            let v33: clap::Command = clap::Command::new(v31);
            let v35: string = string("r#\"gleam-path\"#");
            let v36: &'static str = r#"gleam-path"#;
            let v38: clap::Arg = clap::Arg::new(v36);
            let v40: clap::Arg = v38.short('g');
            let v41: string = string("r#\"gleam-path\"#");
            let v42: &'static str = r#"gleam-path"#;
            let v44: clap::Arg = v40.long(v42);
            let v46: clap::Arg = v44.required(true);
            let v48: clap::Command = clap::Command::arg(v33, v46);
            let v50: string = string("r#\"target\"#");
            let v51: &'static str = r#"target"#;
            let v53: clap::Arg = clap::Arg::new(v51);
            let v55: clap::Arg = v53.short('t');
            let v56: string = string("r#\"target\"#");
            let v57: &'static str = r#"target"#;
            let v59: clap::Arg = v55.long(v57);
            let v64: string = toLower(string("JavaScript"));
            let v85: Array<string> = toArray(ofArray(new_array(&[toLower(string("Erlang")), v64])));
            let v89: Vec<string> = v85.to_vec();
            let v91: bool = true;
            let _vec_map: Vec<_> = v89
                .into_iter()
                .map(|x| {
                    //;
                    let v93: string = x;
                    let v100: &str = &*v93;
                    let v133: std::string::String = String::from(v100);
                    let v161: Box<std::string::String> = Box::new(v133);
                    let v163: &'static mut std::string::String = Box::leak(v161);
                    let v165: clap::builder::PossibleValue =
                        clap::builder::PossibleValue::new(&**v163);
                    let v167: bool = true;
                    v165
                })
                .collect::<Vec<_>>();
            let v169: Vec<clap::builder::PossibleValue> = _vec_map;
            let v171: clap::builder::ValueParser = Into::<clap::builder::ValueParser>::into(
                clap::builder::PossibleValuesParser::new(v169),
            );
            let v173: clap::Arg = v59.value_parser(v171);
            let v175: clap::Command = clap::Command::arg(v48, v173);
            let v177: string = string("r#\"NAME\"#");
            let v180: string = string("r#\"VERSION\"#");
            let v182: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v184: usize = 1_i32 as usize;
            let v188: usize = 0_i32 as usize;
            let v204: clap::builder::ValueRange = if (v188) == (0_i32 as usize) {
                clap::builder::ValueRange::new(v184..)
            } else {
                let v202: string = string("clap::builder::ValueRange::new($0..$1)");
                clap::builder::ValueRange::new(v184..v188)
            };
            let v206: string = string("r#\"deps\"#");
            let v207: &'static str = r#"deps"#;
            let v209: clap::Arg = clap::Arg::new(v207);
            let v211: clap::Arg = v209.short('d');
            let v212: string = string("r#\"deps\"#");
            let v213: &'static str = r#"deps"#;
            let v215: clap::Arg = v211.long(v213);
            let v217: Vec<&'static str> = v182.to_vec();
            let v219: clap::Arg = v215.value_names(v217);
            let v221: clap::Arg = v219.num_args(v204);
            let v223: clap::ArgAction = clap::ArgAction::Append;
            let v225: clap::Arg = v221.action(v223);
            let v227: clap::Command = clap::Command::arg(v175, v225);
            let v229: clap::Command = clap::Command::subcommand(v28, v227);
            let v231: string = string("r#\"cuda\"#");
            let v232: &'static str = r#"cuda"#;
            let v234: clap::Command = clap::Command::new(v232);
            let v236: string = string("r#\"py-path\"#");
            let v237: &'static str = r#"py-path"#;
            let v239: clap::Arg = clap::Arg::new(v237);
            let v241: clap::Arg = v239.short('p');
            let v242: string = string("r#\"py-path\"#");
            let v243: &'static str = r#"py-path"#;
            let v245: clap::Arg = v241.long(v243);
            let v247: clap::Arg = v245.required(true);
            let v249: clap::Command = clap::Command::arg(v234, v247);
            let v251: string = string("r#\"env\"#");
            let v252: &'static str = r#"env"#;
            let v254: clap::Arg = clap::Arg::new(v252);
            let v256: clap::Arg = v254.short('e');
            let v257: string = string("r#\"env\"#");
            let v258: &'static str = r#"env"#;
            let v260: clap::Arg = v256.long(v258);
            let v265: string = toLower(string("Poetry"));
            let v286: Array<string> = toArray(ofArray(new_array(&[toLower(string("Pip")), v265])));
            let v290: Vec<string> = v286.to_vec();
            let v292: bool = true;
            let _vec_map: Vec<_> = v290
                .into_iter()
                .map(|x| {
                    //;
                    let v294: string = x;
                    let v301: &str = &*v294;
                    let v334: std::string::String = String::from(v301);
                    let v362: Box<std::string::String> = Box::new(v334);
                    let v364: &'static mut std::string::String = Box::leak(v362);
                    let v366: clap::builder::PossibleValue =
                        clap::builder::PossibleValue::new(&**v364);
                    let v368: bool = true;
                    v366
                })
                .collect::<Vec<_>>();
            let v370: Vec<clap::builder::PossibleValue> = _vec_map;
            let v372: clap::builder::ValueParser = Into::<clap::builder::ValueParser>::into(
                clap::builder::PossibleValuesParser::new(v370),
            );
            let v374: clap::Arg = v260.value_parser(v372);
            let v376: clap::Command = clap::Command::arg(v249, v374);
            let v377: string = string("r#\"NAME\"#");
            let v379: string = string("r#\"VERSION\"#");
            let v381: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v383: usize = 1_i32 as usize;
            let v387: usize = 0_i32 as usize;
            let v403: clap::builder::ValueRange = if (v387) == (0_i32 as usize) {
                clap::builder::ValueRange::new(v383..)
            } else {
                let v401: string = string("clap::builder::ValueRange::new($0..$1)");
                clap::builder::ValueRange::new(v383..v387)
            };
            let v404: string = string("r#\"deps\"#");
            let v405: &'static str = r#"deps"#;
            let v407: clap::Arg = clap::Arg::new(v405);
            let v409: clap::Arg = v407.short('d');
            let v410: string = string("r#\"deps\"#");
            let v411: &'static str = r#"deps"#;
            let v413: clap::Arg = v409.long(v411);
            let v415: Vec<&'static str> = v381.to_vec();
            let v417: clap::Arg = v413.value_names(v415);
            let v419: clap::Arg = v417.num_args(v403);
            let v421: clap::ArgAction = clap::ArgAction::Append;
            let v423: clap::Arg = v419.action(v421);
            let v425: clap::Command = clap::Command::arg(v376, v423);
            let v427: clap::Command = clap::Command::subcommand(v229, v425);
            let v429: string = string("r#\"fable\"#");
            let v430: &'static str = r#"fable"#;
            let v432: clap::Command = clap::Command::new(v430);
            let v434: string = string("r#\"fs-path\"#");
            let v435: &'static str = r#"fs-path"#;
            let v437: clap::Arg = clap::Arg::new(v435);
            let v439: clap::Arg = v437.short('f');
            let v440: string = string("r#\"fs-path\"#");
            let v441: &'static str = r#"fs-path"#;
            let v443: clap::Arg = v439.long(v441);
            let v445: clap::Arg = v443.required(true);
            let v447: clap::Command = clap::Command::arg(v432, v445);
            let v448: string = string("r#\"command\"#");
            let v449: &'static str = r#"command"#;
            let v451: clap::Arg = clap::Arg::new(v449);
            let v453: clap::Arg = v451.short('c');
            let v454: string = string("r#\"command\"#");
            let v455: &'static str = r#"command"#;
            let v457: clap::Arg = v453.long(v455);
            let v459: clap::Command = clap::Command::arg(v447, v457);
            let v461: clap::Command = clap::Command::subcommand(v427, v459);
            let v463: string = string("r#\"rust\"#");
            let v464: &'static str = r#"rust"#;
            let v466: clap::Command = clap::Command::new(v464);
            let v467: string = string("r#\"fs-path\"#");
            let v468: &'static str = r#"fs-path"#;
            let v470: clap::Arg = clap::Arg::new(v468);
            let v472: clap::Arg = v470.short('f');
            let v473: string = string("r#\"fs-path\"#");
            let v474: &'static str = r#"fs-path"#;
            let v476: clap::Arg = v472.long(v474);
            let v478: clap::Arg = v476.required(true);
            let v480: clap::Command = clap::Command::arg(v466, v478);
            let v481: string = string("r#\"NAME\"#");
            let v483: string = string("r#\"VERSION\"#");
            let v485: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v487: usize = 1_i32 as usize;
            let v491: usize = 0_i32 as usize;
            let v507: clap::builder::ValueRange = if (v491) == (0_i32 as usize) {
                clap::builder::ValueRange::new(v487..)
            } else {
                let v505: string = string("clap::builder::ValueRange::new($0..$1)");
                clap::builder::ValueRange::new(v487..v491)
            };
            let v508: string = string("r#\"deps\"#");
            let v509: &'static str = r#"deps"#;
            let v511: clap::Arg = clap::Arg::new(v509);
            let v513: clap::Arg = v511.short('d');
            let v514: string = string("r#\"deps\"#");
            let v515: &'static str = r#"deps"#;
            let v517: clap::Arg = v513.long(v515);
            let v519: Vec<&'static str> = v485.to_vec();
            let v521: clap::Arg = v517.value_names(v519);
            let v523: clap::Arg = v521.num_args(v507);
            let v525: clap::ArgAction = clap::ArgAction::Append;
            let v527: clap::Arg = v523.action(v525);
            let v529: clap::Command = clap::Command::arg(v480, v527);
            let v531: usize = 0_i32 as usize;
            let v535: usize = 1_i32 as usize;
            let v551: clap::builder::ValueRange = if (v535) == (0_i32 as usize) {
                clap::builder::ValueRange::new(v531..)
            } else {
                let v549: string = string("clap::builder::ValueRange::new($0..=$1)");
                clap::builder::ValueRange::new(v531..=v535)
            };
            let v553: string = string("r#\"wasm\"#");
            let v554: &'static str = r#"wasm"#;
            let v556: clap::Arg = clap::Arg::new(v554);
            let v558: clap::Arg = v556.short('w');
            let v559: string = string("r#\"wasm\"#");
            let v560: &'static str = r#"wasm"#;
            let v562: clap::Arg = v558.long(v560);
            let v564: clap::Arg = v562.num_args(v551);
            let v566: clap::Arg = v564.require_equals(true);
            let v568: string = string("r#\"\"#");
            let v569: &str = r#""#;
            let v571: clap::Arg = v566.default_missing_value(v569);
            let v573: clap::Command = clap::Command::arg(v529, v571);
            let v575: usize = 0_i32 as usize;
            let v579: usize = 1_i32 as usize;
            let v595: clap::builder::ValueRange = if (v579) == (0_i32 as usize) {
                clap::builder::ValueRange::new(v575..)
            } else {
                let v593: string = string("clap::builder::ValueRange::new($0..=$1)");
                clap::builder::ValueRange::new(v575..=v579)
            };
            let v597: string = string("r#\"contract\"#");
            let v598: &'static str = r#"contract"#;
            let v600: clap::Arg = clap::Arg::new(v598);
            let v602: clap::Arg = v600.short('c');
            let v603: string = string("r#\"contract\"#");
            let v604: &'static str = r#"contract"#;
            let v606: clap::Arg = v602.long(v604);
            let v608: clap::Arg = v606.num_args(v595);
            let v610: clap::Arg = v608.require_equals(true);
            let v611: string = string("r#\"\"#");
            let v612: &str = r#""#;
            let v614: clap::Arg = v610.default_missing_value(v612);
            let v616: clap::Command = clap::Command::arg(v573, v614);
            let v618: string = string("r#\"cleanup\"#");
            let v619: &'static str = r#"cleanup"#;
            let v621: clap::Arg = clap::Arg::new(v619);
            let v623: clap::Arg = v621.short('l');
            let v624: string = string("r#\"cleanup\"#");
            let v625: &'static str = r#"cleanup"#;
            let v627: clap::Arg = v623.long(v625);
            let v629: string = string("r#\"true\"#");
            let v630: &str = r#"true"#;
            let v632: clap::Arg = v627.default_value(v630);
            let v634: clap::ArgAction = clap::ArgAction::SetFalse;
            let v636: clap::Arg = v632.action(v634);
            let v638: clap::Command = clap::Command::arg(v616, v636);
            let v640: clap::Command = clap::Command::subcommand(v461, v638);
            let v642: string = string("r#\"typescript\"#");
            let v643: &'static str = r#"typescript"#;
            let v645: clap::Command = clap::Command::new(v643);
            let v646: string = string("r#\"fs-path\"#");
            let v647: &'static str = r#"fs-path"#;
            let v649: clap::Arg = clap::Arg::new(v647);
            let v651: clap::Arg = v649.short('f');
            let v652: string = string("r#\"fs-path\"#");
            let v653: &'static str = r#"fs-path"#;
            let v655: clap::Arg = v651.long(v653);
            let v657: clap::Arg = v655.required(true);
            let v659: clap::Command = clap::Command::arg(v645, v657);
            let v660: string = string("r#\"NAME\"#");
            let v662: string = string("r#\"VERSION\"#");
            let v664: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v666: usize = 1_i32 as usize;
            let v670: usize = 0_i32 as usize;
            let v685: clap::builder::ValueRange = if (v670) == (0_i32 as usize) {
                clap::builder::ValueRange::new(v666..)
            } else {
                let v683: string = string("clap::builder::ValueRange::new($0..$1)");
                clap::builder::ValueRange::new(v666..v670)
            };
            let v686: string = string("r#\"deps\"#");
            let v687: &'static str = r#"deps"#;
            let v689: clap::Arg = clap::Arg::new(v687);
            let v691: clap::Arg = v689.short('d');
            let v692: string = string("r#\"deps\"#");
            let v693: &'static str = r#"deps"#;
            let v695: clap::Arg = v691.long(v693);
            let v697: Vec<&'static str> = v664.to_vec();
            let v699: clap::Arg = v695.value_names(v697);
            let v701: clap::Arg = v699.num_args(v685);
            let v703: clap::ArgAction = clap::ArgAction::Append;
            let v705: clap::Arg = v701.action(v703);
            let v707: clap::Command = clap::Command::arg(v659, v705);
            let v709: clap::Command = clap::Command::subcommand(v640, v707);
            let v711: string = string("r#\"python\"#");
            let v712: &'static str = r#"python"#;
            let v714: clap::Command = clap::Command::new(v712);
            let v715: string = string("r#\"fs-path\"#");
            let v716: &'static str = r#"fs-path"#;
            let v718: clap::Arg = clap::Arg::new(v716);
            let v720: clap::Arg = v718.short('f');
            let v721: string = string("r#\"fs-path\"#");
            let v722: &'static str = r#"fs-path"#;
            let v724: clap::Arg = v720.long(v722);
            let v726: clap::Arg = v724.required(true);
            let v728: clap::Command = clap::Command::arg(v714, v726);
            let v729: string = string("r#\"NAME\"#");
            let v731: string = string("r#\"VERSION\"#");
            let v733: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v735: usize = 1_i32 as usize;
            let v739: usize = 0_i32 as usize;
            let v754: clap::builder::ValueRange = if (v739) == (0_i32 as usize) {
                clap::builder::ValueRange::new(v735..)
            } else {
                let v752: string = string("clap::builder::ValueRange::new($0..$1)");
                clap::builder::ValueRange::new(v735..v739)
            };
            let v755: string = string("r#\"deps\"#");
            let v756: &'static str = r#"deps"#;
            let v758: clap::Arg = clap::Arg::new(v756);
            let v760: clap::Arg = v758.short('d');
            let v761: string = string("r#\"deps\"#");
            let v762: &'static str = r#"deps"#;
            let v764: clap::Arg = v760.long(v762);
            let v766: Vec<&'static str> = v733.to_vec();
            let v768: clap::Arg = v764.value_names(v766);
            let v770: clap::Arg = v768.num_args(v754);
            let v772: clap::ArgAction = clap::ArgAction::Append;
            let v774: clap::Arg = v770.action(v772);
            let v776: clap::Command = clap::Command::arg(v728, v774);
            let v778: clap::Command = clap::Command::subcommand(v709, v776);
            let v780: string = string("r#\"dib\"#");
            let v781: &'static str = r#"dib"#;
            let v783: clap::Command = clap::Command::new(v781);
            let v785: string = string("r#\"path\"#");
            let v786: &'static str = r#"path"#;
            let v788: clap::Arg = clap::Arg::new(v786);
            let v790: clap::Arg = v788.short('p');
            let v791: string = string("r#\"path\"#");
            let v792: &'static str = r#"path"#;
            let v794: clap::Arg = v790.long(v792);
            let v796: clap::Arg = v794.required(true);
            let v798: clap::Command = clap::Command::arg(v783, v796);
            let v800: string = string("clap::value_parser!(u8).into()");
            let v801: clap::builder::ValueParser = clap::value_parser!(u8).into();
            let v803: string = string("r#\"retries\"#");
            let v804: &'static str = r#"retries"#;
            let v806: clap::Arg = clap::Arg::new(v804);
            let v808: clap::Arg = v806.short('r');
            let v809: string = string("r#\"retries\"#");
            let v810: &'static str = r#"retries"#;
            let v812: clap::Arg = v808.long(v810);
            let v814: clap::Arg = v812.value_parser(v801);
            let v816: clap::Command = clap::Command::arg(v798, v814);
            let v818: string = string("r#\"working-directory\"#");
            let v819: &'static str = r#"working-directory"#;
            let v821: clap::Arg = clap::Arg::new(v819);
            let v823: clap::Arg = v821.short('w');
            let v824: string = string("r#\"working-directory\"#");
            let v825: &'static str = r#"working-directory"#;
            let v827: clap::Arg = v823.long(v825);
            let v829: clap::Command = clap::Command::arg(v816, v827);
            clap::Command::subcommand(v778, v829)
        }
        pub fn closure0(unitVar: (), unitVar_1: ()) {
            let v1_1: bool = true;
            () //;
        } /* /*;
          {
              let v4: string = string("*/ #[test] fn verify_app() { //");
              let v5: bool = */
        #[test]
        fn verify_app() {
            //;
            let v6: clap::Command = Spiral::method0();
            clap::Command::debug_assert(v6);
            {
                //;
                ()
            }
        }
        pub fn method4(v0_1: string) -> string {
            v0_1
        }
        pub fn method5() -> string {
            string("")
        }
        pub fn closure3(unitVar: (), v0_1: string) -> Spiral::US5 {
            Spiral::US5::US5_0(v0_1)
        }
        pub fn method6() -> Func1<string, Spiral::US5> {
            Func1::new(move |v: string| Spiral::closure3((), v))
        }
        pub fn method3(v0_1: string) -> string {
            let v6: string = Spiral::method4(v0_1);
            let v8: Result<std::string::String, std::env::VarError> = std::env::var(&*v6);
            let v10: bool = true;
            let _result_map_ = v8.map(|x| {
                //;
                let v12: std::string::String = x;
                let v14: string = fable_library_rust::String_::fromString(v12);
                let v16: bool = true;
                v14
            });
            let v18: Result<string, std::env::VarError> = _result_map_;
            let v19: string = Spiral::method5();
            v18.unwrap_or(v19)
        }
        pub fn method2() -> (Spiral::US1, Spiral::US2) {
            let v1_1: string = Spiral::method3(string("TRACE_LEVEL"));
            let v6: string = toLower(string("Critical"));
            let v13: string = toLower(string("Warning"));
            let v20: string = toLower(string("Info"));
            let v27: string = toLower(string("Debug"));
            let v34: string = toLower(string("Verbose"));
            let v41: Spiral::US1 = if string("Verbose") == (v1_1.clone()) {
                Spiral::US1::US1_0(Spiral::US0::US0_0)
            } else {
                Spiral::US1::US1_1
            };
            (
                match &v41 {
                    Spiral::US1::US1_0(v41_0_0) => Spiral::US1::US1_0(
                        match &v41 {
                            Spiral::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    ),
                    _ => {
                        let v48: Spiral::US1 = if string("Debug") == (v1_1.clone()) {
                            Spiral::US1::US1_0(Spiral::US0::US0_1)
                        } else {
                            Spiral::US1::US1_1
                        };
                        match &v48 {
                            Spiral::US1::US1_0(v48_0_0) => Spiral::US1::US1_0(
                                match &v48 {
                                    Spiral::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            _ => {
                                let v55: Spiral::US1 = if string("Info") == (v1_1.clone()) {
                                    Spiral::US1::US1_0(Spiral::US0::US0_2)
                                } else {
                                    Spiral::US1::US1_1
                                };
                                match &v55 {
                                    Spiral::US1::US1_0(v55_0_0) => Spiral::US1::US1_0(
                                        match &v55 {
                                            Spiral::US1::US1_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                    ),
                                    _ => {
                                        let v62: Spiral::US1 =
                                            if string("Warning") == (v1_1.clone()) {
                                                Spiral::US1::US1_0(Spiral::US0::US0_3)
                                            } else {
                                                Spiral::US1::US1_1
                                            };
                                        match &v62 {
                                            Spiral::US1::US1_0(v62_0_0) => Spiral::US1::US1_0(
                                                match &v62 {
                                                    Spiral::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }
                                                .clone(),
                                            ),
                                            _ => {
                                                let v69: Spiral::US1 =
                                                    if string("Critical") == (v1_1.clone()) {
                                                        Spiral::US1::US1_0(Spiral::US0::US0_4)
                                                    } else {
                                                        Spiral::US1::US1_1
                                                    };
                                                match &v69 {
                                                    Spiral::US1::US1_0(v69_0_0) => {
                                                        Spiral::US1::US1_0(
                                                            match &v69 {
                                                                Spiral::US1::US1_0(x) => x.clone(),
                                                                _ => unreachable!(),
                                                            }
                                                            .clone(),
                                                        )
                                                    }
                                                    _ => {
                                                        let v76: Spiral::US1 = if (v34.clone())
                                                            == (v1_1.clone())
                                                        {
                                                            Spiral::US1::US1_0(Spiral::US0::US0_0)
                                                        } else {
                                                            Spiral::US1::US1_1
                                                        };
                                                        match &v76 {
                                                            Spiral::US1::US1_0(v76_0_0) => {
                                                                Spiral::US1::US1_0(
                                                                    match &v76 {
                                                                        Spiral::US1::US1_0(x) => {
                                                                            x.clone()
                                                                        }
                                                                        _ => unreachable!(),
                                                                    }
                                                                    .clone(),
                                                                )
                                                            }
                                                            _ => {
                                                                let v83: Spiral::US1 = if (v27
                                                                    .clone())
                                                                    == (v1_1.clone())
                                                                {
                                                                    Spiral::US1::US1_0(
                                                                        Spiral::US0::US0_1,
                                                                    )
                                                                } else {
                                                                    Spiral::US1::US1_1
                                                                };
                                                                match &v83 {
                                                                 Spiral::US1::US1_0(v83_0_0)
                                                                 =>
                                                                 Spiral::US1::US1_0(match &v83
                                                                                        {
                                                                                        Spiral::US1::US1_0(x)
                                                                                        =>
                                                                                        x.clone(),
                                                                                        _
                                                                                        =>
                                                                                        unreachable!(),
                                                                                    }.clone()),
                                                                 _ => {
                                                                     let v90:
                                                                             Spiral::US1 =
                                                                         if (v20.clone())
                                                                                ==
                                                                                (v1_1.clone())
                                                                            {
                                                                             Spiral::US1::US1_0(Spiral::US0::US0_2)
                                                                         } else {
                                                                             Spiral::US1::US1_1
                                                                         };
                                                                     match &v90
                                                                         {
                                                                         Spiral::US1::US1_0(v90_0_0)
                                                                         =>
                                                                         Spiral::US1::US1_0(match &v90
                                                                                                {
                                                                                                Spiral::US1::US1_0(x)
                                                                                                =>
                                                                                                x.clone(),
                                                                                                _
                                                                                                =>
                                                                                                unreachable!(),
                                                                                            }.clone()),
                                                                         _ =>
                                                                         {
                                                                             let v97:
                                                                                     Spiral::US1 =
                                                                                 if (v13.clone())
                                                                                        ==
                                                                                        (v1_1.clone())
                                                                                    {
                                                                                     Spiral::US1::US1_0(Spiral::US0::US0_3)
                                                                                 } else {
                                                                                     Spiral::US1::US1_1
                                                                                 };
                                                                             match &v97
                                                                                 {
                                                                                 Spiral::US1::US1_0(v97_0_0)
                                                                                 =>
                                                                                 Spiral::US1::US1_0(match &v97
                                                                                                        {
                                                                                                        Spiral::US1::US1_0(x)
                                                                                                        =>
                                                                                                        x.clone(),
                                                                                                        _
                                                                                                        =>
                                                                                                        unreachable!(),
                                                                                                    }.clone()),
                                                                                 _
                                                                                 =>
                                                                                 {
                                                                                     let v104:
                                                                                             Spiral::US1 =
                                                                                         if (v6.clone())
                                                                                                ==
                                                                                                (v1_1.clone())
                                                                                            {
                                                                                             Spiral::US1::US1_0(Spiral::US0::US0_4)
                                                                                         } else {
                                                                                             Spiral::US1::US1_1
                                                                                         };
                                                                                     match &v104
                                                                                         {
                                                                                         Spiral::US1::US1_0(v104_0_0)
                                                                                         =>
                                                                                         Spiral::US1::US1_0(match &v104
                                                                                                                {
                                                                                                                Spiral::US1::US1_0(x)
                                                                                                                =>
                                                                                                                x.clone(),
                                                                                                                _
                                                                                                                =>
                                                                                                                unreachable!(),
                                                                                                            }.clone()),
                                                                                         _
                                                                                         =>
                                                                                         Spiral::US1::US1_1,
                                                                                     }
                                                                                 }
                                                                             }
                                                                         }
                                                                     }
                                                                 }
                                                             }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                if (Spiral::method3(string("AUTOMATION"))) != string("True") {
                    Spiral::US2::US2_1
                } else {
                    Spiral::US2::US2_0({
                        let _arg: DateTime = DateTime::now();
                        _arg.ticks()
                    })
                },
            )
        }
        pub fn closure4(unitVar: (), v0_1: string) {
            ();
        }
        pub fn method1(
            v0_1: Spiral::US0,
        ) -> (
            LrcPtr<Spiral::Mut0>,
            LrcPtr<Spiral::Mut1>,
            LrcPtr<Spiral::Mut2>,
            LrcPtr<Spiral::Mut3>,
            LrcPtr<Spiral::Mut4>,
            Option<i64>,
        ) {
            let patternInput: (Spiral::US1, Spiral::US2) = Spiral::method2();
            let _run_target_args__v3: (Spiral::US1, Spiral::US2) =
                (patternInput.0.clone(), patternInput.1.clone());
            let v173: Spiral::US2 = _run_target_args__v3.1.clone();
            let v172: Spiral::US1 = _run_target_args__v3.0.clone();
            (
                LrcPtr::new(Spiral::Mut0 {
                    l0: MutCell::new(1_i64),
                }),
                LrcPtr::new(Spiral::Mut1 {
                    l0: MutCell::new(Func1::new(move |v: string| Spiral::closure4((), v))),
                }),
                LrcPtr::new(Spiral::Mut2 {
                    l0: MutCell::new(true),
                }),
                LrcPtr::new(Spiral::Mut3 {
                    l0: MutCell::new(string("")),
                }),
                LrcPtr::new(Spiral::Mut4 {
                    l0: MutCell::new(match &v172 {
                        Spiral::US1::US1_0(v172_0_0) => match &v172 {
                            Spiral::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                        _ => v0_1.clone(),
                    }),
                }),
                match &v173 {
                    Spiral::US2::US2_0(v173_0_0) => Some(match &v173 {
                        Spiral::US2::US2_0(x) => x.clone(),
                        _ => unreachable!(),
                    }),
                    _ => None::<i64>,
                },
            )
        }
        pub fn closure2(unitVar: (), unitVar_1: ()) {
            if Spiral::TraceState::trace_state().get().clone().is_none() {
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::method1(Spiral::US0::US0_0);
                Spiral::TraceState::trace_state().set(Some((
                    patternInput.0.clone(),
                    patternInput.1.clone(),
                    patternInput.2.clone(),
                    patternInput.3.clone(),
                    patternInput.4.clone(),
                    patternInput.5.clone(),
                )));
                ()
            };
        }
        pub fn method7(v0_1: Spiral::US0) -> bool {
            let v3: () = {
                Spiral::closure2((), ());
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v42: Spiral::US0 = (patternInput.4.clone()).l0.get().clone();
            if ((patternInput.2.clone()).l0.get().clone()) == false {
                false
            } else {
                (find(
                    v0_1,
                    ofSeq(ofList(ofArray(new_array(&[
                        LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                        LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                        LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                        LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                        LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                    ])))),
                )) >= (find(
                    v42,
                    ofSeq(ofList(ofArray(new_array(&[
                        LrcPtr::new((Spiral::US0::US0_0, 0_i32)),
                        LrcPtr::new((Spiral::US0::US0_1, 1_i32)),
                        LrcPtr::new((Spiral::US0::US0_2, 2_i32)),
                        LrcPtr::new((Spiral::US0::US0_3, 3_i32)),
                        LrcPtr::new((Spiral::US0::US0_4, 4_i32)),
                    ])))),
                ))
            }
        }
        pub fn closure6(unitVar: (), v0_1: i64) -> Spiral::US2 {
            Spiral::US2::US2_0(v0_1)
        }
        pub fn method9() -> Func1<i64, Spiral::US2> {
            Func1::new(move |v: i64| Spiral::closure6((), v))
        }
        pub fn method10() -> string {
            string("hh:mm:ss")
        }
        pub fn method11() -> string {
            string("HH:mm:ss")
        }
        pub fn method8(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
        ) -> string {
            let v198: Spiral::US2 = defaultValue(Spiral::US2::US2_1, map(Spiral::method9(), v5));
            let v316: DateTime = match &v198 {
                Spiral::US2::US2_0(v198_0_0) => {
                    let v268: TimeSpan = TimeSpan::new_ticks(
                        ({
                            let _arg: DateTime = DateTime::now();
                            _arg.ticks()
                        }) - (match &v198 {
                            Spiral::US2::US2_0(x) => x.clone(),
                            _ => unreachable!(),
                        }),
                    );
                    DateTime::new_ymdhms_milli(
                        1_i32,
                        1_i32,
                        1_i32,
                        v268.hours(),
                        v268.minutes(),
                        v268.seconds(),
                        v268.milliseconds(),
                    )
                }
                _ => DateTime::now(),
            };
            let v318: string = Spiral::method10();
            let provider: string = if (v318.clone()) == string("") {
                string("M-d-y hh:mm:ss tt")
            } else {
                v318
            };
            v316.toString(provider)
        }
        pub fn method14() -> string {
            string("")
        }
        pub fn closure7(v0_1: LrcPtr<Spiral::Mut3>, v1_1: string, unitVar: ()) {
            let v3: string = append((v0_1.l0.get().clone()), (v1_1));
            v0_1.l0.set(v3);
            ()
        }
        pub fn method13(v0_1: char) -> string {
            let v2: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v9: () = {
                Spiral::closure7(v2.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method15() -> string {
            string("\u{001b}[0m")
        }
        pub fn method12() -> string {
            let v8: string = Spiral::method13(getCharAt(toLower(string("Debug")), 0_i32));
            let v15: &str = inline_colorization::color_bright_blue;
            let v22: &str = &*v8;
            let v50: &str = inline_colorization::color_reset;
            let v52: std::string::String = format!("{}{}{}", v15, v22, v50);
            fable_library_rust::String_::fromString(v52)
        }
        pub fn method17(v0_1: Array<string>) -> string {
            let v2: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v11: () = {
                Spiral::closure7(v2.clone(), string("{ "), ());
                ()
            };
            let v22: () = {
                Spiral::closure7(v2.clone(), string("args"), ());
                ()
            };
            let v33: () = {
                Spiral::closure7(v2.clone(), string(" = "), ());
                ()
            };
            let v46: () = {
                Spiral::closure7(v2.clone(), sprintf!("{:?}", v0_1), ());
                ()
            };
            let v57: () = {
                Spiral::closure7(v2.clone(), string(" }"), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method18(v0_1: string) -> string {
            trimEndChars(
                trimStartChars(v0_1, toArray(empty::<char>())),
                toArray(ofArray(new_array(&[' ', '/']))),
            )
        }
        pub fn method16(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: Array<string>,
        ) -> string {
            let v9: string = Spiral::method17(v8);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral.main"),
                v9
            ))
        }
        pub fn closure8(v0_1: LrcPtr<Spiral::Mut0>, unitVar: ()) {
            let v2: i64 = (v0_1.l0.get().clone()) + 1_i64;
            v0_1.l0.set(v2);
            ()
        }
        pub fn closure10(v0_1: string, unitVar: ()) {
            printfn!("{0}", v0_1);
        }
        pub fn closure9(unitVar: (), v0_1: string) {
            let v3: () = {
                Spiral::closure10(v0_1, ());
                ()
            };
            ()
        }
        pub fn method19(v0_1: string) {
            let v3: () = {
                Spiral::closure2((), ());
                ()
            };
            let patternInput: (
                LrcPtr<Spiral::Mut0>,
                LrcPtr<Spiral::Mut1>,
                LrcPtr<Spiral::Mut2>,
                LrcPtr<Spiral::Mut3>,
                LrcPtr<Spiral::Mut4>,
                Option<i64>,
            ) = Spiral::TraceState::trace_state().get().clone().unwrap();
            let v44: () = {
                Spiral::closure8(patternInput.0.clone(), ());
                ()
            };
            println!("{}", v0_1.clone());
            ((patternInput.1.clone()).l0.get().clone())(v0_1)
        }
        pub fn closure5(v0_1: Array<string>, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_1) {
                let v5: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v31: Option<i64> = patternInput.5.clone();
                let v30: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v29: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v28: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v27: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v26: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method16(
                    v26.clone(),
                    v27.clone(),
                    v28.clone(),
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    Spiral::method8(v26, v27, v28, v29, v30, v31),
                    Spiral::method12(),
                    v0_1,
                ))
            };
        }
        pub fn closure11(unitVar: (), v0_1: &str) -> std::string::String {
            String::from(v0_1)
        }
        pub fn closure12(
            unitVar: (),
            _arg: (std::string::String, clap::ArgMatches),
        ) -> Spiral::US6 {
            Spiral::US6::US6_0(_arg.0.clone(), _arg.1.clone())
        }
        pub fn method21() -> Func1<(std::string::String, clap::ArgMatches), Spiral::US6> {
            Func1::new(move |arg10_0040: (std::string::String, clap::ArgMatches)| {
                Spiral::closure12((), arg10_0040)
            })
        }
        pub fn method22() -> string {
            string("gleam-path")
        }
        pub fn closure13(unitVar: (), v0_1: std::string::String) -> Spiral::US7 {
            Spiral::US7::US7_0(v0_1)
        }
        pub fn method23() -> Func1<std::string::String, Spiral::US7> {
            Func1::new(move |v: std::string::String| Spiral::closure13((), v))
        }
        pub fn method24() -> string {
            string("target")
        }
        pub fn method25() -> string {
            string("deps")
        }
        pub fn closure14(unitVar: (), v0_1: Vec<std::string::String>) -> Spiral::US11 {
            Spiral::US11::US11_0(v0_1)
        }
        pub fn method26() -> Func1<Vec<std::string::String>, Spiral::US11> {
            Func1::new(move |v: Vec<std::string::String>| Spiral::closure14((), v))
        }
        pub fn method27(v0_1: Vec<u8>) -> Vec<u8> {
            v0_1
        }
        pub fn method28(v0_1: string, v1_1: string) -> string {
            let v3: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v12: () = {
                Spiral::closure7(v3.clone(), string("{ "), ());
                ()
            };
            let v23: () = {
                Spiral::closure7(v3.clone(), string("extension"), ());
                ()
            };
            let v34: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v43: () = {
                Spiral::closure7(v3.clone(), v0_1, ());
                ()
            };
            let v54: () = {
                Spiral::closure7(v3.clone(), string("; "), ());
                ()
            };
            let v65: () = {
                Spiral::closure7(v3.clone(), string("new_code"), ());
                ()
            };
            let v74: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v83: () = {
                Spiral::closure7(v3.clone(), v1_1, ());
                ()
            };
            let v94: () = {
                Spiral::closure7(v3.clone(), string(" }"), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method30() -> string {
            string("")
        }
        pub fn method31(v0_1: string) -> string {
            v0_1
        }
        pub fn method32(v0_1: i32, v1_1: LrcPtr<Spiral::Mut5>) -> bool {
            (v1_1.l0.get().clone()) < (v0_1)
        }
        pub fn method33() -> string {
            string("")
        }
        pub fn method29(v0_1: string) -> string {
            let v9: Array<u8> = {
                let _arg: LrcPtr<dyn Encoding> = get_UTF8();
                _arg.getBytes(v0_1)
            };
            let v11: Vec<u8> = v9.to_vec();
            let v13: std::io::Cursor<Vec<u8>> = std::io::Cursor::new(v11);
            let v15: std::io::BufReader<std::io::Cursor<Vec<u8>>> = std::io::BufReader::new(v13);
            let v17: bool = true;
            let mut v15 = v15;
            let result: sha2::Sha256 = sha2::Digest::new();
            {
                let v20: sha2::Sha256 = result;
                let v22: bool = true;
                let mut v20 = v20;
                let v24: usize = 0_i32 as usize;
                let v28: _ = [0_u8; 1024];
                let v30: bool = true;
                loop {
                    // rust.loop;
                    let v32: bool = true;
                    let mut v28 = v28;
                    let v34: Result<usize, std::io::Error> =
                        std::io::Read::read(&mut v15, &mut v28);
                    let v47: usize = v34.unwrap();
                    if (v47) == (v24) {
                        let v55: bool = true;
                        break;
                        ()
                    }
                    {
                        let v57: usize = v47;
                        let v74: &_ = if (v57) == (v28.len()) {
                            &v28[v24..]
                        } else {
                            &v28[v24..v57]
                        };
                        sha2::Digest::update(&mut v20, v74);
                        {
                            let v77: bool = true;
                        } // rust.loop;
                        let v79: bool = true;
                    } // rust.loop;
                    let v81: bool = true;
                } // rust.loop;
                let v83: bool = true;
                {
                    // rust.loop;
                    let v85: bool = true;
                    {
                        // rust.loop;
                        let v87: &[u8] = &sha2::Digest::finalize(v20);
                        let v89: Vec<u8> = v87.iter().map(|x| *x).collect::<Vec<_>>();
                        let v91: bool = true;
                        let _vec_map: Vec<_> = v89
                            .into_iter()
                            .map(|x| {
                                //;
                                let v93: u8 = x;
                                let v95: std::string::String = format!("{:02x}", v93);
                                let v97: string = fable_library_rust::String_::fromString(v95);
                                let v99: bool = true;
                                v97
                            })
                            .collect::<Vec<_>>();
                        let v101: Vec<string> = _vec_map;
                        let v103: Array<string> =
                            fable_library_rust::NativeArray_::array_from(v101.clone());
                        let _let__v108: LrcPtr<dyn IEnumerable_1<string>> = delay(Func0::new({
                            let v103 = v103.clone();
                            move || {
                                map_1(
                                    Func1::new({
                                        let v103 = v103.clone();
                                        move |i: i32| v103[i].clone()
                                    }),
                                    rangeNumeric(0_i32, 1_i32, (get_Count(v103.clone())) - 1_i32),
                                )
                            }
                        }));
                        let v117: string = Spiral::method30();
                        let v124: string = join(
                            if (v117.clone()) == string("\n") {
                                Spiral::method31(v117.clone())
                            } else {
                                v117
                            },
                            toArray_1(_let__v108),
                        );
                        Ok::<string, std::io::Error>(v124).unwrap()
                    }
                }
            }
        }
        pub fn method34() -> string {
            let v6: Result<std::path::PathBuf, std::io::Error> = std::env::current_dir();
            let v10: std::path::PathBuf = v6.unwrap();
            let v28: std::path::Display = v10.display();
            let v61: std::string::String = format!("{}", v28);
            fable_library_rust::String_::fromString(v61)
        }
        pub fn method36(v0_1: string, v1_1: string) -> string {
            let v13: &str = &*v0_1;
            let v46: std::string::String = String::from(v13);
            let v79: std::path::PathBuf = std::path::PathBuf::from(v46);
            let v112: &str = &*v1_1;
            let v145: std::string::String = String::from(v112);
            let v173: std::path::PathBuf = v79.join(v145);
            let v180: std::path::Display = v173.display();
            let v213: std::string::String = format!("{}", v180);
            fable_library_rust::String_::fromString(v213)
        }
        pub fn method38(v0_1: string) -> bool {
            let v12: &str = &*v0_1;
            let v45: std::string::String = String::from(v12);
            let v99: std::path::PathBuf = std::path::PathBuf::from(v45);
            if v99.clone().exists() {
                v99.is_file()
            } else {
                false
            }
        }
        pub fn closure15(unitVar: (), v0_1: string) -> bool {
            Spiral::method38(v0_1)
        }
        pub fn method39(v0_1: string) -> bool {
            let v12: &str = &*v0_1;
            let v45: std::string::String = String::from(v12);
            let v99: std::path::PathBuf = std::path::PathBuf::from(v45);
            if v99.clone().exists() {
                v99.is_dir()
            } else {
                false
            }
        }
        pub fn closure16(unitVar: (), v0_1: string) -> bool {
            Spiral::method39(v0_1)
        }
        pub fn method41(v0_1: string) -> Option<string> {
            let v12: &str = &*v0_1;
            let v45: std::string::String = String::from(v12);
            let v78: std::path::PathBuf = std::path::PathBuf::from(v45);
            let v106: Option<std::path::PathBuf> = v78.parent().map(std::path::PathBuf::from);
            let v108: bool = true;
            let _optionm_map_ = v106.map(|x| {
                //;
                let v110: std::path::PathBuf = x;
                let v117: std::path::Display = v110.display();
                let v150: std::string::String = format!("{}", v117);
                let v178: string = fable_library_rust::String_::fromString(v150);
                let v180: bool = true;
                v178
            });
            _optionm_map_
        }
        pub fn method42(
            v0_1: string,
            v1_1: string,
            v2: bool,
            v3: Func1<string, bool>,
            v4: string,
        ) -> Spiral::US13 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<bool> = MutCell::new(v2);
            let v3 = MutCell::new(v3.clone());
            let v4: MutCell<string> = MutCell::new(v4.clone());
            '_method42: loop {
                break '_method42 (if v3(Spiral::method36(v4.get().clone(), v0_1.get().clone())) {
                    Spiral::US13::US13_0(v4.get().clone())
                } else {
                    let v8: Option<string> = Spiral::method41(v4.get().clone());
                    let v33: Spiral::US5 =
                        defaultValue(Spiral::US5::US5_1, map(Spiral::method6(), v8));
                    match &v33 {
                        Spiral::US5::US5_0(v33_0_0) => {
                            let v0_1_temp: string = v0_1.get().clone();
                            let v1_1_temp: string = v1_1.get().clone();
                            let v2_temp: bool = v2.get().clone();
                            let v3_temp = v3.get().clone();
                            let v4_temp: string = match &v33 {
                                Spiral::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method42;
                        }
                        _ => Spiral::US13::US13_1(append(
                            (concat(new_array(&[
                                string("file_system.find_parent / No parent for "),
                                if v2.get().clone() {
                                    string("file")
                                } else {
                                    string("dir")
                                },
                            ]))),
                            sprintf!(
                                " \'{}\' at \'{}\' (until \'{}\')",
                                v0_1.get().clone(),
                                v1_1.get().clone(),
                                v4.get().clone()
                            ),
                        )),
                    }
                });
            }
        }
        pub fn method40(
            v0_1: string,
            v1_1: string,
            v2: bool,
            v3: Func1<string, bool>,
        ) -> Spiral::US13 {
            if v3(Spiral::method36(v1_1.clone(), v0_1.clone())) {
                Spiral::US13::US13_0(v1_1.clone())
            } else {
                let v7: Option<string> = Spiral::method41(v1_1.clone());
                let v32: Spiral::US5 = defaultValue(Spiral::US5::US5_1, map(Spiral::method6(), v7));
                match &v32 {
                    Spiral::US5::US5_0(v32_0_0) => Spiral::method42(
                        v0_1.clone(),
                        v1_1.clone(),
                        v2,
                        v3.clone(),
                        match &v32 {
                            Spiral::US5::US5_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    ),
                    _ => Spiral::US13::US13_1(append(
                        (concat(new_array(&[
                            string("file_system.find_parent / No parent for "),
                            if v2 { string("file") } else { string("dir") },
                        ]))),
                        sprintf!(
                            " \'{}\' at \'{}\' (until \'{}\')",
                            v0_1.clone(),
                            v1_1.clone(),
                            v1_1.clone()
                        ),
                    )),
                }
            }
        }
        pub fn method37(v0_1: Spiral::US12, v1_1: string, v2: string) -> Spiral::US13 {
            let v3: bool = if let Spiral::US12::US12_0 = &v0_1 {
                true
            } else {
                false
            };
            Spiral::method40(
                v1_1,
                v2,
                v3,
                if v3 {
                    Func1::new(move |v: string| Spiral::closure15((), v))
                } else {
                    Func1::new(move |v_1: string| Spiral::closure16((), v_1))
                },
            )
        }
        pub fn method43() -> string {
            let v8: string = Spiral::method13(getCharAt(toLower(string("Warning")), 0_i32));
            let v15: &str = inline_colorization::color_yellow;
            let v22: &str = &*v8;
            let v50: &str = inline_colorization::color_reset;
            let v52: std::string::String = format!("{}{}{}", v15, v22, v50);
            fable_library_rust::String_::fromString(v52)
        }
        pub fn method45(v0_1: string, v1_1: string) -> string {
            let v3: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v12: () = {
                Spiral::closure7(v3.clone(), string("{ "), ());
                ()
            };
            let v23: () = {
                Spiral::closure7(v3.clone(), string("dir"), ());
                ()
            };
            let v34: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v43: () = {
                Spiral::closure7(v3.clone(), v0_1, ());
                ()
            };
            let v54: () = {
                Spiral::closure7(v3.clone(), string("; "), ());
                ()
            };
            let v65: () = {
                Spiral::closure7(v3.clone(), string("error"), ());
                ()
            };
            let v74: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v83: () = {
                Spiral::closure7(v3.clone(), v1_1, ());
                ()
            };
            let v94: () = {
                Spiral::closure7(v3.clone(), string(" }"), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method44(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
            v9: string,
        ) -> string {
            let v10: string = Spiral::method45(v8, v9);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("file_system.get_workspace_root"),
                v10
            ))
        }
        pub fn closure17(v0_1: string, v1_1: string, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_3) {
                let v6: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v32: Option<i64> = patternInput.5.clone();
                let v31: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v30: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v29: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v28: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v27: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method44(
                    v27.clone(),
                    v28.clone(),
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    Spiral::method8(v27, v28, v29, v30, v31, v32),
                    Spiral::method43(),
                    v0_1,
                    v1_1,
                ))
            };
        }
        pub fn method50(v0_1: std::io::Error) -> string {
            let v2: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v9: std::string::String = format!("{:#?}", v0_1);
            let v48: () = {
                Spiral::closure7(v2.clone(), fable_library_rust::String_::fromString(v9), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn closure18(unitVar: (), v0_1: std::io::Error) -> string {
            Spiral::method50(v0_1)
        }
        pub fn method49() -> Func1<std::io::Error, string> {
            Func1::new(move |v: std::io::Error| Spiral::closure18((), v))
        }
        pub fn closure19(unitVar: (), v0_1: std::path::PathBuf) -> Spiral::US14 {
            Spiral::US14::US14_0(v0_1)
        }
        pub fn method51() -> Func1<std::path::PathBuf, Spiral::US14> {
            Func1::new(move |v: std::path::PathBuf| Spiral::closure19((), v))
        }
        pub fn closure20(unitVar: (), v0_1: string) -> Spiral::US14 {
            Spiral::US14::US14_1(v0_1)
        }
        pub fn method52() -> Func1<string, Spiral::US14> {
            Func1::new(move |v: string| Spiral::closure20((), v))
        }
        pub fn method55(v0_1: string) -> string {
            let v12: &str = &*v0_1;
            let v45: std::string::String = String::from(v12);
            let v78: std::path::PathBuf = std::path::PathBuf::from(v45);
            let v106: Option<&std::ffi::OsStr> = v78.file_name();
            let v108: bool = true;
            let _optionm_map_ = v106.map(|x| {
                //;
                let v110: &std::ffi::OsStr = x;
                let v112: std::ffi::OsString = v110.to_os_string();
                let v114: Option<&str> = v112.to_str();
                let v116: &str = v114.unwrap();
                let v123: std::string::String = String::from(v116);
                let v151: string = fable_library_rust::String_::fromString(v123);
                let v153: bool = true;
                v151
            });
            let v155: Option<string> = _optionm_map_;
            let v180: Spiral::US5 = defaultValue(Spiral::US5::US5_1, map(Spiral::method6(), v155));
            match &v180 {
                Spiral::US5::US5_0(v180_0_0) => match &v180 {
                    Spiral::US5::US5_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => string(""),
            }
        }
        pub fn method56(v0_1: string) -> string {
            let v2: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v9: () = {
                Spiral::closure7(v2.clone(), v0_1, ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method54(
            v0_1: string,
            v1_1: Func2<u8, string, Result<std::path::PathBuf, std::io::Error>>,
            v2: u8,
            v3: string,
            v4: string,
        ) -> Result<std::path::PathBuf, std::io::Error> {
            let v5: string = Spiral::method55(v4.clone());
            let v6: Option<string> = Spiral::method41(v4.clone());
            let v31: Spiral::US5 = defaultValue(Spiral::US5::US5_1, map(Spiral::method6(), v6));
            let v35: string = Spiral::method56(v3);
            if (v2) >= 11_u8 {
                let v39: string = append(
                    string("file_system.read_link / "),
                    sprintf!(
                        "path: {} / n: {} / path\': {} / name: {}",
                        v0_1.clone(),
                        v2,
                        v4.clone(),
                        v5.clone()
                    ),
                );
                let v46: std::io::Error = std::io::Error::new(std::io::ErrorKind::Other, &*v39);
                Err(v46)
            } else {
                if let Spiral::US5::US5_0(v31_0_0) = &v31 {
                    if (v4.clone()) != string("") {
                        let v97: Result<std::path::PathBuf, std::io::Error> =
                            v1_1((v2) + 1_u8, v31_0_0.clone());
                        let v98 = Spiral::method49();
                        let v111: Result<std::path::PathBuf, string> = v97.map_err(|x| v98(x));
                        let v114 = Spiral::method51();
                        let v115 = Spiral::method52();
                        let v117: Spiral::US14 = match &v111 {
                            Err(v111_1_0) => v115(v111_1_0.clone()),
                            Ok(v111_0_0) => v114(v111_0_0.clone()),
                        };
                        match &v117 {
                            Spiral::US14::US14_0(v117_0_0) => {
                                let v158: string = Spiral::method36(
                                    toString(v117_0_0.clone().display()),
                                    v5.clone(),
                                );
                                let v165: &str = &*v158;
                                let v198: std::string::String = String::from(v165);
                                let v231: std::path::PathBuf = std::path::PathBuf::from(v198);
                                Ok(v231)
                            }
                            Spiral::US14::US14_1(v117_1_0) => {
                                let v276: string = append(
                                    string("file_system.read_link / "),
                                    sprintf!(
                                        "error\': {} / error: {} / name: {}",
                                        v117_1_0.clone(),
                                        v35.clone(),
                                        v5.clone()
                                    ),
                                );
                                let v283: std::io::Error =
                                    std::io::Error::new(std::io::ErrorKind::Other, &*v276);
                                Err(v283)
                            }
                        }
                    } else {
                        let v329: string =
                            append(string("file_system.read_link / run / The file or directory is not a reparse point. / "),
                                   sprintf!("path: {} / error: {} / path\': {} / name: {}",
                                            v0_1.clone(), v35.clone(),
                                            v4.clone(), v5.clone()));
                        let v336: std::io::Error =
                            std::io::Error::new(std::io::ErrorKind::Other, &*v329);
                        Err(v336)
                    }
                } else {
                    let v381: string =
                        append(string("file_system.read_link / run / The file or directory is not a reparse point. / "),
                               sprintf!("path: {} / error: {} / path\': {} / name: {}",
                                        v0_1, v35.clone(), v4, v5.clone()));
                    let v388: std::io::Error =
                        std::io::Error::new(std::io::ErrorKind::Other, &*v381);
                    Err(v388)
                }
            }
        }
        pub fn method53(
            v0_1: string,
            v1_1: u8,
            v2: string,
        ) -> Result<std::path::PathBuf, std::io::Error> {
            let v9: Result<std::path::PathBuf, std::io::Error> = std::fs::read_link(&*v2.clone());
            let v10 = Spiral::method49();
            let v23: Result<std::path::PathBuf, string> = v9.map_err(|x| v10(x));
            let v26 = Spiral::method51();
            let v27 = Spiral::method52();
            let v29: Spiral::US14 = match &v23 {
                Err(v23_1_0) => v27(v23_1_0.clone()),
                Ok(v23_0_0) => v26(v23_0_0.clone()),
            };
            match &v29 {
                Spiral::US14::US14_0(v29_0_0) => Ok(v29_0_0.clone()),
                Spiral::US14::US14_1(v29_1_0) => Spiral::method54(
                    v0_1.clone(),
                    Func2::new({
                        let v0_1 = v0_1.clone();
                        move |b0: u8, b1: string| {
                            (Func1::new({
                                let v0_1 = v0_1.clone();
                                move |v: u8| Spiral::closure21(v0_1.clone(), v)
                            }))(b0)(b1)
                        }
                    }),
                    v1_1,
                    v29_1_0.clone(),
                    v2.clone(),
                ),
            }
        }
        pub fn closure22(
            v0_1: string,
            v1_1: u8,
            v2: string,
        ) -> Result<std::path::PathBuf, std::io::Error> {
            Spiral::method53(v0_1, v1_1, v2)
        }
        pub fn closure21(
            v0_1: string,
            v1_1: u8,
        ) -> Func1<string, Result<std::path::PathBuf, std::io::Error>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1_1 = v1_1.clone();
                move |v: string| Spiral::closure22(v0_1.clone(), v1_1, v)
            })
        }
        pub fn method57(
            v0_1: string,
            v1_1: Func2<u8, string, Result<std::path::PathBuf, std::io::Error>>,
            v2: u8,
            v3: string,
        ) -> Result<std::path::PathBuf, std::io::Error> {
            let v4: string = Spiral::method55(v0_1.clone());
            let v5: Option<string> = Spiral::method41(v0_1.clone());
            let v30: Spiral::US5 = defaultValue(Spiral::US5::US5_1, map(Spiral::method6(), v5));
            let v34: string = Spiral::method56(v3);
            if (v2) >= 11_u8 {
                let v38: string = append(
                    string("file_system.read_link / "),
                    sprintf!(
                        "path: {} / n: {} / path\': {} / name: {}",
                        v0_1.clone(),
                        v2,
                        v0_1.clone(),
                        v4.clone()
                    ),
                );
                let v45: std::io::Error = std::io::Error::new(std::io::ErrorKind::Other, &*v38);
                Err(v45)
            } else {
                if let Spiral::US5::US5_0(v30_0_0) = &v30 {
                    if (v0_1.clone()) != string("") {
                        let v96: Result<std::path::PathBuf, std::io::Error> =
                            v1_1((v2) + 1_u8, v30_0_0.clone());
                        let v97 = Spiral::method49();
                        let v110: Result<std::path::PathBuf, string> = v96.map_err(|x| v97(x));
                        let v113 = Spiral::method51();
                        let v114 = Spiral::method52();
                        let v116: Spiral::US14 = match &v110 {
                            Err(v110_1_0) => v114(v110_1_0.clone()),
                            Ok(v110_0_0) => v113(v110_0_0.clone()),
                        };
                        match &v116 {
                            Spiral::US14::US14_0(v116_0_0) => {
                                let v157: string = Spiral::method36(
                                    toString(v116_0_0.clone().display()),
                                    v4.clone(),
                                );
                                let v164: &str = &*v157;
                                let v197: std::string::String = String::from(v164);
                                let v230: std::path::PathBuf = std::path::PathBuf::from(v197);
                                Ok(v230)
                            }
                            Spiral::US14::US14_1(v116_1_0) => {
                                let v275: string = append(
                                    string("file_system.read_link / "),
                                    sprintf!(
                                        "error\': {} / error: {} / name: {}",
                                        v116_1_0.clone(),
                                        v34.clone(),
                                        v4.clone()
                                    ),
                                );
                                let v282: std::io::Error =
                                    std::io::Error::new(std::io::ErrorKind::Other, &*v275);
                                Err(v282)
                            }
                        }
                    } else {
                        let v328: string =
                            append(string("file_system.read_link / run / The file or directory is not a reparse point. / "),
                                   sprintf!("path: {} / error: {} / path\': {} / name: {}",
                                            v0_1.clone(), v34.clone(),
                                            v0_1.clone(), v4.clone()));
                        let v335: std::io::Error =
                            std::io::Error::new(std::io::ErrorKind::Other, &*v328);
                        Err(v335)
                    }
                } else {
                    let v380: string =
                        append(string("file_system.read_link / run / The file or directory is not a reparse point. / "),
                               sprintf!("path: {} / error: {} / path\': {} / name: {}",
                                        v0_1.clone(), v34.clone(), v0_1,
                                        v4.clone()));
                    let v387: std::io::Error =
                        std::io::Error::new(std::io::ErrorKind::Other, &*v380);
                    Err(v387)
                }
            }
        }
        pub fn method48(v0_1: string, v1_1: u8) -> Result<std::path::PathBuf, std::io::Error> {
            let v8: Result<std::path::PathBuf, std::io::Error> = std::fs::read_link(&*v0_1.clone());
            let v9 = Spiral::method49();
            let v22: Result<std::path::PathBuf, string> = v8.map_err(|x| v9(x));
            let v25 = Spiral::method51();
            let v26 = Spiral::method52();
            let v28: Spiral::US14 = match &v22 {
                Err(v22_1_0) => v26(v22_1_0.clone()),
                Ok(v22_0_0) => v25(v22_0_0.clone()),
            };
            match &v28 {
                Spiral::US14::US14_0(v28_0_0) => Ok(v28_0_0.clone()),
                Spiral::US14::US14_1(v28_1_0) => Spiral::method57(
                    v0_1.clone(),
                    Func2::new({
                        let v0_1 = v0_1.clone();
                        move |b0: u8, b1: string| {
                            (Func1::new({
                                let v0_1 = v0_1.clone();
                                move |v: u8| Spiral::closure21(v0_1.clone(), v)
                            }))(b0)(b1)
                        }
                    }),
                    v1_1,
                    v28_1_0.clone(),
                ),
            }
        }
        pub fn method59(v0_1: bool) -> i32 {
            unbox::<i32>(fable_library_rust::Native_::getZero())
        }
        pub fn method60() -> i32 {
            unbox::<i32>(fable_library_rust::Native_::getZero())
        }
        pub fn method61(v0_1: i32, v1_1: i32) -> bool {
            unbox::<bool>(fable_library_rust::Native_::getZero())
        }
        pub fn method63(
            v0_1: string,
            v1_1: Func2<u8, string, Result<std::path::PathBuf, std::io::Error>>,
            v2: u8,
            v3: std::io::Error,
            v4: string,
        ) -> Result<std::path::PathBuf, std::io::Error> {
            let v5: string = Spiral::method55(v4.clone());
            let v6: Option<string> = Spiral::method41(v4.clone());
            let v31: Spiral::US5 = defaultValue(Spiral::US5::US5_1, map(Spiral::method6(), v6));
            let v35: string = Spiral::method50(v3);
            if (v2) >= 11_u8 {
                let v39: string = append(
                    string("file_system.read_link / "),
                    sprintf!(
                        "path: {} / n: {} / path\': {} / name: {}",
                        v0_1.clone(),
                        v2,
                        v4.clone(),
                        v5.clone()
                    ),
                );
                let v46: std::io::Error = std::io::Error::new(std::io::ErrorKind::Other, &*v39);
                Err(v46)
            } else {
                if let Spiral::US5::US5_0(v31_0_0) = &v31 {
                    if (v4.clone()) != string("") {
                        let v97: Result<std::path::PathBuf, std::io::Error> =
                            v1_1((v2) + 1_u8, v31_0_0.clone());
                        let v98 = Spiral::method49();
                        let v111: Result<std::path::PathBuf, string> = v97.map_err(|x| v98(x));
                        let v114 = Spiral::method51();
                        let v115 = Spiral::method52();
                        let v117: Spiral::US14 = match &v111 {
                            Err(v111_1_0) => v115(v111_1_0.clone()),
                            Ok(v111_0_0) => v114(v111_0_0.clone()),
                        };
                        match &v117 {
                            Spiral::US14::US14_0(v117_0_0) => {
                                let v158: string = Spiral::method36(
                                    toString(v117_0_0.clone().display()),
                                    v5.clone(),
                                );
                                let v165: &str = &*v158;
                                let v198: std::string::String = String::from(v165);
                                let v231: std::path::PathBuf = std::path::PathBuf::from(v198);
                                Ok(v231)
                            }
                            Spiral::US14::US14_1(v117_1_0) => {
                                let v276: string = append(
                                    string("file_system.read_link / "),
                                    sprintf!(
                                        "error\': {} / error: {} / name: {}",
                                        v117_1_0.clone(),
                                        v35.clone(),
                                        v5.clone()
                                    ),
                                );
                                let v283: std::io::Error =
                                    std::io::Error::new(std::io::ErrorKind::Other, &*v276);
                                Err(v283)
                            }
                        }
                    } else {
                        let v329: string =
                            append(string("file_system.read_link / run / The file or directory is not a reparse point. / "),
                                   sprintf!("path: {} / error: {} / path\': {} / name: {}",
                                            v0_1.clone(), v35.clone(),
                                            v4.clone(), v5.clone()));
                        let v336: std::io::Error =
                            std::io::Error::new(std::io::ErrorKind::Other, &*v329);
                        Err(v336)
                    }
                } else {
                    let v381: string =
                        append(string("file_system.read_link / run / The file or directory is not a reparse point. / "),
                               sprintf!("path: {} / error: {} / path\': {} / name: {}",
                                        v0_1, v35.clone(), v4, v5.clone()));
                    let v388: std::io::Error =
                        std::io::Error::new(std::io::ErrorKind::Other, &*v381);
                    Err(v388)
                }
            }
        }
        pub fn method62(
            v0_1: string,
            v1_1: u8,
            v2: string,
        ) -> Result<std::path::PathBuf, std::io::Error> {
            let v42: i32 = Spiral::method59(unbox::<bool>(fable_library_rust::Native_::getZero()));
            let v44: bool = Spiral::method61(Spiral::method60(), v42);
            if v44 {
                let v51: bool = unbox::<bool>(fable_library_rust::Native_::getZero());
                let v122: std::path::PathBuf = fable_library_rust::Native_::getZero();
                Ok(v122)
            } else {
                let v144: string =
                    append(string("file_system.read_link / Fsharp / The file or directory is not a reparse point. / "),
                           sprintf!("path: {} / result: {} / path\': {} / n: {}",
                                    v0_1.clone(), v44, v2.clone(), v1_1));
                Spiral::method63(
                    v0_1.clone(),
                    Func2::new({
                        let v0_1 = v0_1.clone();
                        move |b0: u8, b1: string| {
                            (Func1::new({
                                let v0_1 = v0_1.clone();
                                move |v: u8| Spiral::closure23(v0_1.clone(), v)
                            }))(b0)(b1)
                        }
                    }),
                    v1_1,
                    std::io::Error::new(std::io::ErrorKind::Other, &*v144),
                    v2,
                )
            }
        }
        pub fn closure24(
            v0_1: string,
            v1_1: u8,
            v2: string,
        ) -> Result<std::path::PathBuf, std::io::Error> {
            Spiral::method62(v0_1, v1_1, v2)
        }
        pub fn closure23(
            v0_1: string,
            v1_1: u8,
        ) -> Func1<string, Result<std::path::PathBuf, std::io::Error>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1_1 = v1_1.clone();
                move |v: string| Spiral::closure24(v0_1.clone(), v1_1, v)
            })
        }
        pub fn method64(
            v0_1: string,
            v1_1: Func2<u8, string, Result<std::path::PathBuf, std::io::Error>>,
            v2: u8,
            v3: std::io::Error,
        ) -> Result<std::path::PathBuf, std::io::Error> {
            let v4: string = Spiral::method55(v0_1.clone());
            let v5: Option<string> = Spiral::method41(v0_1.clone());
            let v30: Spiral::US5 = defaultValue(Spiral::US5::US5_1, map(Spiral::method6(), v5));
            let v34: string = Spiral::method50(v3);
            if (v2) >= 11_u8 {
                let v38: string = append(
                    string("file_system.read_link / "),
                    sprintf!(
                        "path: {} / n: {} / path\': {} / name: {}",
                        v0_1.clone(),
                        v2,
                        v0_1.clone(),
                        v4.clone()
                    ),
                );
                let v45: std::io::Error = std::io::Error::new(std::io::ErrorKind::Other, &*v38);
                Err(v45)
            } else {
                if let Spiral::US5::US5_0(v30_0_0) = &v30 {
                    if (v0_1.clone()) != string("") {
                        let v96: Result<std::path::PathBuf, std::io::Error> =
                            v1_1((v2) + 1_u8, v30_0_0.clone());
                        let v97 = Spiral::method49();
                        let v110: Result<std::path::PathBuf, string> = v96.map_err(|x| v97(x));
                        let v113 = Spiral::method51();
                        let v114 = Spiral::method52();
                        let v116: Spiral::US14 = match &v110 {
                            Err(v110_1_0) => v114(v110_1_0.clone()),
                            Ok(v110_0_0) => v113(v110_0_0.clone()),
                        };
                        match &v116 {
                            Spiral::US14::US14_0(v116_0_0) => {
                                let v157: string = Spiral::method36(
                                    toString(v116_0_0.clone().display()),
                                    v4.clone(),
                                );
                                let v164: &str = &*v157;
                                let v197: std::string::String = String::from(v164);
                                let v230: std::path::PathBuf = std::path::PathBuf::from(v197);
                                Ok(v230)
                            }
                            Spiral::US14::US14_1(v116_1_0) => {
                                let v275: string = append(
                                    string("file_system.read_link / "),
                                    sprintf!(
                                        "error\': {} / error: {} / name: {}",
                                        v116_1_0.clone(),
                                        v34.clone(),
                                        v4.clone()
                                    ),
                                );
                                let v282: std::io::Error =
                                    std::io::Error::new(std::io::ErrorKind::Other, &*v275);
                                Err(v282)
                            }
                        }
                    } else {
                        let v328: string =
                            append(string("file_system.read_link / run / The file or directory is not a reparse point. / "),
                                   sprintf!("path: {} / error: {} / path\': {} / name: {}",
                                            v0_1.clone(), v34.clone(),
                                            v0_1.clone(), v4.clone()));
                        let v335: std::io::Error =
                            std::io::Error::new(std::io::ErrorKind::Other, &*v328);
                        Err(v335)
                    }
                } else {
                    let v380: string =
                        append(string("file_system.read_link / run / The file or directory is not a reparse point. / "),
                               sprintf!("path: {} / error: {} / path\': {} / name: {}",
                                        v0_1.clone(), v34.clone(), v0_1,
                                        v4.clone()));
                    let v387: std::io::Error =
                        std::io::Error::new(std::io::ErrorKind::Other, &*v380);
                    Err(v387)
                }
            }
        }
        pub fn method58(v0_1: string, v1_1: u8) -> Result<std::path::PathBuf, std::io::Error> {
            let v41: i32 = Spiral::method59(unbox::<bool>(fable_library_rust::Native_::getZero()));
            let v43: bool = Spiral::method61(Spiral::method60(), v41);
            if v43 {
                let v50: bool = unbox::<bool>(fable_library_rust::Native_::getZero());
                let v121: std::path::PathBuf = fable_library_rust::Native_::getZero();
                Ok(v121)
            } else {
                let v143: string =
                    append(string("file_system.read_link / Fsharp / The file or directory is not a reparse point. / "),
                           sprintf!("path: {} / result: {} / path\': {} / n: {}",
                                    v0_1.clone(), v43, v0_1.clone(), v1_1));
                Spiral::method64(
                    v0_1.clone(),
                    Func2::new({
                        let v0_1 = v0_1.clone();
                        move |b0: u8, b1: string| {
                            (Func1::new({
                                let v0_1 = v0_1.clone();
                                move |v: u8| Spiral::closure23(v0_1.clone(), v)
                            }))(b0)(b1)
                        }
                    }),
                    v1_1,
                    std::io::Error::new(std::io::ErrorKind::Other, &*v143),
                )
            }
        }
        pub fn method47(v0_1: string) -> Result<std::path::PathBuf, std::io::Error> {
            if Spiral::method39(v0_1.clone()) {
                std::fs::read_link(&*v0_1.clone())
            } else {
                Spiral::method48(v0_1, 0_u8)
            }
        }
        pub fn closure25(unitVar: (), v0_1: std::path::PathBuf) -> Spiral::US15 {
            Spiral::US15::US15_0(v0_1)
        }
        pub fn method65() -> Func1<std::path::PathBuf, Spiral::US15> {
            Func1::new(move |v: std::path::PathBuf| Spiral::closure25((), v))
        }
        pub fn method67(v0_1: string) -> string {
            v0_1
        }
        pub fn method68() -> string {
            string("")
        }
        pub fn method66(v0_1: string, v1_1: string, v2: string) -> string {
            let v6: Result<regex::Regex, regex::Error> = regex::Regex::new(&v0_1);
            let v10: regex::Regex = v6.unwrap();
            let v22: string = Spiral::method67(v2);
            let v24: std::borrow::Cow<str> = v10.replace_all(&*v22, &*v1_1);
            let v26: std::string::String = String::from(v24);
            fable_library_rust::String_::fromString(v26)
        }
        pub fn method46(v0_1: string) -> string {
            if (v0_1.clone()) == string("") {
                string("")
            } else {
                let v3: Result<std::path::PathBuf, std::io::Error> = Spiral::method47(v0_1.clone());
                let v7: Option<std::path::PathBuf> = v3.ok();
                let v43: Spiral::US15 =
                    defaultValue(Spiral::US15::US15_1, map(Spiral::method65(), v7));
                let v86: string = match &v43 {
                    Spiral::US15::US15_0(v43_0_0) => toString(
                        match &v43 {
                            Spiral::US15::US15_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone()
                        .display(),
                    ),
                    _ => v0_1.clone(),
                };
                let v91: string = Spiral::method66(
                    string("^\\\\\\\\\\?\\\\"),
                    string(""),
                    if (v86.clone()) == string("") {
                        v0_1.clone()
                    } else {
                        v86
                    },
                );
                if (length(v91.clone())) < 2_i32 {
                    v0_1.clone()
                } else {
                    replace(
                        concat(new_array(&[
                            toLower(ofChar(getCharAt(v91.clone(), 0_i32))),
                            getSlice(v91, Some(1_i32), None::<i32>),
                        ])),
                        string("\\"),
                        string("/"),
                    )
                }
            }
        }
        pub fn method35(v0_1: string) -> Spiral::US5 {
            let v5: Spiral::US13 = Spiral::method37(
                Spiral::US12::US12_1,
                Spiral::method36(string("spiral"), string("workspace")),
                v0_1.clone(),
            );
            match &v5 {
                Spiral::US13::US13_0(v5_0_0) => {
                    Spiral::US5::US5_0(Spiral::method46(v5_0_0.clone()))
                }
                Spiral::US13::US13_1(v5_1_0) => {
                    let v12: () = {
                        Spiral::closure17(v0_1.clone(), v5_1_0.clone(), ());
                        ()
                    };
                    Spiral::US5::US5_1
                }
            }
        }
        pub fn method71(v0_1: i32, v1_1: LrcPtr<Spiral::Mut6>) -> bool {
            (v1_1.l0.get().clone()) < (v0_1)
        }
        pub fn method72() -> char {
            std::path::MAIN_SEPARATOR
        }
        pub fn method70(v0_1: string) -> string {
            let v12: &str = &*v0_1.clone();
            let v45: std::string::String = String::from(v12);
            let v78: std::path::PathBuf = std::path::PathBuf::from(v45);
            if (v78.exists()) == false {
                let v108: string = Spiral::method34();
                let v119: Array<string> = split(
                    Spiral::method46(Spiral::method36(v108.clone(), v0_1.clone())),
                    string("/"),
                    -1_i32,
                    0_i32,
                );
                let v123: i32 = get_Count(v119.clone());
                let v124: LrcPtr<Spiral::Mut6> = LrcPtr::new(Spiral::Mut6 {
                    l0: MutCell::new(0_i32),
                    l1: MutCell::new(0_i32),
                    l2: MutCell::new(new_empty::<string>()),
                });
                while Spiral::method71(v123, v124.clone()) {
                    let v126: i32 = v124.l0.get().clone();
                    let v129: i32 = ((v126.wrapping_neg()) + (v123)) - 1_i32;
                    let matchValue: i32 = v124.l1.get().clone();
                    let v131: Array<string> = v124.l2.get().clone();
                    let v130: i32 = matchValue;
                    let v132: string = v119[v129].clone();
                    let patternInput_1: (i32, Array<string>) = if string("..") == (v132.clone()) {
                        ((v130) + 1_i32, v131.clone())
                    } else {
                        if string(".") == (v132.clone()) {
                            (v130, v131.clone())
                        } else {
                            if 0_i32 == (v130) {
                                if endsWith3(v132.clone(), string(":"), false) {
                                    let v144: Array<string> = new_array(&[sprintf!(
                                        "{}:",
                                        getCharAt(v108.clone(), 0_i32)
                                    )]);
                                    let v145: i32 = get_Count(v144.clone());
                                    let v147: i32 = (v145) + (get_Count(v131.clone()));
                                    let v148: Array<string> = new_init(&string(""), v147);
                                    let v149: LrcPtr<Spiral::Mut5> = LrcPtr::new(Spiral::Mut5 {
                                        l0: MutCell::new(0_i32),
                                    });
                                    while Spiral::method32(v147, v149.clone()) {
                                        let v151: i32 = v149.l0.get().clone();
                                        let v156: string = if (v151) < (v145) {
                                            v144[v151].clone()
                                        } else {
                                            let v154: i32 = (v151) - (v145);
                                            v131[v154].clone()
                                        };
                                        v148.get_mut()[v151 as usize] = v156;
                                        {
                                            let v157: i32 = (v151) + 1_i32;
                                            v149.l0.set(v157);
                                            ()
                                        }
                                    }
                                    (0_i32, v148.clone())
                                } else {
                                    let v158: Array<string> = new_array(&[v132]);
                                    let v159: i32 = get_Count(v158.clone());
                                    let v161: i32 = (v159) + (get_Count(v131.clone()));
                                    let v162: Array<string> = new_init(&string(""), v161);
                                    let v163: LrcPtr<Spiral::Mut5> = LrcPtr::new(Spiral::Mut5 {
                                        l0: MutCell::new(0_i32),
                                    });
                                    while Spiral::method32(v161, v163.clone()) {
                                        let v165: i32 = v163.l0.get().clone();
                                        let v170: string = if (v165) < (v159) {
                                            v158[v165].clone()
                                        } else {
                                            let v168: i32 = (v165) - (v159);
                                            v131[v168].clone()
                                        };
                                        v162.get_mut()[v165 as usize] = v170;
                                        {
                                            let v171: i32 = (v165) + 1_i32;
                                            v163.l0.set(v171);
                                            ()
                                        }
                                    }
                                    (0_i32, v162.clone())
                                }
                            } else {
                                ((v130) - 1_i32, v131.clone())
                            }
                        }
                    };
                    let v181: i32 = (v126) + 1_i32;
                    v124.l0.set(v181);
                    v124.l1.set(patternInput_1.0.clone());
                    v124.l2.set(patternInput_1.1.clone());
                    ()
                }
                {
                    let matchValue_2: i32 = v124.l1.get().clone();
                    let v183: Array<string> = v124.l2.get().clone();
                    let _let__v188: LrcPtr<dyn IEnumerable_1<string>> = delay(Func0::new({
                        let v183 = v183.clone();
                        move || {
                            map_1(
                                Func1::new({
                                    let v183 = v183.clone();
                                    move |i: i32| v183[i].clone()
                                }),
                                rangeNumeric(0_i32, 1_i32, (get_Count(v183.clone())) - 1_i32),
                            )
                        }
                    }));
                    let v200: string = ofChar(Spiral::method72());
                    join(
                        if (v200.clone()) == string("\n") {
                            Spiral::method31(v200.clone())
                        } else {
                            v200
                        },
                        toArray_1(_let__v188),
                    )
                }
            } else {
                let v213: Result<std::path::PathBuf, std::io::Error> =
                    std::fs::canonicalize(&*v0_1);
                let v217: std::path::PathBuf = v213.unwrap();
                let v235: std::path::Display = v217.display();
                let v268: std::string::String = format!("{}", v235);
                fable_library_rust::String_::fromString(v268)
            }
        }
        pub fn method69(v0_1: string) -> string {
            Spiral::method46(Spiral::method70(v0_1))
        }
        pub fn method73(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn method74(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn method75() -> string {
            string("\n")
        }
        pub fn method77(v0_1: string, v1_1: string) -> bool {
            if (Spiral::method38(v0_1.clone())) == false {
                false
            } else {
                let v20: Result<Vec<u8>, std::io::Error> = std::fs::read(&*v0_1);
                let v65: Vec<u8> = Spiral::method27(v20.unwrap());
                let v67: Result<std::string::String, std::string::FromUtf8Error> =
                    std::string::String::from_utf8(v65);
                let v71: std::string::String = v67.unwrap();
                (v1_1) == (fable_library_rust::String_::fromString(v71))
            }
        }
        pub fn closure26(unitVar: (), v0_1: std::io::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method79() -> Func1<std::io::Error, std::string::String> {
            Func1::new(move |v: std::io::Error| Spiral::closure26((), v))
        }
        pub fn closure27(unitVar: (), unitVar_1: ()) -> Spiral::US16 {
            Spiral::US16::US16_0
        }
        pub fn method80() -> Func0<Spiral::US16> {
            Func0::new(move || Spiral::closure27((), ()))
        }
        pub fn closure28(unitVar: (), v0_1: std::string::String) -> Spiral::US16 {
            Spiral::US16::US16_1(v0_1)
        }
        pub fn method81() -> Func1<std::string::String, Spiral::US16> {
            Func1::new(move |v: std::string::String| Spiral::closure28((), v))
        }
        pub fn method82() -> string {
            let v8: string = Spiral::method13(getCharAt(toLower(string("Critical")), 0_i32));
            let v15: &str = inline_colorization::color_bright_red;
            let v22: &str = &*v8;
            let v50: &str = inline_colorization::color_reset;
            let v52: std::string::String = format!("{}{}{}", v15, v22, v50);
            fable_library_rust::String_::fromString(v52)
        }
        pub fn method84(v0_1: string, v1_1: std::string::String) -> string {
            let v3: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v12: () = {
                Spiral::closure7(v3.clone(), string("{ "), ());
                ()
            };
            let v23: () = {
                Spiral::closure7(v3.clone(), string("dir"), ());
                ()
            };
            let v34: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v43: () = {
                Spiral::closure7(v3.clone(), v0_1, ());
                ()
            };
            let v54: () = {
                Spiral::closure7(v3.clone(), string("; "), ());
                ()
            };
            let v65: () = {
                Spiral::closure7(v3.clone(), string("error"), ());
                ()
            };
            let v74: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v83: std::string::String = format!("{:#?}", v1_1);
            let v122: () = {
                Spiral::closure7(v3.clone(), fable_library_rust::String_::fromString(v83), ());
                ()
            };
            let v133: () = {
                Spiral::closure7(v3.clone(), string(" }"), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method83(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
            v9: std::string::String,
        ) -> string {
            let v10: string = Spiral::method84(v8, v9);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("file_system.create_dir"),
                v10
            ))
        }
        pub fn closure29(v0_1: string, v1_1: std::string::String, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v6: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v32: Option<i64> = patternInput.5.clone();
                let v31: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v30: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v29: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v28: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v27: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method83(
                    v27.clone(),
                    v28.clone(),
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    Spiral::method8(v27, v28, v29, v30, v31, v32),
                    Spiral::method82(),
                    v0_1,
                    v1_1,
                ))
            };
        }
        pub fn method85() -> string {
            let v8: string = Spiral::method13(getCharAt(toLower(string("Verbose")), 0_i32));
            let v15: &str = inline_colorization::color_bright_black;
            let v22: &str = &*v8;
            let v50: &str = inline_colorization::color_reset;
            let v52: std::string::String = format!("{}{}{}", v15, v22, v50);
            fable_library_rust::String_::fromString(v52)
        }
        pub fn method87(v0_1: string) -> string {
            let v2: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v11: () = {
                Spiral::closure7(v2.clone(), string("{ "), ());
                ()
            };
            let v22: () = {
                Spiral::closure7(v2.clone(), string("dir"), ());
                ()
            };
            let v33: () = {
                Spiral::closure7(v2.clone(), string(" = "), ());
                ()
            };
            let v42: () = {
                Spiral::closure7(v2.clone(), v0_1, ());
                ()
            };
            let v53: () = {
                Spiral::closure7(v2.clone(), string(" }"), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method86(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
        ) -> string {
            let v9: string = Spiral::method87(v8);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("file_system.create_dir"),
                v9
            ))
        }
        pub fn closure30(v0_1: string, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_0) {
                let v5: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v31: Option<i64> = patternInput.5.clone();
                let v30: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v29: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v28: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v27: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v26: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method86(
                    v26.clone(),
                    v27.clone(),
                    v28.clone(),
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    Spiral::method8(v26, v27, v28, v29, v30, v31),
                    Spiral::method85(),
                    v0_1,
                ))
            };
        }
        pub fn method89(v0_1: bool, v1_1: string) {
            if Spiral::method39(v1_1.clone()) {
                if v0_1 {
                    std::fs::remove_dir_all(&*v1_1.clone()).unwrap();
                    ()
                } else {
                    std::fs::remove_dir(&*v1_1).unwrap();
                    ()
                };
            }
            ()
        }
        pub fn closure31(v0_1: string, unitVar: ()) {
            Spiral::method89(true, v0_1);
        }
        pub fn method88(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral::closure31(v0_1.clone(), ())
            })
        }
        pub fn method90(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral::closure31(v0_1.clone(), ())
            })
        }
        pub fn method91(v0_1: string) -> bool {
            unbox::<bool>(fable_library_rust::Native_::getZero())
        }
        pub fn method93(v0_1: string, v1_1: string) -> string {
            let v3: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v12: () = {
                Spiral::closure7(v3.clone(), string("{ "), ());
                ()
            };
            let v23: () = {
                Spiral::closure7(v3.clone(), string("dir"), ());
                ()
            };
            let v34: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v43: () = {
                Spiral::closure7(v3.clone(), v0_1, ());
                ()
            };
            let v54: () = {
                Spiral::closure7(v3.clone(), string("; "), ());
                ()
            };
            let v65: () = {
                Spiral::closure7(v3.clone(), string("result"), ());
                ()
            };
            let v74: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v83: () = {
                Spiral::closure7(v3.clone(), v1_1, ());
                ()
            };
            let v94: () = {
                Spiral::closure7(v3.clone(), string(" }"), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method92(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
            v9: string,
        ) -> string {
            let v10: string = Spiral::method93(v8, v9);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("file_system.create_dir"),
                v10
            ))
        }
        pub fn closure32(v0_1: string, v1_1: string, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_1) {
                let v6: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v32: Option<i64> = patternInput.5.clone();
                let v31: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v30: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v29: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v28: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v27: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method92(
                    v27.clone(),
                    v28.clone(),
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    Spiral::method8(v27, v28, v29, v30, v31, v32),
                    Spiral::method12(),
                    v0_1,
                    v1_1,
                ))
            };
        }
        pub fn method99(v0_1: string, v1_1: string) -> string {
            let v3: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v12: () = {
                Spiral::closure7(v3.clone(), string("{ "), ());
                ()
            };
            let v23: () = {
                Spiral::closure7(v3.clone(), string("ex"), ());
                ()
            };
            let v34: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v43: () = {
                Spiral::closure7(v3.clone(), v0_1, ());
                ()
            };
            let v54: () = {
                Spiral::closure7(v3.clone(), string("; "), ());
                ()
            };
            let v65: () = {
                Spiral::closure7(v3.clone(), string("path"), ());
                ()
            };
            let v74: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v83: () = {
                Spiral::closure7(v3.clone(), v1_1, ());
                ()
            };
            let v94: () = {
                Spiral::closure7(v3.clone(), string(" }"), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method98(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
            v9: string,
        ) -> string {
            let v10: string = Spiral::method99(v8, v9);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("file_system.delete_directory_async"),
                v10
            ))
        }
        pub fn closure34(v0_1: string, v1_1: LrcPtr<Exception>, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_1) {
                let v6: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v32: Option<i64> = patternInput.5.clone();
                let v31: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v30: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v29: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v28: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v27: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method98(
                    v27.clone(),
                    v28.clone(),
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    Spiral::method8(v27, v28, v29, v30, v31, v32),
                    Spiral::method12(),
                    sprintf!("{:?}", v1_1),
                    Spiral::method55(v0_1),
                ))
            };
        }
        pub fn method97(v0_1: string, v1_1: i64) -> Arc<Async<i64>> {
            fable_library_rust::Native_::getZero()
        }
        pub fn method96(v0_1: string, v1_1: i64) -> Arc<Async<i64>> {
            fable_library_rust::Native_::getZero()
        }
        pub fn method95(v0_1: string) -> Arc<Async<i64>> {
            Spiral::method96(v0_1, 0_i64)
        }
        pub fn closure33(v0_1: string, unitVar: ()) {
            let v1_1: Arc<Async<i64>> = Spiral::method95(v0_1);
            let v8: Arc<Async<()>> = fable_library_rust::Native_::getZero();
            fable_library_rust::Native_::getZero::<()>();
            ()
        }
        pub fn method94(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral::closure33(v0_1.clone(), ())
            })
        }
        pub fn method100(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral::closure33(v0_1.clone(), ())
            })
        }
        pub fn method78(v0_1: string) -> LrcPtr<dyn IDisposable> {
            let v156: Result<(), std::io::Error> = std::fs::create_dir_all(&*v0_1.clone());
            let v157 = Spiral::method79();
            let v170: Result<(), std::string::String> = v156.map_err(|x| v157(x));
            let v173 = Spiral::method80();
            let v174 = Spiral::method81();
            let v176: Spiral::US16 = match &v170 {
                Err(v170_1_0) => v174(v170_1_0.clone()),
                _ => v173(),
            };
            match &v176 {
                Spiral::US16::US16_0 => {
                    let v181: () = {
                        Spiral::closure30(v0_1.clone(), ());
                        ()
                    };
                    ()
                }
                Spiral::US16::US16_1(v176_1_0) => {
                    let v231: () = {
                        Spiral::closure29(
                            v0_1.clone(),
                            match &v176 {
                                Spiral::US16::US16_1(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            (),
                        );
                        ()
                    };
                    ()
                }
            }
            {
                let v283 = Spiral::method88(v0_1.clone());
                interface_cast!(
                    Spiral::Disposable::_ctor__3A5B6456(Func0::new({
                        let v283 = v283.clone();
                        move || v283.clone()()
                    })),
                    Lrc<dyn IDisposable>,
                )
            }
        }
        pub fn method76(v0_1: string, v1_1: string) {
            if (Spiral::method77(v0_1.clone(), v1_1.clone())) == false {
                let v8: string = defaultValue(string(""), Spiral::method41(v0_1.clone()));
                if (Spiral::method39(v8.clone())) == false {
                    let v13: LrcPtr<dyn IDisposable> = Spiral::method78(v8);
                    ()
                }
                std::fs::write(&*v0_1, &*v1_1).unwrap();
                ()
            };
        }
        pub fn method102(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
        ) -> string {
            v0_1
        }
        pub fn method104() -> string {
            string("")
        }
        pub fn method105(v0_1: i64, v1_1: string, v2: i64) -> LrcPtr<Spiral::UH0> {
            if (v2) < (v0_1) {
                LrcPtr::new(Spiral::UH0::UH0_1(
                    getCharAt(v1_1.clone(), v2 as i32),
                    Spiral::method105(v0_1, v1_1, (v2) + 1_i64),
                ))
            } else {
                LrcPtr::new(Spiral::UH0::UH0_0)
            }
        }
        pub fn method106(
            v0_1: LrcPtr<Spiral::UH0>,
            v1_1: LrcPtr<StringBuilder>,
            v2: i32,
            v3: i32,
        ) -> (LrcPtr<StringBuilder>, i32, i32) {
            let v0_1: MutCell<LrcPtr<Spiral::UH0>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<i32> = MutCell::new(v2);
            let v3: MutCell<i32> = MutCell::new(v3);
            '_method106: loop {
                break '_method106 (match v0_1.get().clone().as_ref() {
                    Spiral::UH0::UH0_0 => (v1_1.get().clone(), v2.get().clone(), v3.get().clone()),
                    Spiral::UH0::UH0_1(v0_1_1_0, v0_1_1_1) => {
                        let v4: char = match v0_1.get().clone().as_ref() {
                            Spiral::UH0::UH0_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        };
                        let v6: bool = '\n' == (v4);
                        let patternInput: (i32, i32) = if v6 {
                            ((v2.get().clone()) + 1_i32, 1_i32)
                        } else {
                            (v2.get().clone(), (v3.get().clone()) + 1_i32)
                        };
                        {
                            let v0_1_temp: LrcPtr<Spiral::UH0> =
                                match v0_1.get().clone().as_ref() {
                                    Spiral::UH0::UH0_1(_, x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone();
                            let v1_1_temp: LrcPtr<StringBuilder> = if v6 {
                                let v13: LrcPtr<StringBuilder> = v1_1.get().clone().Clear();
                                v1_1.get().clone()
                            } else {
                                let v24: LrcPtr<StringBuilder> = {
                                    let value: string = ofChar(v4);
                                    v1_1.get().clone().Append_Z721C83C5(value)
                                };
                                v1_1.get().clone()
                            };
                            let v2_temp: i32 = patternInput.0.clone();
                            let v3_temp: i32 = patternInput.1.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            continue '_method106;
                        }
                    }
                });
            }
        }
        pub fn closure36(v0_1: i32, v1_1: i32, v2: string) -> string {
            if (v1_1) >= (v0_1) {
                v2.clone()
            } else {
                (Spiral::method107(v0_1, (v1_1) + 1_i32))(append((v2), string(" ")))
            }
        }
        pub fn method107(v0_1: i32, v1_1: i32) -> Func1<string, string> {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1_1 = v1_1.clone();
                move |v: string| Spiral::closure36(v0_1, v1_1, v)
            })
        }
        pub fn closure35(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral::US18 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            if string("") == (v0_1.clone()) {
                Spiral::US18::US18_1(sprintf!(
                    "parsing.p_char / unexpected end of input / c: \'{}\' / s: {:?}",
                    '\"',
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v10: char = getCharAt(v0_1.clone(), 0_i32);
                if (v10) == '\"' {
                    let v45: string = getSlice(
                        v0_1.clone(),
                        Some(1_i32),
                        Some((length(v0_1.clone())) - 1_i32),
                    );
                    let v51: string = ofChar(v10);
                    let patternInput: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method106(
                        Spiral::method105(length(v51.clone()) as i64, v51, 0_i64),
                        v1_1.clone(),
                        v2,
                        v3,
                    );
                    Spiral::US18::US18_0(
                        v10,
                        v45,
                        patternInput.0.clone(),
                        patternInput.1.clone(),
                        patternInput.2.clone(),
                    )
                } else {
                    let v66: i32 = (indexOf(v0_1.clone(), string("\n"))) - 1_i32;
                    Spiral::US18::US18_1(concat(new_array(&[
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '\"',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1.clone(),
                                Some(0_i32),
                                Some(
                                    (if -2_i32 == (v66) {
                                        (length(v0_1)) + 1_i32
                                    } else {
                                        (v66) + 1_i32
                                    }) - 1_i32
                                )
                            )
                        ),
                        string("\n"),
                        append(
                            ((Spiral::method107((v3) - 1_i32, 0_i32))(string(""))),
                            string("^"),
                        ),
                        string("\n"),
                    ])))
                }
            }
        }
        pub fn closure37(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral::US18 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            if string("") == (v0_1.clone()) {
                Spiral::US18::US18_1(sprintf!(
                    "parsing.p_char / unexpected end of input / c: \'{}\' / s: {:?}",
                    '\'',
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v10: char = getCharAt(v0_1.clone(), 0_i32);
                if (v10) == '\'' {
                    let v45: string = getSlice(
                        v0_1.clone(),
                        Some(1_i32),
                        Some((length(v0_1.clone())) - 1_i32),
                    );
                    let v51: string = ofChar(v10);
                    let patternInput: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method106(
                        Spiral::method105(length(v51.clone()) as i64, v51, 0_i64),
                        v1_1.clone(),
                        v2,
                        v3,
                    );
                    Spiral::US18::US18_0(
                        v10,
                        v45,
                        patternInput.0.clone(),
                        patternInput.1.clone(),
                        patternInput.2.clone(),
                    )
                } else {
                    let v66: i32 = (indexOf(v0_1.clone(), string("\n"))) - 1_i32;
                    Spiral::US18::US18_1(concat(new_array(&[
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '\'',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1.clone(),
                                Some(0_i32),
                                Some(
                                    (if -2_i32 == (v66) {
                                        (length(v0_1)) + 1_i32
                                    } else {
                                        (v66) + 1_i32
                                    }) - 1_i32
                                )
                            )
                        ),
                        string("\n"),
                        append(
                            ((Spiral::method107((v3) - 1_i32, 0_i32))(string(""))),
                            string("^"),
                        ),
                        string("\n"),
                    ])))
                }
            }
        }
        pub fn method108(
            v0_1: string,
            v1_1: LrcPtr<StringBuilder>,
            v2: LrcPtr<Spiral::UH1>,
        ) -> Spiral::US18 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<Spiral::UH1>> = MutCell::new(v2.clone());
            '_method108: loop {
                break '_method108 (match v2.get().clone().as_ref() {
                    Spiral::UH1::UH1_0 => {
                        Spiral::US18::US18_1(string("parsing.choice / no parsers succeeded"))
                    }
                    Spiral::UH1::UH1_1(v2_1_0, v2_1_1) => {
                        let v7: Spiral::US18 = (match v2.get().clone().as_ref() {
                            Spiral::UH1::UH1_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        })((
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            1_i32,
                            1_i32,
                        ));
                        match &v7 {
                            Spiral::US18::US18_0(v7_0_0, v7_0_1, v7_0_2, v7_0_3, v7_0_4) => {
                                v7.clone()
                            }
                            _ => {
                                let v0_1_temp: string = v0_1.get().clone();
                                let v1_1_temp: LrcPtr<StringBuilder> = v1_1.get().clone();
                                let v2_temp: LrcPtr<Spiral::UH1> =
                                    match v2.get().clone().as_ref() {
                                        Spiral::UH1::UH1_1(_, x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone();
                                v0_1.set(v0_1_temp);
                                v1_1.set(v1_1_temp);
                                v2.set(v2_temp);
                                continue '_method108;
                            }
                        }
                    }
                });
            }
        }
        pub fn method109(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method109: loop {
                break '_method109 (if (v1_1.get().clone()) >= 2_i64 {
                    false
                } else {
                    let v11: Spiral::US20 = if (v1_1.get().clone()) == 0_i64 {
                        Spiral::US20::US20_0('\"')
                    } else {
                        let v5: i64 = (v1_1.get().clone()) - 1_i64;
                        if (v5) == 0_i64 {
                            Spiral::US20::US20_0('\'')
                        } else {
                            let v8: i64 = (v5) - 1_i64;
                            Spiral::US20::US20_1
                        }
                    };
                    if (v0_1.get().clone())
                        == (match &v11 {
                            Spiral::US20::US20_0(v11_0_0) => match &v11 {
                                Spiral::US20::US20_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        })
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = (v1_1.get().clone()) + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method109;
                    }
                });
            }
        }
        pub fn method110(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> (string, string, LrcPtr<StringBuilder>, i32, i32) {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method110: loop {
                break '_method110 ({
                    let v98: Spiral::US18 = if string("") == (v1_1.get().clone()) {
                        Spiral::US18::US18_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\"', '\'']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v25: char = getCharAt(v1_1.get().clone(), 0_i32);
                        if (Spiral::method109(v25, 0_i64)) == false {
                            let v62: string = getSlice(
                                v1_1.get().clone(),
                                Some(1_i32),
                                Some((length(v1_1.get().clone())) - 1_i32),
                            );
                            let v68: string = ofChar(v25);
                            let patternInput: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method106(
                                Spiral::method105(length(v68.clone()) as i64, v68, 0_i64),
                                v2.get().clone(),
                                v3.get().clone(),
                                v4.get().clone(),
                            );
                            Spiral::US18::US18_0(
                                v25,
                                v62,
                                patternInput.0.clone(),
                                patternInput.1.clone(),
                                patternInput.2.clone(),
                            )
                        } else {
                            Spiral::US18::US18_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v25,
                                toArray(ofArray(new_array(&['\"', '\'']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v110: Spiral::US18 = match &v98 {
                        Spiral::US18::US18_0(v98_0_0, v98_0_1, v98_0_2, v98_0_3, v98_0_4) => {
                            let v99: char = v98_0_0.clone();
                            Spiral::US18::US18_0(
                                if '\\' == (v99) { '/' } else { v99 },
                                v98_0_1.clone(),
                                v98_0_2.clone(),
                                v98_0_3.clone(),
                                v98_0_4.clone(),
                            )
                        }
                        Spiral::US18::US18_1(v98_1_0) => Spiral::US18::US18_1(v98_1_0.clone()),
                    };
                    match &v110 {
                        Spiral::US18::US18_0(v110_0_0, v110_0_1, v110_0_2, v110_0_3, v110_0_4) => {
                            let v0_1_temp: string =
                                append((v0_1.get().clone()), (ofChar(v110_0_0.clone())));
                            let v1_1_temp: string = v110_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v110_0_2.clone();
                            let v3_temp: i32 = v110_0_3.clone();
                            let v4_temp: i32 = v110_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method110;
                        }
                        _ => (
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method111(
            v0_1: string,
            v1_1: LrcPtr<StringBuilder>,
            v2: i32,
            v3: i32,
            v4: LrcPtr<Spiral::UH1>,
        ) -> Spiral::US18 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<i32> = MutCell::new(v2);
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<LrcPtr<Spiral::UH1>> = MutCell::new(v4.clone());
            '_method111: loop {
                break '_method111 (match v4.get().clone().as_ref() {
                    Spiral::UH1::UH1_0 => {
                        Spiral::US18::US18_1(string("parsing.choice / no parsers succeeded"))
                    }
                    Spiral::UH1::UH1_1(v4_1_0, v4_1_1) => {
                        let v9: Spiral::US18 = (match v4.get().clone().as_ref() {
                            Spiral::UH1::UH1_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        })((
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                        ));
                        match &v9 {
                            Spiral::US18::US18_0(v9_0_0, v9_0_1, v9_0_2, v9_0_3, v9_0_4) => {
                                v9.clone()
                            }
                            _ => {
                                let v0_1_temp: string = v0_1.get().clone();
                                let v1_1_temp: LrcPtr<StringBuilder> = v1_1.get().clone();
                                let v2_temp: i32 = v2.get().clone();
                                let v3_temp: i32 = v3.get().clone();
                                let v4_temp: LrcPtr<Spiral::UH1> =
                                    match v4.get().clone().as_ref() {
                                        Spiral::UH1::UH1_1(_, x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone();
                                v0_1.set(v0_1_temp);
                                v1_1.set(v1_1_temp);
                                v2.set(v2_temp);
                                v3.set(v3_temp);
                                v4.set(v4_temp);
                                continue '_method111;
                            }
                        }
                    }
                });
            }
        }
        pub fn method112(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method112: loop {
                break '_method112 (if (v1_1.get().clone()) >= 3_i64 {
                    false
                } else {
                    let v15: Spiral::US20 = if (v1_1.get().clone()) == 0_i64 {
                        Spiral::US20::US20_0('\"')
                    } else {
                        let v5: i64 = (v1_1.get().clone()) - 1_i64;
                        if (v5) == 0_i64 {
                            Spiral::US20::US20_0('\'')
                        } else {
                            let v8: i64 = (v5) - 1_i64;
                            if (v8) == 0_i64 {
                                Spiral::US20::US20_0(' ')
                            } else {
                                let v11: i64 = (v8) - 1_i64;
                                Spiral::US20::US20_1
                            }
                        }
                    };
                    if (v0_1.get().clone())
                        == (match &v15 {
                            Spiral::US20::US20_0(v15_0_0) => match &v15 {
                                Spiral::US20::US20_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        })
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = (v1_1.get().clone()) + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method112;
                    }
                });
            }
        }
        pub fn method113(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> (string, string, LrcPtr<StringBuilder>, i32, i32) {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method113: loop {
                break '_method113 ({
                    let v106: Spiral::US18 = if string("") == (v1_1.get().clone()) {
                        Spiral::US18::US18_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\"', '\'', ' ']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v29: char = getCharAt(v1_1.get().clone(), 0_i32);
                        if (Spiral::method112(v29, 0_i64)) == false {
                            let v66: string = getSlice(
                                v1_1.get().clone(),
                                Some(1_i32),
                                Some((length(v1_1.get().clone())) - 1_i32),
                            );
                            let v72: string = ofChar(v29);
                            let patternInput: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method106(
                                Spiral::method105(length(v72.clone()) as i64, v72, 0_i64),
                                v2.get().clone(),
                                v3.get().clone(),
                                v4.get().clone(),
                            );
                            Spiral::US18::US18_0(
                                v29,
                                v66,
                                patternInput.0.clone(),
                                patternInput.1.clone(),
                                patternInput.2.clone(),
                            )
                        } else {
                            Spiral::US18::US18_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v29,
                                toArray(ofArray(new_array(&['\"', '\'', ' ']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v118: Spiral::US18 = match &v106 {
                        Spiral::US18::US18_0(v106_0_0, v106_0_1, v106_0_2, v106_0_3, v106_0_4) => {
                            let v107: char = v106_0_0.clone();
                            Spiral::US18::US18_0(
                                if '\\' == (v107) { '/' } else { v107 },
                                v106_0_1.clone(),
                                v106_0_2.clone(),
                                v106_0_3.clone(),
                                v106_0_4.clone(),
                            )
                        }
                        Spiral::US18::US18_1(v106_1_0) => Spiral::US18::US18_1(v106_1_0.clone()),
                    };
                    match &v118 {
                        Spiral::US18::US18_0(v118_0_0, v118_0_1, v118_0_2, v118_0_3, v118_0_4) => {
                            let v0_1_temp: string =
                                append((v0_1.get().clone()), (ofChar(v118_0_0.clone())));
                            let v1_1_temp: string = v118_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v118_0_2.clone();
                            let v3_temp: i32 = v118_0_3.clone();
                            let v4_temp: i32 = v118_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method113;
                        }
                        _ => (
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method114(v0_1: string, v1_1: i32) -> i32 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<i32> = MutCell::new(v1_1);
            '_method114: loop {
                break '_method114 (if (v1_1.get().clone()) >= (length(v0_1.get().clone())) {
                    v1_1.get().clone()
                } else {
                    if ' ' == (getCharAt(v0_1.get().clone(), v1_1.get().clone())) {
                        let v0_1_temp: string = v0_1.get().clone();
                        let v1_1_temp: i32 = (v1_1.get().clone()) + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method114;
                    } else {
                        v1_1.get().clone()
                    }
                });
            }
        }
        pub fn method115(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> (string, string, LrcPtr<StringBuilder>, i32, i32) {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method115: loop {
                break '_method115 ({
                    let v66: Spiral::US18 = if string("") == (v1_1.get().clone()) {
                        Spiral::US18::US18_1(sprintf!(
                            "parsing.any_char / unexpected end of input / s: {:?}",
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v16: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v50: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some((length(v1_1.get().clone())) - 1_i32),
                        );
                        let v56: string = ofChar(v16);
                        let patternInput: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method106(
                            Spiral::method105(length(v56.clone()) as i64, v56, 0_i64),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        );
                        Spiral::US18::US18_0(
                            v16,
                            v50,
                            patternInput.0.clone(),
                            patternInput.1.clone(),
                            patternInput.2.clone(),
                        )
                    };
                    match &v66 {
                        Spiral::US18::US18_0(v66_0_0, v66_0_1, v66_0_2, v66_0_3, v66_0_4) => {
                            let v0_1_temp: string =
                                append((v0_1.get().clone()), (ofChar(v66_0_0.clone())));
                            let v1_1_temp: string = v66_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v66_0_2.clone();
                            let v3_temp: i32 = v66_0_3.clone();
                            let v4_temp: i32 = v66_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method115;
                        }
                        _ => (
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method103(v0_1: string) -> Spiral::US17 {
            let _v0: MutCell<Option<Option<string>>> = MutCell::new(None::<Option<string>>);
            _v0.set(Some(Some(v0_1)));
            {
                let v10: string = defaultValue(
                    string(""),
                    match &_v0.get().clone() {
                        None => panic!("{}", string("optionm\'.of_obj / _v0=None"),),
                        Some(_v0_0_0) => _v0_0_0.clone(),
                    },
                );
                let v16: LrcPtr<StringBuilder> =
                    StringBuilder::_ctor__Z721C83C5(Spiral::method104());
                fn v19(arg10_0040: (string, LrcPtr<StringBuilder>, i32, i32)) -> Spiral::US18 {
                    Spiral::closure35((), arg10_0040)
                }
                fn v20(arg10_0040_1: (string, LrcPtr<StringBuilder>, i32, i32)) -> Spiral::US18 {
                    Spiral::closure37((), arg10_0040_1)
                }
                let v24: Spiral::US18 = Spiral::method108(
                    v10.clone(),
                    v16.clone(),
                    LrcPtr::new(Spiral::UH1::UH1_1(
                        Func1::from(v19),
                        LrcPtr::new(Spiral::UH1::UH1_1(
                            Func1::from(v20),
                            LrcPtr::new(Spiral::UH1::UH1_0),
                        )),
                    )),
                );
                let v197: Spiral::US19 = match &v24 {
                    Spiral::US18::US18_0(v24_0_0, v24_0_1, v24_0_2, v24_0_3, v24_0_4) => {
                        let v29: i32 = v24_0_4.clone();
                        let v28: i32 = v24_0_3.clone();
                        let v27: LrcPtr<StringBuilder> = v24_0_2.clone();
                        let v26: string = v24_0_1.clone();
                        let v123: Spiral::US18 = if string("") == (v26.clone()) {
                            Spiral::US18::US18_1(sprintf!(
                                "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                                toArray(ofArray(new_array(&['\"', '\'']))),
                                (v27.clone(), v28, v29)
                            ))
                        } else {
                            let v50: char = getCharAt(v26.clone(), 0_i32);
                            if (Spiral::method109(v50, 0_i64)) == false {
                                let v87: string = getSlice(
                                    v26.clone(),
                                    Some(1_i32),
                                    Some((length(v26.clone())) - 1_i32),
                                );
                                let v93: string = ofChar(v50);
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral::method106(
                                        Spiral::method105(length(v93.clone()) as i64, v93, 0_i64),
                                        v27.clone(),
                                        v28,
                                        v29,
                                    );
                                Spiral::US18::US18_0(
                                    v50,
                                    v87,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            } else {
                                Spiral::US18::US18_1(sprintf!("parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                                                      v50,
                                                                      toArray(ofArray(new_array(&['\"',
                                                                                                  '\'']))),
                                                                      (v27.clone(),
                                                                       v28,
                                                                       v29)))
                            }
                        };
                        let v135: Spiral::US18 = match &v123 {
                            Spiral::US18::US18_0(
                                v123_0_0,
                                v123_0_1,
                                v123_0_2,
                                v123_0_3,
                                v123_0_4,
                            ) => {
                                let v124: char = v123_0_0.clone();
                                Spiral::US18::US18_0(
                                    if '\\' == (v124) { '/' } else { v124 },
                                    v123_0_1.clone(),
                                    v123_0_2.clone(),
                                    v123_0_3.clone(),
                                    v123_0_4.clone(),
                                )
                            }
                            Spiral::US18::US18_1(v123_1_0) => {
                                Spiral::US18::US18_1(v123_1_0.clone())
                            }
                        };
                        let v155: Spiral::US19 = match &v135 {
                            Spiral::US18::US18_0(
                                v135_0_0,
                                v135_0_1,
                                v135_0_2,
                                v135_0_3,
                                v135_0_4,
                            ) => {
                                let patternInput_1: (
                                    string,
                                    string,
                                    LrcPtr<StringBuilder>,
                                    i32,
                                    i32,
                                ) = Spiral::method110(
                                    ofChar(v135_0_0.clone()),
                                    v135_0_1.clone(),
                                    v135_0_2.clone(),
                                    v135_0_3.clone(),
                                    v135_0_4.clone(),
                                );
                                Spiral::US19::US19_0(
                                    patternInput_1.0.clone(),
                                    patternInput_1.1.clone(),
                                    patternInput_1.2.clone(),
                                    patternInput_1.3.clone(),
                                    patternInput_1.4.clone(),
                                )
                            }
                            Spiral::US18::US18_1(v135_1_0) => {
                                Spiral::US19::US19_1(v135_1_0.clone())
                            }
                        };
                        let v165: Spiral::US19 = match &v155 {
                            Spiral::US19::US19_0(
                                v155_0_0,
                                v155_0_1,
                                v155_0_2,
                                v155_0_3,
                                v155_0_4,
                            ) => Spiral::US19::US19_0(
                                v155_0_0.clone(),
                                v155_0_1.clone(),
                                v155_0_2.clone(),
                                v155_0_3.clone(),
                                v155_0_4.clone(),
                            ),
                            _ => {
                                Spiral::US19::US19_0(string(""), v26.clone(), v27.clone(), v28, v29)
                            }
                        };
                        match &v165 {
                            Spiral::US19::US19_0(
                                v165_0_0,
                                v165_0_1,
                                v165_0_2,
                                v165_0_3,
                                v165_0_4,
                            ) => {
                                let v170: i32 = v165_0_4.clone();
                                let v169: i32 = v165_0_3.clone();
                                let v168: LrcPtr<StringBuilder> = v165_0_2.clone();
                                let v167: string = v165_0_1.clone();
                                let v174: Spiral::US18 = Spiral::method111(
                                    v167.clone(),
                                    v168.clone(),
                                    v169,
                                    v170,
                                    LrcPtr::new(Spiral::UH1::UH1_1(
                                        Func1::from(v19),
                                        LrcPtr::new(Spiral::UH1::UH1_1(
                                            Func1::from(v20),
                                            LrcPtr::new(Spiral::UH1::UH1_0),
                                        )),
                                    )),
                                );
                                match &v174 {
                                        Spiral::US18::US18_0(v174_0_0,
                                                             v174_0_1,
                                                             v174_0_2,
                                                             v174_0_3,
                                                             v174_0_4) =>
                                        Spiral::US19::US19_0(v165_0_0.clone(),
                                                             v174_0_1.clone(),
                                                             v174_0_2.clone(),
                                                             v174_0_3.clone(),
                                                             v174_0_4.clone()),
                                        Spiral::US18::US18_1(v174_1_0) =>
                                        Spiral::US19::US19_1(sprintf!("parsing.between / expected closing delimiter / e: {:?} / input: {:?} / rest1: {:?} / rest2: {:?}",
                                                                      v174_1_0.clone(),
                                                                      (v10.clone(),
                                                                       v16.clone(),
                                                                       1_i32,
                                                                       1_i32),
                                                                      (v26.clone(),
                                                                       v27.clone(),
                                                                       v28,
                                                                       v29),
                                                                      (v167.clone(),
                                                                       v168.clone(),
                                                                       v169,
                                                                       v170))),
                                    }
                            }
                            _ => Spiral::US19::US19_1(string("parsing.between / expected content")),
                        }
                    }
                    Spiral::US18::US18_1(v24_1_0) => Spiral::US19::US19_1(v24_1_0.clone()),
                };
                let v416: Spiral::US19 = match &v197 {
                    Spiral::US19::US19_0(v197_0_0, v197_0_1, v197_0_2, v197_0_3, v197_0_4) => {
                        v197.clone()
                    }
                    _ => {
                        let v307: Spiral::US18 = if string("") == (v10.clone()) {
                            Spiral::US18::US18_1(sprintf!(
                                "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                                toArray(ofArray(new_array(&['\"', '\'', ' ']))),
                                (v16.clone(), 1_i32, 1_i32)
                            ))
                        } else {
                            let v228: char = getCharAt(v10.clone(), 0_i32);
                            if (Spiral::method112(v228, 0_i64)) == false {
                                let v265: string = getSlice(
                                    v10.clone(),
                                    Some(1_i32),
                                    Some((length(v10.clone())) - 1_i32),
                                );
                                let v271: string = ofChar(v228);
                                let patternInput_2: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral::method106(
                                        Spiral::method105(length(v271.clone()) as i64, v271, 0_i64),
                                        v16.clone(),
                                        1_i32,
                                        1_i32,
                                    );
                                Spiral::US18::US18_0(
                                    v228,
                                    v265,
                                    patternInput_2.0.clone(),
                                    patternInput_2.1.clone(),
                                    patternInput_2.2.clone(),
                                )
                            } else {
                                Spiral::US18::US18_1(sprintf!("parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                                                      v228,
                                                                      toArray(ofArray(new_array(&['\"',
                                                                                                  '\'',
                                                                                                  ' ']))),
                                                                      (v16.clone(),
                                                                       1_i32,
                                                                       1_i32)))
                            }
                        };
                        let v319: Spiral::US18 = match &v307 {
                            Spiral::US18::US18_0(
                                v307_0_0,
                                v307_0_1,
                                v307_0_2,
                                v307_0_3,
                                v307_0_4,
                            ) => {
                                let v308: char = v307_0_0.clone();
                                Spiral::US18::US18_0(
                                    if '\\' == (v308) { '/' } else { v308 },
                                    v307_0_1.clone(),
                                    v307_0_2.clone(),
                                    v307_0_3.clone(),
                                    v307_0_4.clone(),
                                )
                            }
                            Spiral::US18::US18_1(v307_1_0) => {
                                Spiral::US18::US18_1(v307_1_0.clone())
                            }
                        };
                        let v339: Spiral::US19 = match &v319 {
                            Spiral::US18::US18_0(
                                v319_0_0,
                                v319_0_1,
                                v319_0_2,
                                v319_0_3,
                                v319_0_4,
                            ) => {
                                let patternInput_3: (
                                    string,
                                    string,
                                    LrcPtr<StringBuilder>,
                                    i32,
                                    i32,
                                ) = Spiral::method113(
                                    ofChar(v319_0_0.clone()),
                                    v319_0_1.clone(),
                                    v319_0_2.clone(),
                                    v319_0_3.clone(),
                                    v319_0_4.clone(),
                                );
                                Spiral::US19::US19_0(
                                    patternInput_3.0.clone(),
                                    patternInput_3.1.clone(),
                                    patternInput_3.2.clone(),
                                    patternInput_3.3.clone(),
                                    patternInput_3.4.clone(),
                                )
                            }
                            Spiral::US18::US18_1(v319_1_0) => {
                                Spiral::US19::US19_1(v319_1_0.clone())
                            }
                        };
                        match &v339 {
                            Spiral::US19::US19_0(
                                v339_0_0,
                                v339_0_1,
                                v339_0_2,
                                v339_0_3,
                                v339_0_4,
                            ) => v339.clone(),
                            _ => {
                                let v354: Spiral::US21 = if (length(v10.clone())) == 0_i32 {
                                    Spiral::US21::US21_0(v10.clone(), v16.clone(), 1_i32, 1_i32)
                                } else {
                                    Spiral::US21::US21_1(sprintf!(
                                        "parsing.eof / expected end of input / input: {:?}",
                                        v10.clone()
                                    ))
                                };
                                let v363: Spiral::US19 = match &v354 {
                                    Spiral::US21::US21_0(
                                        v354_0_0,
                                        v354_0_1,
                                        v354_0_2,
                                        v354_0_3,
                                    ) => Spiral::US19::US19_0(
                                        string(""),
                                        v354_0_0.clone(),
                                        v354_0_1.clone(),
                                        v354_0_2.clone(),
                                        v354_0_3.clone(),
                                    ),
                                    Spiral::US21::US21_1(v354_1_0) => {
                                        Spiral::US19::US19_1(v354_1_0.clone())
                                    }
                                };
                                match &v363 {
                                    Spiral::US19::US19_0(
                                        v363_0_0,
                                        v363_0_1,
                                        v363_0_2,
                                        v363_0_3,
                                        v363_0_4,
                                    ) => {
                                        let v365: string = v363_0_1.clone();
                                        Spiral::US19::US19_0(
                                            v363_0_0.clone(),
                                            getSlice(
                                                v365.clone(),
                                                Some(Spiral::method114(v365.clone(), 0_i32)),
                                                Some((length(v365)) - 1_i32),
                                            ),
                                            v363_0_2.clone(),
                                            v363_0_3.clone(),
                                            v363_0_4.clone(),
                                        )
                                    }
                                    Spiral::US19::US19_1(v363_1_0) => {
                                        Spiral::US19::US19_1(v363_1_0.clone())
                                    }
                                }
                            }
                        }
                    }
                };
                let v671: Spiral::US22 = match &v416 {
                    Spiral::US19::US19_0(v416_0_0, v416_0_1, v416_0_2, v416_0_3, v416_0_4) => {
                        let v421: i32 = v416_0_4.clone();
                        let v420: i32 = v416_0_3.clone();
                        let v419: LrcPtr<StringBuilder> = v416_0_2.clone();
                        let v418: string = v416_0_1.clone();
                        let v542: Spiral::US18 = if string("") == (v418.clone()) {
                            Spiral::US18::US18_1(sprintf!(
                                "parsing.p_char / unexpected end of input / c: \'{}\' / s: {:?}",
                                ' ',
                                (v419.clone(), v420, v421)
                            ))
                        } else {
                            let v428: char = getCharAt(v418.clone(), 0_i32);
                            if (v428) == ' ' {
                                let v463: string = getSlice(
                                    v418.clone(),
                                    Some(1_i32),
                                    Some((length(v418.clone())) - 1_i32),
                                );
                                let v469: string = ofChar(v428);
                                let patternInput_4: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral::method106(
                                        Spiral::method105(length(v469.clone()) as i64, v469, 0_i64),
                                        v419.clone(),
                                        v420,
                                        v421,
                                    );
                                Spiral::US18::US18_0(
                                    v428,
                                    v463,
                                    patternInput_4.0.clone(),
                                    patternInput_4.1.clone(),
                                    patternInput_4.2.clone(),
                                )
                            } else {
                                let v484: i32 = (indexOf(v418.clone(), string("\n"))) - 1_i32;
                                Spiral::US18::US18_1(concat(new_array(&[sprintf!("parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                                                                                         ' ',
                                                                                         v420,
                                                                                         v421,
                                                                                         v419.clone(),
                                                                                         getSlice(v418.clone(),
                                                                                                  Some(0_i32),
                                                                                                  Some((if -2_i32
                                                                                                               ==
                                                                                                               (v484)
                                                                                                           {
                                                                                                            (length(v418.clone()))
                                                                                                                +
                                                                                                                1_i32
                                                                                                        } else {
                                                                                                            (v484)
                                                                                                                +
                                                                                                                1_i32
                                                                                                        })
                                                                                                           -
                                                                                                           1_i32))),
                                                                                string("\n"),
                                                                                append(((Spiral::method107((v421)
                                                                                                               -
                                                                                                               1_i32,
                                                                                                           0_i32))(string(""))),
                                                                                       string("^")),
                                                                                string("\n")])))
                            }
                        };
                        let v554: Spiral::US23 = match &v542 {
                            Spiral::US18::US18_0(
                                v542_0_0,
                                v542_0_1,
                                v542_0_2,
                                v542_0_3,
                                v542_0_4,
                            ) => Spiral::US23::US23_0(
                                Spiral::US20::US20_0(v542_0_0.clone()),
                                v542_0_1.clone(),
                                v542_0_2.clone(),
                                v542_0_3.clone(),
                                v542_0_4.clone(),
                            ),
                            _ => Spiral::US23::US23_0(
                                Spiral::US20::US20_1,
                                v418.clone(),
                                v419.clone(),
                                v420,
                                v421,
                            ),
                        };
                        let v645: Spiral::US19 = match &v554 {
                            Spiral::US23::US23_0(
                                v554_0_0,
                                v554_0_1,
                                v554_0_2,
                                v554_0_3,
                                v554_0_4,
                            ) => {
                                let v559: i32 = v554_0_4.clone();
                                let v558: i32 = v554_0_3.clone();
                                let v557: LrcPtr<StringBuilder> = v554_0_2.clone();
                                let v556: string = v554_0_1.clone();
                                let v621: Spiral::US18 = if string("") == (v556.clone()) {
                                    Spiral::US18::US18_1(sprintf!(
                                        "parsing.any_char / unexpected end of input / s: {:?}",
                                        (v557.clone(), v558, v559)
                                    ))
                                } else {
                                    let v571: char = getCharAt(v556.clone(), 0_i32);
                                    let v605: string = getSlice(
                                        v556.clone(),
                                        Some(1_i32),
                                        Some((length(v556)) - 1_i32),
                                    );
                                    let v611: string = ofChar(v571);
                                    let patternInput_5: (LrcPtr<StringBuilder>, i32, i32) =
                                        Spiral::method106(
                                            Spiral::method105(
                                                length(v611.clone()) as i64,
                                                v611,
                                                0_i64,
                                            ),
                                            v557,
                                            v558,
                                            v559,
                                        );
                                    Spiral::US18::US18_0(
                                        v571,
                                        v605,
                                        patternInput_5.0.clone(),
                                        patternInput_5.1.clone(),
                                        patternInput_5.2.clone(),
                                    )
                                };
                                match &v621 {
                                    Spiral::US18::US18_0(
                                        v621_0_0,
                                        v621_0_1,
                                        v621_0_2,
                                        v621_0_3,
                                        v621_0_4,
                                    ) => {
                                        let patternInput_6: (
                                            string,
                                            string,
                                            LrcPtr<StringBuilder>,
                                            i32,
                                            i32,
                                        ) = Spiral::method115(
                                            ofChar(v621_0_0.clone()),
                                            v621_0_1.clone(),
                                            v621_0_2.clone(),
                                            v621_0_3.clone(),
                                            v621_0_4.clone(),
                                        );
                                        Spiral::US19::US19_0(
                                            patternInput_6.0.clone(),
                                            patternInput_6.1.clone(),
                                            patternInput_6.2.clone(),
                                            patternInput_6.3.clone(),
                                            patternInput_6.4.clone(),
                                        )
                                    }
                                    Spiral::US18::US18_1(v621_1_0) => {
                                        Spiral::US19::US19_1(v621_1_0.clone())
                                    }
                                }
                            }
                            Spiral::US23::US23_1(v554_1_0) => {
                                Spiral::US19::US19_1(v554_1_0.clone())
                            }
                        };
                        let v657: Spiral::US24 = match &v645 {
                            Spiral::US19::US19_0(
                                v645_0_0,
                                v645_0_1,
                                v645_0_2,
                                v645_0_3,
                                v645_0_4,
                            ) => Spiral::US24::US24_0(
                                Spiral::US5::US5_0(v645_0_0.clone()),
                                v645_0_1.clone(),
                                v645_0_2.clone(),
                                v645_0_3.clone(),
                                v645_0_4.clone(),
                            ),
                            _ => Spiral::US24::US24_0(
                                Spiral::US5::US5_1,
                                v418.clone(),
                                v419.clone(),
                                v420,
                                v421,
                            ),
                        };
                        match &v657 {
                            Spiral::US24::US24_0(
                                v657_0_0,
                                v657_0_1,
                                v657_0_2,
                                v657_0_3,
                                v657_0_4,
                            ) => Spiral::US22::US22_0(
                                v416_0_0.clone(),
                                v657_0_0.clone(),
                                v657_0_1.clone(),
                                v657_0_2.clone(),
                                v657_0_3.clone(),
                                v657_0_4.clone(),
                            ),
                            Spiral::US24::US24_1(v657_1_0) => {
                                Spiral::US22::US22_1(v657_1_0.clone())
                            }
                        }
                    }
                    Spiral::US19::US19_1(v416_1_0) => Spiral::US22::US22_1(v416_1_0.clone()),
                };
                match &v671 {
                    Spiral::US22::US22_0(
                        v671_0_0,
                        v671_0_1,
                        v671_0_2,
                        v671_0_3,
                        v671_0_4,
                        v671_0_5,
                    ) => Spiral::US17::US17_0(v671_0_0.clone(), v671_0_1.clone()),
                    Spiral::US22::US22_1(v671_1_0) => Spiral::US17::US17_1(v671_1_0.clone()),
                }
            }
        }
        pub fn method118(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method118: loop {
                break '_method118 (if (v1_1.get().clone()) >= 4_i64 {
                    false
                } else {
                    let v19: Spiral::US20 = if (v1_1.get().clone()) == 0_i64 {
                        Spiral::US20::US20_0('\\')
                    } else {
                        let v5: i64 = (v1_1.get().clone()) - 1_i64;
                        if (v5) == 0_i64 {
                            Spiral::US20::US20_0('`')
                        } else {
                            let v8: i64 = (v5) - 1_i64;
                            if (v8) == 0_i64 {
                                Spiral::US20::US20_0('\"')
                            } else {
                                let v11: i64 = (v8) - 1_i64;
                                if (v11) == 0_i64 {
                                    Spiral::US20::US20_0(' ')
                                } else {
                                    let v14: i64 = (v11) - 1_i64;
                                    Spiral::US20::US20_1
                                }
                            }
                        }
                    };
                    if (v0_1.get().clone())
                        == (match &v19 {
                            Spiral::US20::US20_0(v19_0_0) => match &v19 {
                                Spiral::US20::US20_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        })
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = (v1_1.get().clone()) + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method118;
                    }
                });
            }
        }
        pub fn method119(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> (string, string, LrcPtr<StringBuilder>, i32, i32) {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method119: loop {
                break '_method119 ({
                    let v114: Spiral::US18 = if string("") == (v1_1.get().clone()) {
                        Spiral::US18::US18_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v33: char = getCharAt(v1_1.get().clone(), 0_i32);
                        if (Spiral::method118(v33, 0_i64)) == false {
                            let v70: string = getSlice(
                                v1_1.get().clone(),
                                Some(1_i32),
                                Some((length(v1_1.get().clone())) - 1_i32),
                            );
                            let v76: string = ofChar(v33);
                            let patternInput: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method106(
                                Spiral::method105(length(v76.clone()) as i64, v76, 0_i64),
                                v2.get().clone(),
                                v3.get().clone(),
                                v4.get().clone(),
                            );
                            Spiral::US18::US18_0(
                                v33,
                                v70,
                                patternInput.0.clone(),
                                patternInput.1.clone(),
                                patternInput.2.clone(),
                            )
                        } else {
                            Spiral::US18::US18_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v33,
                                toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    match &v114 {
                        Spiral::US18::US18_0(v114_0_0, v114_0_1, v114_0_2, v114_0_3, v114_0_4) => {
                            let v0_1_temp: string =
                                append((v0_1.get().clone()), (ofChar(v114_0_0.clone())));
                            let v1_1_temp: string = v114_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v114_0_2.clone();
                            let v3_temp: i32 = v114_0_3.clone();
                            let v4_temp: i32 = v114_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method119;
                        }
                        _ => (
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method121(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method121: loop {
                break '_method121 (if (v1_1.get().clone()) >= 3_i64 {
                    false
                } else {
                    let v15: Spiral::US20 = if (v1_1.get().clone()) == 0_i64 {
                        Spiral::US20::US20_0('\\')
                    } else {
                        let v5: i64 = (v1_1.get().clone()) - 1_i64;
                        if (v5) == 0_i64 {
                            Spiral::US20::US20_0('`')
                        } else {
                            let v8: i64 = (v5) - 1_i64;
                            if (v8) == 0_i64 {
                                Spiral::US20::US20_0('\"')
                            } else {
                                let v11: i64 = (v8) - 1_i64;
                                Spiral::US20::US20_1
                            }
                        }
                    };
                    if (v0_1.get().clone())
                        == (match &v15 {
                            Spiral::US20::US20_0(v15_0_0) => match &v15 {
                                Spiral::US20::US20_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        })
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = (v1_1.get().clone()) + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method121;
                    }
                });
            }
        }
        pub fn closure38(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral::US19 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            let v125: Spiral::US18 = if string("") == (v0_1.clone()) {
                Spiral::US18::US18_1(sprintf!(
                    "parsing.p_char / unexpected end of input / c: \'{}\' / s: {:?}",
                    '\\',
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v10: char = getCharAt(v0_1.clone(), 0_i32);
                if (v10) == '\\' {
                    let v45: string = getSlice(
                        v0_1.clone(),
                        Some(1_i32),
                        Some((length(v0_1.clone())) - 1_i32),
                    );
                    let v51: string = ofChar(v10);
                    let patternInput: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method106(
                        Spiral::method105(length(v51.clone()) as i64, v51, 0_i64),
                        v1_1.clone(),
                        v2,
                        v3,
                    );
                    Spiral::US18::US18_0(
                        v10,
                        v45,
                        patternInput.0.clone(),
                        patternInput.1.clone(),
                        patternInput.2.clone(),
                    )
                } else {
                    let v66: i32 = (indexOf(v0_1.clone(), string("\n"))) - 1_i32;
                    Spiral::US18::US18_1(concat(new_array(&[
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '\\',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1.clone(),
                                Some(0_i32),
                                Some(
                                    (if -2_i32 == (v66) {
                                        (length(v0_1)) + 1_i32
                                    } else {
                                        (v66) + 1_i32
                                    }) - 1_i32
                                )
                            )
                        ),
                        string("\n"),
                        append(
                            ((Spiral::method107((v3) - 1_i32, 0_i32))(string(""))),
                            string("^"),
                        ),
                        string("\n"),
                    ])))
                }
            };
            let v196: Spiral::US18 = match &v125 {
                Spiral::US18::US18_0(v125_0_0, v125_0_1, v125_0_2, v125_0_3, v125_0_4) => {
                    let v130: i32 = v125_0_4.clone();
                    let v129: i32 = v125_0_3.clone();
                    let v128: LrcPtr<StringBuilder> = v125_0_2.clone();
                    let v127: string = v125_0_1.clone();
                    if string("") == (v127.clone()) {
                        Spiral::US18::US18_1(sprintf!(
                            "parsing.any_char / unexpected end of input / s: {:?}",
                            (v128.clone(), v129, v130)
                        ))
                    } else {
                        let v142: char = getCharAt(v127.clone(), 0_i32);
                        let v176: string =
                            getSlice(v127.clone(), Some(1_i32), Some((length(v127)) - 1_i32));
                        let v182: string = ofChar(v142);
                        let patternInput_1: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method106(
                            Spiral::method105(length(v182.clone()) as i64, v182, 0_i64),
                            v128,
                            v129,
                            v130,
                        );
                        Spiral::US18::US18_0(
                            v142,
                            v176,
                            patternInput_1.0.clone(),
                            patternInput_1.1.clone(),
                            patternInput_1.2.clone(),
                        )
                    }
                }
                Spiral::US18::US18_1(v125_1_0) => Spiral::US18::US18_1(v125_1_0.clone()),
            };
            match &v196 {
                Spiral::US18::US18_0(v196_0_0, v196_0_1, v196_0_2, v196_0_3, v196_0_4) => {
                    Spiral::US19::US19_0(
                        append((ofChar('\\')), (ofChar(v196_0_0.clone()))),
                        v196_0_1.clone(),
                        v196_0_2.clone(),
                        v196_0_3.clone(),
                        v196_0_4.clone(),
                    )
                }
                Spiral::US18::US18_1(v196_1_0) => Spiral::US19::US19_1(v196_1_0.clone()),
            }
        }
        pub fn closure39(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral::US19 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            let v125: Spiral::US18 = if string("") == (v0_1.clone()) {
                Spiral::US18::US18_1(sprintf!(
                    "parsing.p_char / unexpected end of input / c: \'{}\' / s: {:?}",
                    '`',
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v10: char = getCharAt(v0_1.clone(), 0_i32);
                if (v10) == '`' {
                    let v45: string = getSlice(
                        v0_1.clone(),
                        Some(1_i32),
                        Some((length(v0_1.clone())) - 1_i32),
                    );
                    let v51: string = ofChar(v10);
                    let patternInput: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method106(
                        Spiral::method105(length(v51.clone()) as i64, v51, 0_i64),
                        v1_1.clone(),
                        v2,
                        v3,
                    );
                    Spiral::US18::US18_0(
                        v10,
                        v45,
                        patternInput.0.clone(),
                        patternInput.1.clone(),
                        patternInput.2.clone(),
                    )
                } else {
                    let v66: i32 = (indexOf(v0_1.clone(), string("\n"))) - 1_i32;
                    Spiral::US18::US18_1(concat(new_array(&[
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '`',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1.clone(),
                                Some(0_i32),
                                Some(
                                    (if -2_i32 == (v66) {
                                        (length(v0_1)) + 1_i32
                                    } else {
                                        (v66) + 1_i32
                                    }) - 1_i32
                                )
                            )
                        ),
                        string("\n"),
                        append(
                            ((Spiral::method107((v3) - 1_i32, 0_i32))(string(""))),
                            string("^"),
                        ),
                        string("\n"),
                    ])))
                }
            };
            let v196: Spiral::US18 = match &v125 {
                Spiral::US18::US18_0(v125_0_0, v125_0_1, v125_0_2, v125_0_3, v125_0_4) => {
                    let v130: i32 = v125_0_4.clone();
                    let v129: i32 = v125_0_3.clone();
                    let v128: LrcPtr<StringBuilder> = v125_0_2.clone();
                    let v127: string = v125_0_1.clone();
                    if string("") == (v127.clone()) {
                        Spiral::US18::US18_1(sprintf!(
                            "parsing.any_char / unexpected end of input / s: {:?}",
                            (v128.clone(), v129, v130)
                        ))
                    } else {
                        let v142: char = getCharAt(v127.clone(), 0_i32);
                        let v176: string =
                            getSlice(v127.clone(), Some(1_i32), Some((length(v127)) - 1_i32));
                        let v182: string = ofChar(v142);
                        let patternInput_1: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method106(
                            Spiral::method105(length(v182.clone()) as i64, v182, 0_i64),
                            v128,
                            v129,
                            v130,
                        );
                        Spiral::US18::US18_0(
                            v142,
                            v176,
                            patternInput_1.0.clone(),
                            patternInput_1.1.clone(),
                            patternInput_1.2.clone(),
                        )
                    }
                }
                Spiral::US18::US18_1(v125_1_0) => Spiral::US18::US18_1(v125_1_0.clone()),
            };
            match &v196 {
                Spiral::US18::US18_0(v196_0_0, v196_0_1, v196_0_2, v196_0_3, v196_0_4) => {
                    Spiral::US19::US19_0(
                        append((ofChar('`')), (ofChar(v196_0_0.clone()))),
                        v196_0_1.clone(),
                        v196_0_2.clone(),
                        v196_0_3.clone(),
                        v196_0_4.clone(),
                    )
                }
                Spiral::US18::US18_1(v196_1_0) => Spiral::US19::US19_1(v196_1_0.clone()),
            }
        }
        pub fn method122(
            v0_1: string,
            v1_1: LrcPtr<StringBuilder>,
            v2: i32,
            v3: i32,
            v4: LrcPtr<Spiral::UH3>,
        ) -> Spiral::US19 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<i32> = MutCell::new(v2);
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<LrcPtr<Spiral::UH3>> = MutCell::new(v4.clone());
            '_method122: loop {
                break '_method122 (match v4.get().clone().as_ref() {
                    Spiral::UH3::UH3_0 => {
                        Spiral::US19::US19_1(string("parsing.choice / no parsers succeeded"))
                    }
                    Spiral::UH3::UH3_1(v4_1_0, v4_1_1) => {
                        let v9: Spiral::US19 = (match v4.get().clone().as_ref() {
                            Spiral::UH3::UH3_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        })((
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                        ));
                        match &v9 {
                            Spiral::US19::US19_0(v9_0_0, v9_0_1, v9_0_2, v9_0_3, v9_0_4) => {
                                v9.clone()
                            }
                            _ => {
                                let v0_1_temp: string = v0_1.get().clone();
                                let v1_1_temp: LrcPtr<StringBuilder> = v1_1.get().clone();
                                let v2_temp: i32 = v2.get().clone();
                                let v3_temp: i32 = v3.get().clone();
                                let v4_temp: LrcPtr<Spiral::UH3> =
                                    match v4.get().clone().as_ref() {
                                        Spiral::UH3::UH3_1(_, x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone();
                                v0_1.set(v0_1_temp);
                                v1_1.set(v1_1_temp);
                                v2.set(v2_temp);
                                v3.set(v3_temp);
                                v4.set(v4_temp);
                                continue '_method122;
                            }
                        }
                    }
                });
            }
        }
        pub fn method123(
            v0_1: LrcPtr<Spiral::UH2>,
            v1_1: LrcPtr<Spiral::UH2>,
        ) -> LrcPtr<Spiral::UH2> {
            let v0_1: MutCell<LrcPtr<Spiral::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<Spiral::UH2>> = MutCell::new(v1_1.clone());
            '_method123: loop {
                break '_method123 (match v0_1.get().clone().as_ref() {
                    Spiral::UH2::UH2_0 => v1_1.get().clone(),
                    Spiral::UH2::UH2_1(v0_1_1_0, v0_1_1_1) => {
                        let v0_1_temp: LrcPtr<Spiral::UH2> = match v0_1.get().clone().as_ref() {
                            Spiral::UH2::UH2_1(_, x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                        let v1_1_temp: LrcPtr<Spiral::UH2> = LrcPtr::new(Spiral::UH2::UH2_1(
                            match v0_1.get().clone().as_ref() {
                                Spiral::UH2::UH2_1(x, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            v1_1.get().clone(),
                        ));
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method123;
                    }
                });
            }
        }
        pub fn method120(
            v0_1: LrcPtr<Spiral::UH2>,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral::US26 {
            let v0_1: MutCell<LrcPtr<Spiral::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method120: loop {
                break '_method120 ({
                    let v106: Spiral::US18 = if string("") == (v1_1.get().clone()) {
                        Spiral::US18::US18_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v29: char = getCharAt(v1_1.get().clone(), 0_i32);
                        if (Spiral::method121(v29, 0_i64)) == false {
                            let v66: string = getSlice(
                                v1_1.get().clone(),
                                Some(1_i32),
                                Some((length(v1_1.get().clone())) - 1_i32),
                            );
                            let v72: string = ofChar(v29);
                            let patternInput: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method106(
                                Spiral::method105(length(v72.clone()) as i64, v72, 0_i64),
                                v2.get().clone(),
                                v3.get().clone(),
                                v4.get().clone(),
                            );
                            Spiral::US18::US18_0(
                                v29,
                                v66,
                                patternInput.0.clone(),
                                patternInput.1.clone(),
                                patternInput.2.clone(),
                            )
                        } else {
                            Spiral::US18::US18_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v29,
                                toArray(ofArray(new_array(&['\\', '`', '\"']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v121: Spiral::US19 = match &v106 {
                        Spiral::US18::US18_0(v106_0_0, v106_0_1, v106_0_2, v106_0_3, v106_0_4) => {
                            Spiral::US19::US19_0(
                                ofChar(v106_0_0.clone()),
                                v106_0_1.clone(),
                                v106_0_2.clone(),
                                v106_0_3.clone(),
                                v106_0_4.clone(),
                            )
                        }
                        Spiral::US18::US18_1(v106_1_0) => Spiral::US19::US19_1(v106_1_0.clone()),
                    };
                    let v135: Spiral::US19 = match &v121 {
                        Spiral::US19::US19_0(v121_0_0, v121_0_1, v121_0_2, v121_0_3, v121_0_4) => {
                            v121.clone()
                        }
                        _ => Spiral::method122(
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                            LrcPtr::new(Spiral::UH3::UH3_1(
                                Func1::new(
                                    move |arg10_0040: (string, LrcPtr<StringBuilder>, i32, i32)| {
                                        Spiral::closure38((), arg10_0040)
                                    },
                                ),
                                LrcPtr::new(Spiral::UH3::UH3_1(
                                    Func1::new(
                                        move |arg10_0040_1: (
                                            string,
                                            LrcPtr<StringBuilder>,
                                            i32,
                                            i32,
                                        )| {
                                            Spiral::closure39((), arg10_0040_1)
                                        },
                                    ),
                                    LrcPtr::new(Spiral::UH3::UH3_0),
                                )),
                            )),
                        ),
                    };
                    match &v135 {
                        Spiral::US19::US19_0(v135_0_0, v135_0_1, v135_0_2, v135_0_3, v135_0_4) => {
                            let v0_1_temp: LrcPtr<Spiral::UH2> = LrcPtr::new(Spiral::UH2::UH2_1(
                                v135_0_0.clone(),
                                v0_1.get().clone(),
                            ));
                            let v1_1_temp: string = v135_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v135_0_2.clone();
                            let v3_temp: i32 = v135_0_3.clone();
                            let v4_temp: i32 = v135_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method120;
                        }
                        _ => Spiral::US26::US26_0(
                            Spiral::method123(v0_1.get().clone(), LrcPtr::new(Spiral::UH2::UH2_0)),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method124(v0_1: LrcPtr<Spiral::UH2>, v1_1: List<string>) -> List<string> {
            match v0_1.as_ref() {
                Spiral::UH2::UH2_0 => v1_1.clone(),
                Spiral::UH2::UH2_1(v0_1_1_0, v0_1_1_1) => cons(
                    match v0_1.as_ref() {
                        Spiral::UH2::UH2_1(x, _) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone(),
                    Spiral::method124(
                        match v0_1.as_ref() {
                            Spiral::UH2::UH2_1(_, x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                        v1_1.clone(),
                    ),
                ),
            }
        }
        pub fn method125(
            v0_1: LrcPtr<Spiral::UH2>,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral::US26 {
            let v0_1: MutCell<LrcPtr<Spiral::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method125: loop {
                break '_method125 ({
                    let v106: Spiral::US18 = if string("") == (v1_1.get().clone()) {
                        Spiral::US18::US18_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v29: char = getCharAt(v1_1.get().clone(), 0_i32);
                        if (Spiral::method121(v29, 0_i64)) == false {
                            let v66: string = getSlice(
                                v1_1.get().clone(),
                                Some(1_i32),
                                Some((length(v1_1.get().clone())) - 1_i32),
                            );
                            let v72: string = ofChar(v29);
                            let patternInput: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method106(
                                Spiral::method105(length(v72.clone()) as i64, v72, 0_i64),
                                v2.get().clone(),
                                v3.get().clone(),
                                v4.get().clone(),
                            );
                            Spiral::US18::US18_0(
                                v29,
                                v66,
                                patternInput.0.clone(),
                                patternInput.1.clone(),
                                patternInput.2.clone(),
                            )
                        } else {
                            Spiral::US18::US18_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v29,
                                toArray(ofArray(new_array(&['\\', '`', '\"']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v121: Spiral::US19 = match &v106 {
                        Spiral::US18::US18_0(v106_0_0, v106_0_1, v106_0_2, v106_0_3, v106_0_4) => {
                            Spiral::US19::US19_0(
                                ofChar(v106_0_0.clone()),
                                v106_0_1.clone(),
                                v106_0_2.clone(),
                                v106_0_3.clone(),
                                v106_0_4.clone(),
                            )
                        }
                        Spiral::US18::US18_1(v106_1_0) => Spiral::US19::US19_1(v106_1_0.clone()),
                    };
                    match &v121 {
                        Spiral::US19::US19_0(v121_0_0, v121_0_1, v121_0_2, v121_0_3, v121_0_4) => {
                            let v0_1_temp: LrcPtr<Spiral::UH2> = LrcPtr::new(Spiral::UH2::UH2_1(
                                v121_0_0.clone(),
                                v0_1.get().clone(),
                            ));
                            let v1_1_temp: string = v121_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v121_0_2.clone();
                            let v3_temp: i32 = v121_0_3.clone();
                            let v4_temp: i32 = v121_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method125;
                        }
                        _ => Spiral::US26::US26_0(
                            Spiral::method123(v0_1.get().clone(), LrcPtr::new(Spiral::UH2::UH2_0)),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method117(
            v0_1: LrcPtr<Spiral::UH2>,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral::US26 {
            let v0_1: MutCell<LrcPtr<Spiral::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method117: loop {
                break '_method117 ({
                    let v5: bool = string("") == (v1_1.get().clone());
                    let v114: Spiral::US18 = if v5 {
                        Spiral::US18::US18_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v33: char = getCharAt(v1_1.get().clone(), 0_i32);
                        if (Spiral::method118(v33, 0_i64)) == false {
                            let v70: string = getSlice(
                                v1_1.get().clone(),
                                Some(1_i32),
                                Some((length(v1_1.get().clone())) - 1_i32),
                            );
                            let v76: string = ofChar(v33);
                            let patternInput: (LrcPtr<StringBuilder>, i32, i32) = Spiral::method106(
                                Spiral::method105(length(v76.clone()) as i64, v76, 0_i64),
                                v2.get().clone(),
                                v3.get().clone(),
                                v4.get().clone(),
                            );
                            Spiral::US18::US18_0(
                                v33,
                                v70,
                                patternInput.0.clone(),
                                patternInput.1.clone(),
                                patternInput.2.clone(),
                            )
                        } else {
                            Spiral::US18::US18_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v33,
                                toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v134: Spiral::US19 = match &v114 {
                        Spiral::US18::US18_0(v114_0_0, v114_0_1, v114_0_2, v114_0_3, v114_0_4) => {
                            let patternInput_1: (string, string, LrcPtr<StringBuilder>, i32, i32) =
                                Spiral::method119(
                                    ofChar(v114_0_0.clone()),
                                    v114_0_1.clone(),
                                    v114_0_2.clone(),
                                    v114_0_3.clone(),
                                    v114_0_4.clone(),
                                );
                            Spiral::US19::US19_0(
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                                patternInput_1.3.clone(),
                                patternInput_1.4.clone(),
                            )
                        }
                        Spiral::US18::US18_1(v114_1_0) => Spiral::US19::US19_1(v114_1_0.clone()),
                    };
                    let v522: Spiral::US19 = match &v134 {
                        Spiral::US19::US19_0(v134_0_0, v134_0_1, v134_0_2, v134_0_3, v134_0_4) => {
                            v134.clone()
                        }
                        _ => {
                            let v261: Spiral::US18 = if v5 {
                                Spiral::US18::US18_1(sprintf!("parsing.p_char / unexpected end of input / c: \'{}\' / s: {:?}",
                                                                               '\"',
                                                                               (v2.get().clone(),
                                                                                v3.get().clone(),
                                                                                v4.get().clone())))
                            } else {
                                let v146: char = getCharAt(v1_1.get().clone(), 0_i32);
                                if (v146) == '\"' {
                                    let v181: string = getSlice(
                                        v1_1.get().clone(),
                                        Some(1_i32),
                                        Some((length(v1_1.get().clone())) - 1_i32),
                                    );
                                    let v187: string = ofChar(v146);
                                    let patternInput_2: (LrcPtr<StringBuilder>, i32, i32) =
                                        Spiral::method106(
                                            Spiral::method105(
                                                length(v187.clone()) as i64,
                                                v187,
                                                0_i64,
                                            ),
                                            v2.get().clone(),
                                            v3.get().clone(),
                                            v4.get().clone(),
                                        );
                                    Spiral::US18::US18_0(
                                        v146,
                                        v181,
                                        patternInput_2.0.clone(),
                                        patternInput_2.1.clone(),
                                        patternInput_2.2.clone(),
                                    )
                                } else {
                                    let v202: i32 =
                                        (indexOf(v1_1.get().clone(), string("\n"))) - 1_i32;
                                    Spiral::US18::US18_1(concat(new_array(&[sprintf!("parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                                                                                                      '\"',
                                                                                                      v3.get().clone(),
                                                                                                      v4.get().clone(),
                                                                                                      v2.get().clone(),
                                                                                                      getSlice(v1_1.get().clone(),
                                                                                                               Some(0_i32),
                                                                                                               Some((if -2_i32
                                                                                                                            ==
                                                                                                                            (v202)
                                                                                                                        {
                                                                                                                         (length(v1_1.get().clone()))
                                                                                                                             +
                                                                                                                             1_i32
                                                                                                                     } else {
                                                                                                                         (v202)
                                                                                                                             +
                                                                                                                             1_i32
                                                                                                                     })
                                                                                                                        -
                                                                                                                        1_i32))),
                                                                                             string("\n"),
                                                                                             append(((Spiral::method107((v4.get().clone())
                                                                                                                            -
                                                                                                                            1_i32,
                                                                                                                        0_i32))(string(""))),
                                                                                                    string("^")),
                                                                                             string("\n")])))
                                }
                            };
                            let v451: Spiral::US19 = match &v261 {
                                Spiral::US18::US18_0(
                                    v261_0_0,
                                    v261_0_1,
                                    v261_0_2,
                                    v261_0_3,
                                    v261_0_4,
                                ) => {
                                    let v266: i32 = v261_0_4.clone();
                                    let v265: i32 = v261_0_3.clone();
                                    let v264: LrcPtr<StringBuilder> = v261_0_2.clone();
                                    let v263: string = v261_0_1.clone();
                                    let v268: Spiral::US26 = Spiral::method120(
                                        LrcPtr::new(Spiral::UH2::UH2_0),
                                        v263.clone(),
                                        v264.clone(),
                                        v265,
                                        v266,
                                    );
                                    let v301: Spiral::US19 = match &v268 {
                                        Spiral::US26::US26_0(
                                            v268_0_0,
                                            v268_0_1,
                                            v268_0_2,
                                            v268_0_3,
                                            v268_0_4,
                                        ) => {
                                            let v275: List<string> = Spiral::method124(
                                                v268_0_0.clone(),
                                                empty::<string>(),
                                            );
                                            Spiral::US19::US19_0(
                                                join(
                                                    string(""),
                                                    toArray_1(delay(Func0::new({
                                                        let v275 = v275.clone();
                                                        move || ofList(v275.clone()).clone()
                                                    }))),
                                                ),
                                                v268_0_1.clone(),
                                                v268_0_2.clone(),
                                                v268_0_3.clone(),
                                                v268_0_4.clone(),
                                            )
                                        }
                                        Spiral::US26::US26_1(v268_1_0) => {
                                            Spiral::US19::US19_1(v268_1_0.clone())
                                        }
                                    };
                                    match &v301 {
                                        Spiral::US19::US19_0(
                                            v301_0_0,
                                            v301_0_1,
                                            v301_0_2,
                                            v301_0_3,
                                            v301_0_4,
                                        ) => {
                                            let v306: i32 = v301_0_4.clone();
                                            let v305: i32 = v301_0_3.clone();
                                            let v304: LrcPtr<StringBuilder> = v301_0_2.clone();
                                            let v303: string = v301_0_1.clone();
                                            let v428: Spiral::US18 = if string("") == (v303.clone())
                                            {
                                                Spiral::US18::US18_1(sprintf!("parsing.p_char / unexpected end of input / c: \'{}\' / s: {:?}",
                                                                                                   '\"',
                                                                                                   (v304.clone(),
                                                                                                    v305,
                                                                                                    v306)))
                                            } else {
                                                let v313: char = getCharAt(v303.clone(), 0_i32);
                                                if (v313) == '\"' {
                                                    let v348: string = getSlice(
                                                        v303.clone(),
                                                        Some(1_i32),
                                                        Some((length(v303.clone())) - 1_i32),
                                                    );
                                                    let v354: string = ofChar(v313);
                                                    let patternInput_3: (
                                                        LrcPtr<StringBuilder>,
                                                        i32,
                                                        i32,
                                                    ) = Spiral::method106(
                                                        Spiral::method105(
                                                            length(v354.clone()) as i64,
                                                            v354,
                                                            0_i64,
                                                        ),
                                                        v304.clone(),
                                                        v305,
                                                        v306,
                                                    );
                                                    Spiral::US18::US18_0(
                                                        v313,
                                                        v348,
                                                        patternInput_3.0.clone(),
                                                        patternInput_3.1.clone(),
                                                        patternInput_3.2.clone(),
                                                    )
                                                } else {
                                                    let v369: i32 =
                                                        (indexOf(v303.clone(), string("\n")))
                                                            - 1_i32;
                                                    Spiral::US18::US18_1(concat(new_array(&[sprintf!("parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                                                                                                                          '\"',
                                                                                                                          v305,
                                                                                                                          v306,
                                                                                                                          v304.clone(),
                                                                                                                          getSlice(v303.clone(),
                                                                                                                                   Some(0_i32),
                                                                                                                                   Some((if -2_i32
                                                                                                                                                ==
                                                                                                                                                (v369)
                                                                                                                                            {
                                                                                                                                             (length(v303.clone()))
                                                                                                                                                 +
                                                                                                                                                 1_i32
                                                                                                                                         } else {
                                                                                                                                             (v369)
                                                                                                                                                 +
                                                                                                                                                 1_i32
                                                                                                                                         })
                                                                                                                                            -
                                                                                                                                            1_i32))),
                                                                                                                 string("\n"),
                                                                                                                 append(((Spiral::method107((v306)
                                                                                                                                                -
                                                                                                                                                1_i32,
                                                                                                                                            0_i32))(string(""))),
                                                                                                                        string("^")),
                                                                                                                 string("\n")])))
                                                }
                                            };
                                            match &v428 {
                                                                 Spiral::US18::US18_0(v428_0_0,
                                                                                      v428_0_1,
                                                                                      v428_0_2,
                                                                                      v428_0_3,
                                                                                      v428_0_4)
                                                                 =>
                                                                 Spiral::US19::US19_0(v301_0_0.clone(),
                                                                                      v428_0_1.clone(),
                                                                                      v428_0_2.clone(),
                                                                                      v428_0_3.clone(),
                                                                                      v428_0_4.clone()),
                                                                 Spiral::US18::US18_1(v428_1_0)
                                                                 =>
                                                                 Spiral::US19::US19_1(sprintf!("parsing.between / expected closing delimiter / e: {:?} / input: {:?} / rest1: {:?} / rest2: {:?}",
                                                                                               v428_1_0.clone(),
                                                                                               (v1_1.get().clone(),
                                                                                                v2.get().clone(),
                                                                                                v3.get().clone(),
                                                                                                v4.get().clone()),
                                                                                               (v263.clone(),
                                                                                                v264.clone(),
                                                                                                v265,
                                                                                                v266),
                                                                                               (v303.clone(),
                                                                                                v304.clone(),
                                                                                                v305,
                                                                                                v306))),
                                                             }
                                        }
                                        _ => Spiral::US19::US19_1(string(
                                            "parsing.between / expected content",
                                        )),
                                    }
                                }
                                Spiral::US18::US18_1(v261_1_0) => {
                                    Spiral::US19::US19_1(v261_1_0.clone())
                                }
                            };
                            match &v451 {
                                Spiral::US19::US19_0(
                                    v451_0_0,
                                    v451_0_1,
                                    v451_0_2,
                                    v451_0_3,
                                    v451_0_4,
                                ) => v451.clone(),
                                _ => {
                                    let v463: Spiral::US19 =
                                                     Spiral::method122(v1_1.get().clone(),
                                                                       v2.get().clone(),
                                                                       v3.get().clone(),
                                                                       v4.get().clone(),
                                                                       LrcPtr::new(Spiral::UH3::UH3_1(Func1::new(move
                                                                                                                     |arg10_0040:
                                                                                                                          (string,
                                                                                                                           LrcPtr<StringBuilder>,
                                                                                                                           i32,
                                                                                                                           i32)|
                                                                                                                     Spiral::closure38((),
                                                                                                                                       arg10_0040)),
                                                                                                      LrcPtr::new(Spiral::UH3::UH3_1(Func1::new(move
                                                                                                                                                    |arg10_0040_1:
                                                                                                                                                         (string,
                                                                                                                                                          LrcPtr<StringBuilder>,
                                                                                                                                                          i32,
                                                                                                                                                          i32)|
                                                                                                                                                    Spiral::closure39((),
                                                                                                                                                                      arg10_0040_1)),
                                                                                                                                     LrcPtr::new(Spiral::UH3::UH3_0))))));
                                    let v474: Spiral::US19 = match &v463 {
                                        Spiral::US19::US19_0(
                                            v463_0_0,
                                            v463_0_1,
                                            v463_0_2,
                                            v463_0_3,
                                            v463_0_4,
                                        ) => Spiral::US19::US19_0(
                                            string(""),
                                            v463_0_1.clone(),
                                            v463_0_2.clone(),
                                            v463_0_3.clone(),
                                            v463_0_4.clone(),
                                        ),
                                        Spiral::US19::US19_1(v463_1_0) => {
                                            Spiral::US19::US19_1(v463_1_0.clone())
                                        }
                                    };
                                    let v485: Spiral::US26 = match &v474 {
                                        Spiral::US19::US19_0(
                                            v474_0_0,
                                            v474_0_1,
                                            v474_0_2,
                                            v474_0_3,
                                            v474_0_4,
                                        ) => Spiral::method125(
                                            LrcPtr::new(Spiral::UH2::UH2_0),
                                            v474_0_1.clone(),
                                            v474_0_2.clone(),
                                            v474_0_3.clone(),
                                            v474_0_4.clone(),
                                        ),
                                        Spiral::US19::US19_1(v474_1_0) => {
                                            Spiral::US26::US26_1(v474_1_0.clone())
                                        }
                                    };
                                    match &v485 {
                                        Spiral::US26::US26_0(
                                            v485_0_0,
                                            v485_0_1,
                                            v485_0_2,
                                            v485_0_3,
                                            v485_0_4,
                                        ) => {
                                            let v492: List<string> = Spiral::method124(
                                                v485_0_0.clone(),
                                                empty::<string>(),
                                            );
                                            Spiral::US19::US19_0(
                                                join(
                                                    string(""),
                                                    toArray_1(delay(Func0::new({
                                                        let v492 = v492.clone();
                                                        move || ofList(v492.clone()).clone()
                                                    }))),
                                                ),
                                                v485_0_1.clone(),
                                                v485_0_2.clone(),
                                                v485_0_3.clone(),
                                                v485_0_4.clone(),
                                            )
                                        }
                                        Spiral::US26::US26_1(v485_1_0) => {
                                            Spiral::US19::US19_1(v485_1_0.clone())
                                        }
                                    }
                                }
                            }
                        }
                    };
                    match &v522 {
                        Spiral::US19::US19_0(v522_0_0, v522_0_1, v522_0_2, v522_0_3, v522_0_4) => {
                            let v527: i32 = v522_0_4.clone();
                            let v526: i32 = v522_0_3.clone();
                            let v525: LrcPtr<StringBuilder> = v522_0_2.clone();
                            let v524: string = v522_0_1.clone();
                            let v523: string = v522_0_0.clone();
                            let v529: i32 = Spiral::method114(v524.clone(), 0_i32);
                            let v571: Spiral::US21 = if 0_i32 == (v529) {
                                Spiral::US21::US21_1(string(
                                    "parsing.spaces1 / expected at least one space",
                                ))
                            } else {
                                Spiral::US21::US21_0(
                                    getSlice(
                                        v524.clone(),
                                        Some(v529),
                                        Some((length(v524.clone())) - 1_i32),
                                    ),
                                    v525.clone(),
                                    v526,
                                    v527,
                                )
                            };
                            match &v571 {
                                Spiral::US21::US21_0(v571_0_0, v571_0_1, v571_0_2, v571_0_3) => {
                                    let v0_1_temp: LrcPtr<Spiral::UH2> = LrcPtr::new(
                                        Spiral::UH2::UH2_1(v523.clone(), v0_1.get().clone()),
                                    );
                                    let v1_1_temp: string = v571_0_0.clone();
                                    let v2_temp: LrcPtr<StringBuilder> = v571_0_1.clone();
                                    let v3_temp: i32 = v571_0_2.clone();
                                    let v4_temp: i32 = v571_0_3.clone();
                                    v0_1.set(v0_1_temp);
                                    v1_1.set(v1_1_temp);
                                    v2.set(v2_temp);
                                    v3.set(v3_temp);
                                    v4.set(v4_temp);
                                    continue '_method117;
                                }
                                _ => Spiral::US26::US26_0(
                                    Spiral::method123(
                                        v0_1.get().clone(),
                                        LrcPtr::new(Spiral::UH2::UH2_1(
                                            v523.clone(),
                                            LrcPtr::new(Spiral::UH2::UH2_0),
                                        )),
                                    ),
                                    v524.clone(),
                                    v525.clone(),
                                    v526,
                                    v527,
                                ),
                            }
                        }
                        _ => Spiral::US26::US26_0(
                            Spiral::method123(v0_1.get().clone(), LrcPtr::new(Spiral::UH2::UH2_0)),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method116(v0_1: string) -> Spiral::US25 {
            let _v0: MutCell<Option<Option<string>>> = MutCell::new(None::<Option<string>>);
            _v0.set(Some(Some(v0_1)));
            {
                let v22: Spiral::US26 = Spiral::method117(
                    LrcPtr::new(Spiral::UH2::UH2_0),
                    defaultValue(
                        string(""),
                        match &_v0.get().clone() {
                            None => panic!("{}", string("optionm\'.of_obj / _v0=None"),),
                            Some(_v0_0_0) => _v0_0_0.clone(),
                        },
                    ),
                    StringBuilder::_ctor__Z721C83C5(Spiral::method104()),
                    1_i32,
                    1_i32,
                );
                match &v22 {
                    Spiral::US26::US26_0(v22_0_0, v22_0_1, v22_0_2, v22_0_3, v22_0_4) => {
                        Spiral::US25::US25_0(toArray(Spiral::method124(
                            v22_0_0.clone(),
                            empty::<string>(),
                        )))
                    }
                    Spiral::US26::US26_1(v22_1_0) => Spiral::US25::US25_1(v22_1_0.clone()),
                }
            }
        }
        pub fn method127(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: Option<CancellationToken>,
            v4: Array<(string, string)>,
            v5: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v6: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v7: bool,
            v8: Option<string>,
        ) -> string {
            let v10: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v19: () = {
                Spiral::closure7(v10.clone(), string("{ "), ());
                ()
            };
            let v30: () = {
                Spiral::closure7(v10.clone(), string("file_name"), ());
                ()
            };
            let v41: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v50: () = {
                Spiral::closure7(v10.clone(), v0_1, ());
                ()
            };
            let v61: () = {
                Spiral::closure7(v10.clone(), string("; "), ());
                ()
            };
            let v72: () = {
                Spiral::closure7(v10.clone(), string("arguments"), ());
                ()
            };
            let v81: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v90: () = {
                Spiral::closure7(v10.clone(), v1_1, ());
                ()
            };
            let v99: () = {
                Spiral::closure7(v10.clone(), string("; "), ());
                ()
            };
            let v110: () = {
                Spiral::closure7(v10.clone(), string("options"), ());
                ()
            };
            let v119: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v128: () = {
                Spiral::closure7(v10.clone(), string("{ "), ());
                ()
            };
            let v139: () = {
                Spiral::closure7(v10.clone(), string("command"), ());
                ()
            };
            let v148: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v157: () = {
                Spiral::closure7(v10.clone(), v2, ());
                ()
            };
            let v166: () = {
                Spiral::closure7(v10.clone(), string("; "), ());
                ()
            };
            let v177: () = {
                Spiral::closure7(v10.clone(), string("cancellation_token"), ());
                ()
            };
            let v186: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v195: std::string::String = format!("{:#?}", v3);
            let v234: () = {
                Spiral::closure7(
                    v10.clone(),
                    fable_library_rust::String_::fromString(v195),
                    (),
                );
                ()
            };
            let v243: () = {
                Spiral::closure7(v10.clone(), string("; "), ());
                ()
            };
            let v254: () = {
                Spiral::closure7(v10.clone(), string("environment_variables"), ());
                ()
            };
            let v263: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v276: () = {
                Spiral::closure7(v10.clone(), sprintf!("{:?}", v4), ());
                ()
            };
            let v285: () = {
                Spiral::closure7(v10.clone(), string("; "), ());
                ()
            };
            let v296: () = {
                Spiral::closure7(v10.clone(), string("on_line"), ());
                ()
            };
            let v305: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v314: std::string::String = format!("{:#?}", v5);
            let v353: () = {
                Spiral::closure7(
                    v10.clone(),
                    fable_library_rust::String_::fromString(v314),
                    (),
                );
                ()
            };
            let v362: () = {
                Spiral::closure7(v10.clone(), string("; "), ());
                ()
            };
            let v373: () = {
                Spiral::closure7(v10.clone(), string("stdin"), ());
                ()
            };
            let v382: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v391: std::string::String = format!("{:#?}", v6);
            let v430: () = {
                Spiral::closure7(
                    v10.clone(),
                    fable_library_rust::String_::fromString(v391),
                    (),
                );
                ()
            };
            let v439: () = {
                Spiral::closure7(v10.clone(), string("; "), ());
                ()
            };
            let v450: () = {
                Spiral::closure7(v10.clone(), string("trace"), ());
                ()
            };
            let v459: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v471: () = {
                Spiral::closure7(
                    v10.clone(),
                    if v7 { string("true") } else { string("false") },
                    (),
                );
                ()
            };
            let v480: () = {
                Spiral::closure7(v10.clone(), string("; "), ());
                ()
            };
            let v491: () = {
                Spiral::closure7(v10.clone(), string("working_directory"), ());
                ()
            };
            let v500: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v509: std::string::String = format!("{:#?}", v8);
            let v548: () = {
                Spiral::closure7(
                    v10.clone(),
                    fable_library_rust::String_::fromString(v509),
                    (),
                );
                ()
            };
            let v559: () = {
                Spiral::closure7(v10.clone(), string(" }"), ());
                ()
            };
            let v568: () = {
                Spiral::closure7(v10.clone(), string(" }"), ());
                ()
            };
            v10.l0.get().clone()
        }
        pub fn method126(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
            v9: string,
            v10: string,
            v11: Option<CancellationToken>,
            v12: Array<(string, string)>,
            v13: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v14: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v15: bool,
            v16: Option<string>,
        ) -> string {
            let v17: string = Spiral::method127(v8, v9, v10, v11, v12, v13, v14, v15, v16);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("runtime.execute_with_options"),
                v17
            ))
        }
        pub fn closure40(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: string,
            v8: Vec<std::string::String>,
            unitVar: (),
        ) {
            if Spiral::method7(Spiral::US0::US0_1) {
                let v13: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v39: Option<i64> = patternInput.5.clone();
                let v38: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v37: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v36: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v35: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v34: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method126(
                    v34.clone(),
                    v35.clone(),
                    v36.clone(),
                    v37.clone(),
                    v38.clone(),
                    v39.clone(),
                    Spiral::method8(v34, v35, v36, v37, v38, v39),
                    Spiral::method12(),
                    v7,
                    sprintf!("{:?}", v8),
                    v0_1,
                    v1_1,
                    v2,
                    v3,
                    v4,
                    v5,
                    v6,
                ))
            };
        }
        pub fn closure41(
            unitVar: (),
            v0_1: Option<std::process::Child>,
        ) -> Option<std::process::Child> {
            v0_1
        }
        pub fn method128() -> Func1<Option<std::process::Child>, Option<std::process::Child>> {
            Func1::new(move |v: Option<std::process::Child>| Spiral::closure41((), v))
        }
        pub fn closure42(
            unitVar: (),
            v0_1: std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>,
        ) -> Spiral::US27 {
            Spiral::US27::US27_0(v0_1)
        }
        pub fn method129(
        ) -> Func1<std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>, Spiral::US27>
        {
            Func1::new(
                move |v: std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>| {
                    Spiral::closure42((), v)
                },
            )
        }
        pub fn closure43(unitVar: (), v0_1: std::string::String) -> Spiral::US27 {
            Spiral::US27::US27_1(v0_1)
        }
        pub fn method130() -> Func1<std::string::String, Spiral::US27> {
            Func1::new(move |v: std::string::String| Spiral::closure43((), v))
        }
        pub fn method132(
            v0_1: std::string::String,
            v1_1: string,
            v2: string,
            v3: string,
            v4: Option<CancellationToken>,
            v5: Array<(string, string)>,
            v6: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v7: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v8: bool,
            v9: Option<string>,
        ) -> string {
            let v11: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v20: () = {
                Spiral::closure7(v11.clone(), string("{ "), ());
                ()
            };
            let v31: () = {
                Spiral::closure7(v11.clone(), string("error"), ());
                ()
            };
            let v42: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v51: std::string::String = format!("{:#?}", v0_1);
            let v90: () = {
                Spiral::closure7(
                    v11.clone(),
                    fable_library_rust::String_::fromString(v51),
                    (),
                );
                ()
            };
            let v101: () = {
                Spiral::closure7(v11.clone(), string("; "), ());
                ()
            };
            let v112: () = {
                Spiral::closure7(v11.clone(), string("file_name"), ());
                ()
            };
            let v121: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v130: () = {
                Spiral::closure7(v11.clone(), v1_1, ());
                ()
            };
            let v139: () = {
                Spiral::closure7(v11.clone(), string("; "), ());
                ()
            };
            let v150: () = {
                Spiral::closure7(v11.clone(), string("arguments"), ());
                ()
            };
            let v159: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v168: () = {
                Spiral::closure7(v11.clone(), v2, ());
                ()
            };
            let v177: () = {
                Spiral::closure7(v11.clone(), string("; "), ());
                ()
            };
            let v188: () = {
                Spiral::closure7(v11.clone(), string("options"), ());
                ()
            };
            let v197: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v206: () = {
                Spiral::closure7(v11.clone(), string("{ "), ());
                ()
            };
            let v217: () = {
                Spiral::closure7(v11.clone(), string("command"), ());
                ()
            };
            let v226: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v235: () = {
                Spiral::closure7(v11.clone(), v3, ());
                ()
            };
            let v244: () = {
                Spiral::closure7(v11.clone(), string("; "), ());
                ()
            };
            let v255: () = {
                Spiral::closure7(v11.clone(), string("cancellation_token"), ());
                ()
            };
            let v264: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v273: std::string::String = format!("{:#?}", v4);
            let v312: () = {
                Spiral::closure7(
                    v11.clone(),
                    fable_library_rust::String_::fromString(v273),
                    (),
                );
                ()
            };
            let v321: () = {
                Spiral::closure7(v11.clone(), string("; "), ());
                ()
            };
            let v332: () = {
                Spiral::closure7(v11.clone(), string("environment_variables"), ());
                ()
            };
            let v341: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v354: () = {
                Spiral::closure7(v11.clone(), sprintf!("{:?}", v5), ());
                ()
            };
            let v363: () = {
                Spiral::closure7(v11.clone(), string("; "), ());
                ()
            };
            let v374: () = {
                Spiral::closure7(v11.clone(), string("on_line"), ());
                ()
            };
            let v383: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v392: std::string::String = format!("{:#?}", v6);
            let v431: () = {
                Spiral::closure7(
                    v11.clone(),
                    fable_library_rust::String_::fromString(v392),
                    (),
                );
                ()
            };
            let v440: () = {
                Spiral::closure7(v11.clone(), string("; "), ());
                ()
            };
            let v451: () = {
                Spiral::closure7(v11.clone(), string("stdin"), ());
                ()
            };
            let v460: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v469: std::string::String = format!("{:#?}", v7);
            let v508: () = {
                Spiral::closure7(
                    v11.clone(),
                    fable_library_rust::String_::fromString(v469),
                    (),
                );
                ()
            };
            let v517: () = {
                Spiral::closure7(v11.clone(), string("; "), ());
                ()
            };
            let v528: () = {
                Spiral::closure7(v11.clone(), string("trace"), ());
                ()
            };
            let v537: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v549: () = {
                Spiral::closure7(
                    v11.clone(),
                    if v8 { string("true") } else { string("false") },
                    (),
                );
                ()
            };
            let v558: () = {
                Spiral::closure7(v11.clone(), string("; "), ());
                ()
            };
            let v569: () = {
                Spiral::closure7(v11.clone(), string("working_directory"), ());
                ()
            };
            let v578: () = {
                Spiral::closure7(v11.clone(), string(" = "), ());
                ()
            };
            let v587: std::string::String = format!("{:#?}", v9);
            let v626: () = {
                Spiral::closure7(
                    v11.clone(),
                    fable_library_rust::String_::fromString(v587),
                    (),
                );
                ()
            };
            let v637: () = {
                Spiral::closure7(v11.clone(), string(" }"), ());
                ()
            };
            let v646: () = {
                Spiral::closure7(v11.clone(), string(" }"), ());
                ()
            };
            v11.l0.get().clone()
        }
        pub fn method131(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: std::string::String,
            v9: string,
            v10: string,
            v11: string,
            v12: Option<CancellationToken>,
            v13: Array<(string, string)>,
            v14: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v15: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v16: bool,
            v17: Option<string>,
        ) -> string {
            let v18: string = Spiral::method132(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("runtime.execute_with_options / child error"),
                v18
            ))
        }
        pub fn closure44(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: string,
            v8: Vec<std::string::String>,
            v9: std::string::String,
            unitVar: (),
        ) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v14: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v40: Option<i64> = patternInput.5.clone();
                let v39: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v38: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v37: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v36: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v35: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method131(
                    v35.clone(),
                    v36.clone(),
                    v37.clone(),
                    v38.clone(),
                    v39.clone(),
                    v40.clone(),
                    Spiral::method8(v35, v36, v37, v38, v39, v40),
                    Spiral::method82(),
                    v9,
                    v7,
                    sprintf!("{:?}", v8),
                    v0_1,
                    v1_1,
                    v2,
                    v3,
                    v4,
                    v5,
                    v6,
                ))
            };
        }
        pub fn method133(
            v0_1: std::sync::MutexGuard<Option<std::process::Child>>,
        ) -> std::sync::MutexGuard<Option<std::process::Child>> {
            v0_1
        }
        pub fn closure45(
            unitVar: (),
            v0_1: Option<std::process::ChildStdin>,
        ) -> Option<std::process::ChildStdin> {
            v0_1
        }
        pub fn method134(
        ) -> Func1<Option<std::process::ChildStdin>, Option<std::process::ChildStdin>> {
            Func1::new(move |v: Option<std::process::ChildStdin>| Spiral::closure45((), v))
        }
        pub fn closure46(
            unitVar: (),
            v0_1: std::sync::mpsc::Sender<std::string::String>,
        ) -> std::sync::mpsc::Sender<std::string::String> {
            v0_1
        }
        pub fn method135() -> Func1<
            std::sync::mpsc::Sender<std::string::String>,
            std::sync::mpsc::Sender<std::string::String>,
        > {
            Func1::new(move |v: std::sync::mpsc::Sender<std::string::String>| {
                Spiral::closure46((), v)
            })
        }
        pub fn method136() -> Func1<
            std::sync::mpsc::Sender<std::string::String>,
            std::sync::mpsc::Sender<std::string::String>,
        > {
            Func1::new(move |v: std::sync::mpsc::Sender<std::string::String>| {
                Spiral::closure46((), v)
            })
        }
        pub fn closure47(
            unitVar: (),
            v0_1: std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
        ) -> std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>> {
            v0_1
        }
        pub fn method137() -> Func1<
            std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
            std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
        > {
            Func1::new(
                move |v: std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>| {
                    Spiral::closure47((), v)
                },
            )
        }
        pub fn closure48(unitVar: (), v0_1: std::string::String) -> Spiral::US29 {
            Spiral::US29::US29_0(v0_1)
        }
        pub fn method138() -> Func1<std::string::String, Spiral::US29> {
            Func1::new(move |v: std::string::String| Spiral::closure48((), v))
        }
        pub fn closure49(unitVar: (), v0_1: std::string::String) -> Spiral::US29 {
            Spiral::US29::US29_1(v0_1)
        }
        pub fn method139() -> Func1<std::string::String, Spiral::US29> {
            Func1::new(move |v: std::string::String| Spiral::closure49((), v))
        }
        pub fn method141(v0_1: bool, v1_1: std::string::String) -> string {
            let v3: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v12: () = {
                Spiral::closure7(v3.clone(), string("{ "), ());
                ()
            };
            let v23: () = {
                Spiral::closure7(v3.clone(), string("trace\'"), ());
                ()
            };
            let v34: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v46: () = {
                Spiral::closure7(
                    v3.clone(),
                    if v0_1 {
                        string("true")
                    } else {
                        string("false")
                    },
                    (),
                );
                ()
            };
            let v57: () = {
                Spiral::closure7(v3.clone(), string("; "), ());
                ()
            };
            let v68: () = {
                Spiral::closure7(v3.clone(), string("e"), ());
                ()
            };
            let v77: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v86: std::string::String = format!("{:#?}", v1_1);
            let v125: () = {
                Spiral::closure7(v3.clone(), fable_library_rust::String_::fromString(v86), ());
                ()
            };
            let v136: () = {
                Spiral::closure7(v3.clone(), string(" }"), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method140(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: bool,
            v9: std::string::String,
        ) -> string {
            let v10: string = Spiral::method141(v8, v9);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("runtime.stdio_line"),
                v10
            ))
        }
        pub fn closure50(v0_1: bool, v1_1: std::string::String, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v6: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v32: Option<i64> = patternInput.5.clone();
                let v31: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v30: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v29: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v28: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v27: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method140(
                    v27.clone(),
                    v28.clone(),
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    Spiral::method8(v27, v28, v29, v30, v31, v32),
                    Spiral::method82(),
                    v0_1,
                    v1_1,
                ))
            };
        }
        pub fn method143() -> string {
            let v1_1: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            v1_1.l0.get().clone()
        }
        pub fn method142(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
        ) -> string {
            let v9: string = Spiral::method143();
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                v8,
                v9
            ))
        }
        pub fn closure51(v0_1: string, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_0) {
                let v5: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v31: Option<i64> = patternInput.5.clone();
                let v30: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v29: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v28: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v27: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v26: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(if (v0_1.clone()) == string("") {
                    string("")
                } else {
                    Spiral::method142(
                        v26.clone(),
                        v27.clone(),
                        v28.clone(),
                        v29.clone(),
                        v30.clone(),
                        v31.clone(),
                        Spiral::method8(v26, v27, v28, v29, v30, v31),
                        Spiral::method85(),
                        v0_1,
                    )
                })
            };
        }
        pub fn closure52(
            unitVar: (),
            v0_1: std::sync::mpsc::SendError<std::string::String>,
        ) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method144(
        ) -> Func1<std::sync::mpsc::SendError<std::string::String>, std::string::String> {
            Func1::new(move |v: std::sync::mpsc::SendError<std::string::String>| {
                Spiral::closure52((), v)
            })
        }
        pub fn method145(v0_1: Result<(), string>) -> Result<(), string> {
            v0_1
        }
        pub fn closure53(
            unitVar: (),
            v0_1: Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>,
        ) -> Spiral::US30 {
            Spiral::US30::US30_0(v0_1)
        }
        pub fn method146() -> Func1<
            Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>,
            Spiral::US30,
        > {
            Func1::new(
                move |v: Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>| {
                    Spiral::closure53((), v)
                },
            )
        }
        pub fn method147(
            v0_1: std::sync::MutexGuard<Option<std::process::ChildStdin>>,
        ) -> std::sync::MutexGuard<Option<std::process::ChildStdin>> {
            v0_1
        }
        pub fn closure54(
            unitVar: (),
            v0_1: std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
        ) -> Spiral::US31 {
            Spiral::US31::US31_0(v0_1)
        }
        pub fn method148(
        ) -> Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, Spiral::US31>
        {
            Func1::new(
                move |v: std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>| {
                    Spiral::closure54((), v)
                },
            )
        }
        pub fn method149(
            v0_1: std::sync::MutexGuard<std::process::ChildStdin>,
        ) -> std::sync::MutexGuard<std::process::ChildStdin> {
            v0_1
        }
        pub fn closure55(unitVar: (), v0_1: std::process::Output) -> Spiral::US32 {
            Spiral::US32::US32_0(v0_1)
        }
        pub fn method150() -> Func1<std::process::Output, Spiral::US32> {
            Func1::new(move |v: std::process::Output| Spiral::closure55((), v))
        }
        pub fn closure56(unitVar: (), v0_1: std::string::String) -> Spiral::US32 {
            Spiral::US32::US32_1(v0_1)
        }
        pub fn method151() -> Func1<std::string::String, Spiral::US32> {
            Func1::new(move |v: std::string::String| Spiral::closure56((), v))
        }
        pub fn method152(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: std::string::String,
            v9: string,
            v10: string,
            v11: string,
            v12: Option<CancellationToken>,
            v13: Array<(string, string)>,
            v14: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v15: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v16: bool,
            v17: Option<string>,
        ) -> string {
            let v18: string = Spiral::method132(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("runtime.execute_with_options / output error"),
                v18
            ))
        }
        pub fn closure57(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: string,
            v8: Vec<std::string::String>,
            v9: std::string::String,
            unitVar: (),
        ) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v14: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v40: Option<i64> = patternInput.5.clone();
                let v39: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v38: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v37: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v36: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v35: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method152(
                    v35.clone(),
                    v36.clone(),
                    v37.clone(),
                    v38.clone(),
                    v39.clone(),
                    v40.clone(),
                    Spiral::method8(v35, v36, v37, v38, v39, v40),
                    Spiral::method82(),
                    v9,
                    v7,
                    sprintf!("{:?}", v8),
                    v0_1,
                    v1_1,
                    v2,
                    v3,
                    v4,
                    v5,
                    v6,
                ))
            };
        }
        pub fn closure58(unitVar: (), v0_1: i32) -> Spiral::US33 {
            Spiral::US33::US33_0(v0_1)
        }
        pub fn method153() -> Func1<i32, Spiral::US33> {
            Func1::new(move |v: i32| Spiral::closure58((), v))
        }
        pub fn method155(v0_1: i32, v1_1: i32) -> string {
            let v3: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v12: () = {
                Spiral::closure7(v3.clone(), string("{ "), ());
                ()
            };
            let v23: () = {
                Spiral::closure7(v3.clone(), string("exit_code"), ());
                ()
            };
            let v34: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v43: () = {
                Spiral::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v54: () = {
                Spiral::closure7(v3.clone(), string("; "), ());
                ()
            };
            let v65: () = {
                Spiral::closure7(v3.clone(), string("std_trace_length"), ());
                ()
            };
            let v74: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v83: () = {
                Spiral::closure7(v3.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v94: () = {
                Spiral::closure7(v3.clone(), string(" }"), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method154(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: i32,
        ) -> string {
            let v10: string = Spiral::method155(v8, v9);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("runtime.execute_with_options / result"),
                v10
            ))
        }
        pub fn closure59(v0_1: i32, v1_1: string, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_0) {
                let v6: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v32: Option<i64> = patternInput.5.clone();
                let v31: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v30: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v29: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v28: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v27: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method154(
                    v27.clone(),
                    v28.clone(),
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    Spiral::method8(v27, v28, v29, v30, v31, v32),
                    Spiral::method85(),
                    v0_1,
                    length(v1_1),
                ))
            };
        }
        pub fn method159(
            v0_1: string,
            v1_1: Spiral::US5,
            v2: string,
            v3: Option<CancellationToken>,
            v4: Array<(string, string)>,
            v5: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v6: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v7: bool,
            v8: Option<string>,
        ) -> string {
            let v10: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v19: () = {
                Spiral::closure7(v10.clone(), string("{ "), ());
                ()
            };
            let v30: () = {
                Spiral::closure7(v10.clone(), string("file_name"), ());
                ()
            };
            let v41: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v50: () = {
                Spiral::closure7(v10.clone(), v0_1, ());
                ()
            };
            let v61: () = {
                Spiral::closure7(v10.clone(), string("; "), ());
                ()
            };
            let v72: () = {
                Spiral::closure7(v10.clone(), string("arguments"), ());
                ()
            };
            let v81: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v94: () = {
                Spiral::closure7(v10.clone(), sprintf!("{:?}", v1_1), ());
                ()
            };
            let v103: () = {
                Spiral::closure7(v10.clone(), string("; "), ());
                ()
            };
            let v114: () = {
                Spiral::closure7(v10.clone(), string("options"), ());
                ()
            };
            let v123: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v132: () = {
                Spiral::closure7(v10.clone(), string("{ "), ());
                ()
            };
            let v143: () = {
                Spiral::closure7(v10.clone(), string("command"), ());
                ()
            };
            let v152: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v161: () = {
                Spiral::closure7(v10.clone(), v2, ());
                ()
            };
            let v170: () = {
                Spiral::closure7(v10.clone(), string("; "), ());
                ()
            };
            let v181: () = {
                Spiral::closure7(v10.clone(), string("cancellation_token"), ());
                ()
            };
            let v190: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v199: std::string::String = format!("{:#?}", v3);
            let v238: () = {
                Spiral::closure7(
                    v10.clone(),
                    fable_library_rust::String_::fromString(v199),
                    (),
                );
                ()
            };
            let v247: () = {
                Spiral::closure7(v10.clone(), string("; "), ());
                ()
            };
            let v258: () = {
                Spiral::closure7(v10.clone(), string("environment_variables"), ());
                ()
            };
            let v267: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v280: () = {
                Spiral::closure7(v10.clone(), sprintf!("{:?}", v4), ());
                ()
            };
            let v289: () = {
                Spiral::closure7(v10.clone(), string("; "), ());
                ()
            };
            let v300: () = {
                Spiral::closure7(v10.clone(), string("on_line"), ());
                ()
            };
            let v309: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v318: std::string::String = format!("{:#?}", v5);
            let v357: () = {
                Spiral::closure7(
                    v10.clone(),
                    fable_library_rust::String_::fromString(v318),
                    (),
                );
                ()
            };
            let v366: () = {
                Spiral::closure7(v10.clone(), string("; "), ());
                ()
            };
            let v377: () = {
                Spiral::closure7(v10.clone(), string("stdin"), ());
                ()
            };
            let v386: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v395: std::string::String = format!("{:#?}", v6);
            let v434: () = {
                Spiral::closure7(
                    v10.clone(),
                    fable_library_rust::String_::fromString(v395),
                    (),
                );
                ()
            };
            let v443: () = {
                Spiral::closure7(v10.clone(), string("; "), ());
                ()
            };
            let v454: () = {
                Spiral::closure7(v10.clone(), string("trace"), ());
                ()
            };
            let v463: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v475: () = {
                Spiral::closure7(
                    v10.clone(),
                    if v7 { string("true") } else { string("false") },
                    (),
                );
                ()
            };
            let v484: () = {
                Spiral::closure7(v10.clone(), string("; "), ());
                ()
            };
            let v495: () = {
                Spiral::closure7(v10.clone(), string("working_directory"), ());
                ()
            };
            let v504: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v513: std::string::String = format!("{:#?}", v8);
            let v552: () = {
                Spiral::closure7(
                    v10.clone(),
                    fable_library_rust::String_::fromString(v513),
                    (),
                );
                ()
            };
            let v563: () = {
                Spiral::closure7(v10.clone(), string(" }"), ());
                ()
            };
            let v572: () = {
                Spiral::closure7(v10.clone(), string(" }"), ());
                ()
            };
            v10.l0.get().clone()
        }
        pub fn method158(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
            v9: Spiral::US5,
            v10: string,
            v11: Option<CancellationToken>,
            v12: Array<(string, string)>,
            v13: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v14: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v15: bool,
            v16: Option<string>,
        ) -> string {
            let v17: string = Spiral::method159(v8, v9, v10, v11, v12, v13, v14, v15, v16);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("runtime.execute_with_options_async"),
                v17
            ))
        }
        pub fn closure60(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: Spiral::US5,
            v8: string,
            unitVar: (),
        ) {
            if Spiral::method7(Spiral::US0::US0_1) {
                let v13: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v39: Option<i64> = patternInput.5.clone();
                let v38: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v37: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v36: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v35: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v34: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method158(
                    v34.clone(),
                    v35.clone(),
                    v36.clone(),
                    v37.clone(),
                    v38.clone(),
                    v39.clone(),
                    Spiral::method8(v34, v35, v36, v37, v38, v39),
                    Spiral::method12(),
                    v8,
                    v7,
                    v0_1,
                    v1_1,
                    v2,
                    v3,
                    v4,
                    v5,
                    v6,
                ))
            };
        }
        pub fn method160(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
        ) -> Array<(string, string)> {
            v2
        }
        pub fn method163(v0_1: bool) -> string {
            unbox::<string>(fable_library_rust::Native_::getZero())
        }
        pub fn closure62(
            unitVar: (),
            v0_1: Func1<(i32, string, bool), Arc<Async<()>>>,
        ) -> Spiral::US34 {
            Spiral::US34::US34_0(v0_1)
        }
        pub fn method164() -> Func1<Func1<(i32, string, bool), Arc<Async<()>>>, Spiral::US34> {
            Func1::new(move |v: Func1<(i32, string, bool), Arc<Async<()>>>| {
                Spiral::closure62((), v)
            })
        }
        pub fn method165(v0_1: bool) -> i32 {
            unbox::<i32>(fable_library_rust::Native_::getZero())
        }
        pub fn closure63(v0_1: string, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_0) {
                let v5: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v31: Option<i64> = patternInput.5.clone();
                let v30: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v29: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v28: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v27: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v26: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(if (v0_1.clone()) == string("") {
                    string("")
                } else {
                    Spiral::method142(
                        v26.clone(),
                        v27.clone(),
                        v28.clone(),
                        v29.clone(),
                        v30.clone(),
                        v31.clone(),
                        Spiral::method8(v26, v27, v28, v29, v30, v31),
                        Spiral::method85(),
                        v0_1,
                    )
                })
            };
        }
        pub fn method162(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: bool,
            v8: LrcPtr<ConcurrentStack_1<string>>,
            v9: bool,
            v10: bool,
        ) -> Arc<Async<()>> {
            fable_library_rust::Native_::getZero()
        }
        pub fn method161(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: bool,
            v8: LrcPtr<ConcurrentStack_1<string>>,
            v9: bool,
            v10: bool,
        ) -> Arc<Async<()>> {
            Spiral::method162(v0_1, v1_1, v2, v3, v4, v5, v6, v7, v8, v9, v10)
        }
        pub fn closure61(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: bool,
            v8: LrcPtr<ConcurrentStack_1<string>>,
            v9: bool,
            v10: bool,
        ) {
            let v11: Arc<Async<()>> =
                Spiral::method161(v0_1, v1_1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
            fable_library_rust::Native_::getZero::<()>();
            ()
        }
        pub fn closure64(unitVar: (), v0_1: CancellationToken) -> Spiral::US35 {
            Spiral::US35::US35_0(v0_1)
        }
        pub fn method166() -> Func1<CancellationToken, Spiral::US35> {
            Func1::new(move |v: CancellationToken| Spiral::closure64((), v))
        }
        pub fn method167(v0_1: CancellationToken) -> Arc<Async<CancellationToken>> {
            fable_library_rust::Native_::getZero()
        }
        pub fn method168(v0_1: bool) -> bool {
            unbox::<bool>(fable_library_rust::Native_::getZero())
        }
        pub fn method169(v0_1: bool) {
            ();
        }
        pub fn closure65(v0_1: bool, unitVar: ()) {
            if (Spiral::method168(v0_1)) == false {
                Spiral::method169(v0_1);
            };
        }
        pub fn method172(v0_1: LrcPtr<TaskCanceledException>) -> string {
            let v2: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v11: () = {
                Spiral::closure7(v2.clone(), string("{ "), ());
                ()
            };
            let v22: () = {
                Spiral::closure7(v2.clone(), string("ex"), ());
                ()
            };
            let v33: () = {
                Spiral::closure7(v2.clone(), string(" = "), ());
                ()
            };
            let v42: std::string::String = format!("{:#?}", v0_1);
            let v81: () = {
                Spiral::closure7(v2.clone(), fable_library_rust::String_::fromString(v42), ());
                ()
            };
            let v92: () = {
                Spiral::closure7(v2.clone(), string(" }"), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method171(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: LrcPtr<TaskCanceledException>,
        ) -> string {
            let v9: string = Spiral::method172(v8);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("runtime.execute_with_options_async / WaitForExitAsync"),
                v9
            ))
        }
        pub fn closure66(v0_1: LrcPtr<TaskCanceledException>, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_3) {
                let v5: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v31: Option<i64> = patternInput.5.clone();
                let v30: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v29: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v28: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v27: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v26: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method171(
                    v26.clone(),
                    v27.clone(),
                    v28.clone(),
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    Spiral::method8(v26, v27, v28, v29, v30, v31),
                    Spiral::method43(),
                    v0_1,
                ))
            };
        }
        pub fn method170(
            v0_1: bool,
            v1_1: LrcPtr<ConcurrentStack_1<string>>,
            v2: CancellationToken,
        ) -> Arc<Async<i32>> {
            fable_library_rust::Native_::getZero()
        }
        pub fn method174(
            v0_1: i32,
            v1_1: i32,
            v2: string,
            v3: Option<CancellationToken>,
            v4: Array<(string, string)>,
            v5: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v6: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v7: bool,
            v8: Option<string>,
        ) -> string {
            let v10: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v19: () = {
                Spiral::closure7(v10.clone(), string("{ "), ());
                ()
            };
            let v30: () = {
                Spiral::closure7(v10.clone(), string("exit_code"), ());
                ()
            };
            let v41: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v50: () = {
                Spiral::closure7(v10.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v61: () = {
                Spiral::closure7(v10.clone(), string("; "), ());
                ()
            };
            let v72: () = {
                Spiral::closure7(v10.clone(), string("output_length"), ());
                ()
            };
            let v81: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v90: () = {
                Spiral::closure7(v10.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v99: () = {
                Spiral::closure7(v10.clone(), string("; "), ());
                ()
            };
            let v110: () = {
                Spiral::closure7(v10.clone(), string("options"), ());
                ()
            };
            let v119: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v128: () = {
                Spiral::closure7(v10.clone(), string("{ "), ());
                ()
            };
            let v139: () = {
                Spiral::closure7(v10.clone(), string("command"), ());
                ()
            };
            let v148: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v157: () = {
                Spiral::closure7(v10.clone(), v2, ());
                ()
            };
            let v166: () = {
                Spiral::closure7(v10.clone(), string("; "), ());
                ()
            };
            let v177: () = {
                Spiral::closure7(v10.clone(), string("cancellation_token"), ());
                ()
            };
            let v186: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v195: std::string::String = format!("{:#?}", v3);
            let v234: () = {
                Spiral::closure7(
                    v10.clone(),
                    fable_library_rust::String_::fromString(v195),
                    (),
                );
                ()
            };
            let v243: () = {
                Spiral::closure7(v10.clone(), string("; "), ());
                ()
            };
            let v254: () = {
                Spiral::closure7(v10.clone(), string("environment_variables"), ());
                ()
            };
            let v263: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v276: () = {
                Spiral::closure7(v10.clone(), sprintf!("{:?}", v4), ());
                ()
            };
            let v285: () = {
                Spiral::closure7(v10.clone(), string("; "), ());
                ()
            };
            let v296: () = {
                Spiral::closure7(v10.clone(), string("on_line"), ());
                ()
            };
            let v305: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v314: std::string::String = format!("{:#?}", v5);
            let v353: () = {
                Spiral::closure7(
                    v10.clone(),
                    fable_library_rust::String_::fromString(v314),
                    (),
                );
                ()
            };
            let v362: () = {
                Spiral::closure7(v10.clone(), string("; "), ());
                ()
            };
            let v373: () = {
                Spiral::closure7(v10.clone(), string("stdin"), ());
                ()
            };
            let v382: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v391: std::string::String = format!("{:#?}", v6);
            let v430: () = {
                Spiral::closure7(
                    v10.clone(),
                    fable_library_rust::String_::fromString(v391),
                    (),
                );
                ()
            };
            let v439: () = {
                Spiral::closure7(v10.clone(), string("; "), ());
                ()
            };
            let v450: () = {
                Spiral::closure7(v10.clone(), string("trace"), ());
                ()
            };
            let v459: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v471: () = {
                Spiral::closure7(
                    v10.clone(),
                    if v7 { string("true") } else { string("false") },
                    (),
                );
                ()
            };
            let v480: () = {
                Spiral::closure7(v10.clone(), string("; "), ());
                ()
            };
            let v491: () = {
                Spiral::closure7(v10.clone(), string("working_directory"), ());
                ()
            };
            let v500: () = {
                Spiral::closure7(v10.clone(), string(" = "), ());
                ()
            };
            let v509: std::string::String = format!("{:#?}", v8);
            let v548: () = {
                Spiral::closure7(
                    v10.clone(),
                    fable_library_rust::String_::fromString(v509),
                    (),
                );
                ()
            };
            let v559: () = {
                Spiral::closure7(v10.clone(), string(" }"), ());
                ()
            };
            let v568: () = {
                Spiral::closure7(v10.clone(), string(" }"), ());
                ()
            };
            v10.l0.get().clone()
        }
        pub fn method173(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: i32,
            v10: string,
            v11: Option<CancellationToken>,
            v12: Array<(string, string)>,
            v13: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v14: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v15: bool,
            v16: Option<string>,
        ) -> string {
            let v17: string = Spiral::method174(v8, v9, v10, v11, v12, v13, v14, v15, v16);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("runtime.execute_with_options_async"),
                v17
            ))
        }
        pub fn closure67(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: i32,
            v8: string,
            unitVar: (),
        ) {
            if Spiral::method7(Spiral::US0::US0_1) {
                let v13: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v39: Option<i64> = patternInput.5.clone();
                let v38: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v37: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v36: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v35: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v34: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method173(
                    v34.clone(),
                    v35.clone(),
                    v36.clone(),
                    v37.clone(),
                    v38.clone(),
                    v39.clone(),
                    Spiral::method8(v34, v35, v36, v37, v38, v39),
                    Spiral::method12(),
                    v7,
                    length(v8),
                    v0_1,
                    v1_1,
                    v2,
                    v3,
                    v4,
                    v5,
                    v6,
                ))
            };
        }
        pub fn method157(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
        ) -> Arc<Async<(i32, string)>> {
            fable_library_rust::Native_::getZero()
        }
        pub fn method156(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
        ) -> Arc<Async<(i32, string)>> {
            Spiral::method157(v0_1, v1_1, v2, v3, v4, v5, v6)
        }
        pub fn method101(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
        ) -> (i32, string) {
            let v17: Spiral::US17 = Spiral::method103(Spiral::method102(
                v0_1.clone(),
                v1_1.clone(),
                v2.clone(),
                v3.clone(),
                v4.clone(),
                v5,
                v6.clone(),
            ));
            let patternInput: (string, Spiral::US5) = match &v17 {
                Spiral::US17::US17_0(v17_0_0, v17_0_1) => (v17_0_0.clone(), v17_0_1.clone()),
                Spiral::US17::US17_1(v17_1_0) => panic!(
                    "{}",
                    concat(new_array(&[
                        string("resultm.get / Result value was Error: "),
                        v17_1_0.clone()
                    ])),
                ),
            };
            let v30: Spiral::US5 = patternInput.1.clone();
            let v29: string = patternInput.0.clone();
            let v35: Spiral::US25 = Spiral::method116(match &v30 {
                Spiral::US5::US5_0(v30_0_0) => match &v30 {
                    Spiral::US5::US5_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => string(""),
            });
            let v44: Array<string> = match &v35 {
                Spiral::US25::US25_0(v35_0_0) => v35_0_0.clone(),
                Spiral::US25::US25_1(v35_1_0) => panic!(
                    "{}",
                    concat(new_array(&[
                        string("resultm.get / Result value was Error: "),
                        v35_1_0.clone()
                    ])),
                ),
            };
            let v46: Vec<string> = v44.to_vec();
            let v48: bool = true;
            let _vec_map: Vec<_> = v46
                .into_iter()
                .map(|x| {
                    //;
                    let v50: string = x;
                    let v57: &str = &*v50;
                    let v90: std::string::String = String::from(v57);
                    let v118: bool = true;
                    v90
                })
                .collect::<Vec<_>>();
            let v120: Vec<std::string::String> = _vec_map;
            let v123: () = {
                Spiral::closure40(
                    v0_1.clone(),
                    v1_1.clone(),
                    v2.clone(),
                    v3.clone(),
                    v4.clone(),
                    v5,
                    v6.clone(),
                    v29.clone(),
                    v120.clone(),
                    (),
                );
                ()
            };
            let _capture_v175: MutCell<Option<LrcPtr<(i32, string)>>> =
                MutCell::new(None::<LrcPtr<(i32, string)>>);
            {
                let x_5: LrcPtr<(i32, string)> = (Func0::new({
                    let v0_1 = v0_1.clone();
                    let v120 = v120.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    let v29 = v29.clone();
                    let v3 = v3.clone();
                    let v4 = v4.clone();
                    let v5 = v5.clone();
                    let v6 = v6.clone();
                    move || {
                        let v177: std::process::Command = std::process::Command::new(&*v29.clone());
                        let v179: bool = true;
                        let mut v177 = v177;
                        let v181: bool = true;
                        std::process::Command::args(&mut v177, &*v120.clone());
                        let v183: std::process::Command = v177;
                        let v185: std::process::Stdio = std::process::Stdio::piped();
                        let v187: bool = true;
                        let mut v183 = v183;
                        let v189: bool = true;
                        std::process::Command::stdout(&mut v183, std::process::Stdio::piped());
                        let v191: std::process::Command = v183;
                        let v193: std::process::Stdio = std::process::Stdio::piped();
                        let v195: bool = true;
                        let mut v191 = v191;
                        let v197: bool = true;
                        std::process::Command::stderr(&mut v191, std::process::Stdio::piped());
                        let v199: std::process::Command = v191;
                        let v201: std::process::Stdio = std::process::Stdio::piped();
                        let v203: bool = true;
                        let mut v199 = v199;
                        let v205: bool = true;
                        std::process::Command::stdin(&mut v199, std::process::Stdio::piped());
                        let v207: std::process::Command = v199;
                        let v232: Spiral::US5 =
                            defaultValue(Spiral::US5::US5_1, map(Spiral::method6(), v6.clone()));
                        let v246: std::process::Command = match &v232 {
                            Spiral::US5::US5_0(v232_0_0) => {
                                let v238: bool = true;
                                let mut v207 = v207;
                                let v240: bool = true;
                                std::process::Command::current_dir(
                                    &mut v207,
                                    &*match &v232 {
                                        Spiral::US5::US5_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                );
                                v207
                            }
                            _ => v207,
                        };
                        let v268: std::process::Command = if (get_Count(v2.clone()) as u64) == 0_u64
                        {
                            v246
                        } else {
                            let v250: Vec<(string, string)> = v2.clone().to_vec();
                            let v252: bool = true;
                            let _vec_fold_ = v250.into_iter().fold(v246, |acc, x| {
                                //;
                                let v254: std::process::Command = acc;
                                let patternInput_1: (string, string) = x;
                                let v259: bool = true;
                                let mut v254 = v254;
                                let v261: bool = true;
                                std::process::Command::env(
                                    &mut v254,
                                    &*patternInput_1.0.clone(),
                                    &*patternInput_1.1.clone(),
                                );
                                let v263: std::process::Command = v254;
                                let v265: bool = true;
                                v263
                            });
                            _vec_fold_
                        };
                        let v270: bool = true;
                        let mut v268 = v268;
                        let v272: Result<std::process::Child, std::io::Error> =
                            std::process::Command::spawn(&mut v268);
                        let v273 = Spiral::method79();
                        let v277: Result<std::process::Child, std::string::String> =
                            v272.map_err(|x| v273(x));
                        let v289 = Spiral::method128();
                        let v291: bool = true;
                        let _result_map_ = v277.map(|x| {
                            //;
                            let v298: Option<std::process::Child> = v289(Some(x));
                            let v300: std::sync::Mutex<Option<std::process::Child>> =
                                std::sync::Mutex::new(v298);
                            let v302: std::sync::Arc<
                                std::sync::Mutex<Option<std::process::Child>>,
                            > = std::sync::Arc::new(v300);
                            let v304: bool = true;
                            v302
                        });
                        let v306: Result<
                            std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>,
                            std::string::String,
                        > = _result_map_;
                        let v307 = Spiral::method129();
                        let v308 = Spiral::method130();
                        let v310: Spiral::US27 = match v306 {
                            Ok(x) => v307(x),
                            Err(e) => v308(e),
                        };
                        let patternInput_3: (i32, Spiral::US7, Spiral::US28) = match &v310 {
                            Spiral::US27::US27_0(v310_0_0) => {
                                let v311: std::sync::Arc<
                                    std::sync::Mutex<Option<std::process::Child>>,
                                > = v310_0_0.clone();
                                let v313: bool = true;
                                let _capture = (|| {
                                    //;
                                    let v315: std::sync::Arc<
                                        std::sync::Mutex<Option<std::process::Child>>,
                                    > = v311.clone();
                                    let v317: Result<
                                        std::sync::MutexGuard<Option<std::process::Child>>,
                                        std::sync::PoisonError<
                                            std::sync::MutexGuard<Option<std::process::Child>>,
                                        >,
                                    > = v315.lock();
                                    let v333: std::sync::MutexGuard<Option<std::process::Child>> =
                                        Spiral::method133(v317.unwrap());
                                    let v335: bool = true;
                                    let mut v333 = v333;
                                    let v337: &mut Option<std::process::Child> = &mut v333;
                                    let v339: Option<&mut std::process::Child> = v337.as_mut();
                                    let v341: &mut std::process::Child = v339.unwrap();
                                    let v343: &mut Option<std::process::ChildStdout> =
                                        &mut v341.stdout;
                                    let v345: Option<std::process::ChildStdout> =
                                        Option::take(v343);
                                    let v347: std::process::ChildStdout = v345.unwrap();
                                    let v349: bool = true;
                                    v347
                                })();
                                let v351: std::process::ChildStdout = _capture;
                                let v353: bool = true;
                                let _capture = (|| {
                                    //;
                                    let v355: std::sync::Arc<
                                        std::sync::Mutex<Option<std::process::Child>>,
                                    > = v311.clone();
                                    let v357: Result<
                                        std::sync::MutexGuard<Option<std::process::Child>>,
                                        std::sync::PoisonError<
                                            std::sync::MutexGuard<Option<std::process::Child>>,
                                        >,
                                    > = v355.lock();
                                    let v373: std::sync::MutexGuard<Option<std::process::Child>> =
                                        Spiral::method133(v357.unwrap());
                                    let v375: bool = true;
                                    let mut v373 = v373;
                                    let v377: &mut Option<std::process::Child> = &mut v373;
                                    let v379: Option<&mut std::process::Child> = v377.as_mut();
                                    let v381: &mut std::process::Child = v379.unwrap();
                                    let v383: &mut Option<std::process::ChildStderr> =
                                        &mut v381.stderr;
                                    let v385: Option<std::process::ChildStderr> =
                                        Option::take(v383);
                                    let v387: std::process::ChildStderr = v385.unwrap();
                                    let v389: bool = true;
                                    v387
                                })();
                                let v391: std::process::ChildStderr = _capture;
                                let v393: bool = true;
                                let _capture = (|| {
                                    //;
                                    let v395: std::sync::Arc<
                                        std::sync::Mutex<Option<std::process::Child>>,
                                    > = v311.clone();
                                    let v397: Result<
                                        std::sync::MutexGuard<Option<std::process::Child>>,
                                        std::sync::PoisonError<
                                            std::sync::MutexGuard<Option<std::process::Child>>,
                                        >,
                                    > = v395.lock();
                                    let v413: std::sync::MutexGuard<Option<std::process::Child>> =
                                        Spiral::method133(v397.unwrap());
                                    let v415: bool = true;
                                    let mut v413 = v413;
                                    let v417: &mut Option<std::process::Child> = &mut v413;
                                    let v419: Option<&mut std::process::Child> = v417.as_mut();
                                    let v421: &mut std::process::Child = v419.unwrap();
                                    let v423: &mut Option<std::process::ChildStdin> =
                                        &mut v421.stdin;
                                    let v425: Option<std::process::ChildStdin> = Option::take(v423);
                                    let v427: std::process::ChildStdin = v425.unwrap();
                                    let v433: Option<std::process::ChildStdin> =
                                        (Spiral::method134())(Some(v427));
                                    let v435: std::sync::Mutex<Option<std::process::ChildStdin>> =
                                        std::sync::Mutex::new(v433);
                                    let v437: std::sync::Arc<
                                        std::sync::Mutex<Option<std::process::ChildStdin>>,
                                    > = std::sync::Arc::new(v435);
                                    let v439: bool = true;
                                    v437
                                })();
                                let v441: std::sync::Arc<
                                    std::sync::Mutex<Option<std::process::ChildStdin>>,
                                > = _capture;
                                let patternInput_2: (
                                    std::sync::mpsc::Sender<std::string::String>,
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                ) = {
                                    let (sender, receiver) = std::sync::mpsc::channel();
                                    (sender, std::sync::Arc::new(receiver))
                                };
                                let v443: std::sync::mpsc::Sender<std::string::String> =
                                    patternInput_2.0.clone();
                                let v446: std::sync::mpsc::Sender<std::string::String> =
                                    (Spiral::method135())(v443.clone());
                                let v448: std::sync::Mutex<
                                    std::sync::mpsc::Sender<std::string::String>,
                                > = std::sync::Mutex::new(v446);
                                let v450: std::sync::Arc<
                                    std::sync::Mutex<std::sync::mpsc::Sender<std::string::String>>,
                                > = std::sync::Arc::new(v448);
                                let v452: std::sync::mpsc::Sender<std::string::String> =
                                    (Spiral::method136())(v443);
                                let v454: std::sync::Mutex<
                                    std::sync::mpsc::Sender<std::string::String>,
                                > = std::sync::Mutex::new(v452);
                                let v456: std::sync::Arc<
                                    std::sync::Mutex<std::sync::mpsc::Sender<std::string::String>>,
                                > = std::sync::Arc::new(v454);
                                let v458: std::sync::Arc<
                                    std::sync::mpsc::Receiver<std::string::String>,
                                > = (Spiral::method137())(patternInput_2.1.clone());
                                let v460: std::sync::Mutex<
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                > = std::sync::Mutex::new(v458);
                                let v462: std::sync::Arc<
                                    std::sync::Mutex<
                                        std::sync::Arc<
                                            std::sync::mpsc::Receiver<std::string::String>,
                                        >,
                                    >,
                                > = std::sync::Arc::new(v460);
                                let v464: bool = true;
                                let __spawn = std::thread::spawn(move || {
                                    //;
                                    let v466: encoding_rs_io::DecodeReaderBytes<
                                        std::process::ChildStdout,
                                        Vec<u8>,
                                    > = encoding_rs_io::DecodeReaderBytesBuilder::new()
                                        .utf8_passthru(true)
                                        .build(v351);
                                    let v468: std::io::BufReader<
                                        encoding_rs_io::DecodeReaderBytes<
                                            std::process::ChildStdout,
                                            Vec<u8>,
                                        >,
                                    > = std::io::BufReader::new(v466);
                                    let v470: std::io::Lines<
                                        std::io::BufReader<
                                            encoding_rs_io::DecodeReaderBytes<
                                                std::process::ChildStdout,
                                                Vec<u8>,
                                            >,
                                        >,
                                    > = std::io::BufRead::lines(v468);
                                    let v472: bool = true;
                                    let mut v470 = v470;
                                    let _iter_try_for_each = v470.try_for_each(|x| {
                                        //;
                                        let v474: Result<std::string::String, std::io::Error> = x;
                                        let v476: std::sync::Arc<
                                            std::sync::Mutex<
                                                std::sync::mpsc::Sender<std::string::String>,
                                            >,
                                        > = v450.clone();
                                        let v477 = Spiral::method79();
                                        let v481: Result<std::string::String, std::string::String> =
                                            v474.map_err(|x| v477(x));
                                        let v493 = Spiral::method138();
                                        let v494 = Spiral::method139();
                                        let v496: Spiral::US29 = match v481 {
                                            Ok(x) => v493(x),
                                            Err(e) => v494(e),
                                        };
                                        let v733: std::string::String = match &v496 {
                                            Spiral::US29::US29_0(v496_0_0) => {
                                                let v499: string =
                                                    fable_library_rust::String_::fromString(
                                                        v496_0_0.clone(),
                                                    );
                                                let v501: &encoding_rs::Encoding =
                                                    encoding_rs::UTF_8;
                                                let v503: std::borrow::Cow<[u8]> =
                                                    v501.encode(&*v499).0;
                                                let v505: &[u8] = v503.as_ref();
                                                let v507: Result<&str, std::str::Utf8Error> =
                                                    std::str::from_utf8(v505);
                                                let v511: &str = v507.unwrap();
                                                let v550: std::string::String = String::from(v511);
                                                let v558: string = concat(new_array(&[
                                                    string("> "),
                                                    fable_library_rust::String_::fromString(
                                                        v550.clone(),
                                                    ),
                                                ]));
                                                if v5 {
                                                    let v561: () = {
                                                        Spiral::closure51(v558.clone(), ());
                                                        ()
                                                    };
                                                    ()
                                                } else {
                                                    let v613: () = {
                                                        Spiral::closure10(v558, ());
                                                        ()
                                                    };
                                                    ()
                                                }
                                                v550
                                            }
                                            Spiral::US29::US29_1(v496_1_0) => {
                                                let v615: std::string::String = v496_1_0.clone();
                                                let v618: () = {
                                                    Spiral::closure50(v5, v615.clone(), ());
                                                    ()
                                                };
                                                let v665: string =
                                                    sprintf!("\u{001b}[4;7m{}\u{001b}[0m", v615);
                                                let v672: &str = &*v665;
                                                String::from(v672)
                                            }
                                        };
                                        let v735: std::sync::Arc<
                                            std::sync::Mutex<
                                                std::sync::mpsc::Sender<std::string::String>,
                                            >,
                                        > = v476;
                                        let v737: Result<
                                            std::sync::MutexGuard<
                                                std::sync::mpsc::Sender<std::string::String>,
                                            >,
                                            std::sync::PoisonError<
                                                std::sync::MutexGuard<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                            >,
                                        > = v735.lock();
                                        let v741: std::sync::MutexGuard<
                                            std::sync::mpsc::Sender<std::string::String>,
                                        > = v737.unwrap();
                                        let v754: &std::sync::mpsc::Sender<std::string::String> =
                                            &v741;
                                        let v756: Result<
                                            (),
                                            std::sync::mpsc::SendError<std::string::String>,
                                        > = v754.send(v733);
                                        let v757 = Spiral::method144();
                                        let v761: Result<(), std::string::String> =
                                            v756.map_err(|x| v757(x));
                                        let v774: _ = v761;
                                        let v776: bool = true;
                                        v774
                                    }); //;
                                    let v779: Result<(), string> =
                                        Spiral::method145(_iter_try_for_each.map_err(|x| x.into()));
                                    let v782: string = string("}");
                                    let v787: bool = true;
                                    let _fix_closure_v784 = v779;
                                    let v794: string = append(
                                        (append(
                                            (append(
                                                (append(
                                                    string("true; _fix_closure_v784 "),
                                                    (v782),
                                                )),
                                                string("); "),
                                            )),
                                            string(""),
                                        )),
                                        string(" // rust.fix_closure\'"),
                                    );
                                    let v795: bool = true;
                                    _fix_closure_v784
                                }); // rust.fix_closure';
                                let v797: std::thread::JoinHandle<Result<(), string>> = __spawn;
                                let v799: bool = true;
                                let __spawn = std::thread::spawn(move || {
                                    //;
                                    let v801: encoding_rs_io::DecodeReaderBytes<
                                        std::process::ChildStderr,
                                        Vec<u8>,
                                    > = encoding_rs_io::DecodeReaderBytesBuilder::new()
                                        .utf8_passthru(true)
                                        .build(v391);
                                    let v803: std::io::BufReader<
                                        encoding_rs_io::DecodeReaderBytes<
                                            std::process::ChildStderr,
                                            Vec<u8>,
                                        >,
                                    > = std::io::BufReader::new(v801);
                                    let v805: std::io::Lines<
                                        std::io::BufReader<
                                            encoding_rs_io::DecodeReaderBytes<
                                                std::process::ChildStderr,
                                                Vec<u8>,
                                            >,
                                        >,
                                    > = std::io::BufRead::lines(v803);
                                    let v807: bool = true;
                                    let mut v805 = v805;
                                    let _iter_try_for_each = v805.try_for_each(|x| {
                                        //;
                                        let v809: Result<std::string::String, std::io::Error> = x;
                                        let v811: std::sync::Arc<
                                            std::sync::Mutex<
                                                std::sync::mpsc::Sender<std::string::String>,
                                            >,
                                        > = v456.clone();
                                        let v812 = Spiral::method79();
                                        let v816: Result<std::string::String, std::string::String> =
                                            v809.map_err(|x| v812(x));
                                        let v828 = Spiral::method138();
                                        let v829 = Spiral::method139();
                                        let v831: Spiral::US29 = match v816 {
                                            Ok(x) => v828(x),
                                            Err(e) => v829(e),
                                        };
                                        let v1134: std::string::String = match &v831 {
                                            Spiral::US29::US29_0(v831_0_0) => {
                                                let v834: string =
                                                    fable_library_rust::String_::fromString(
                                                        v831_0_0.clone(),
                                                    );
                                                let v836: &encoding_rs::Encoding =
                                                    encoding_rs::UTF_8;
                                                let v838: std::borrow::Cow<[u8]> =
                                                    v836.encode(&*v834).0;
                                                let v840: &[u8] = v838.as_ref();
                                                let v842: Result<&str, std::str::Utf8Error> =
                                                    std::str::from_utf8(v840);
                                                let v846: &str = v842.unwrap();
                                                let v885: std::string::String = String::from(v846);
                                                let v893: string = concat(new_array(&[
                                                    string("! "),
                                                    fable_library_rust::String_::fromString(
                                                        v885.clone(),
                                                    ),
                                                ]));
                                                if v5 {
                                                    let v896: () = {
                                                        Spiral::closure51(v893.clone(), ());
                                                        ()
                                                    };
                                                    ()
                                                } else {
                                                    let v947: () = {
                                                        Spiral::closure10(v893, ());
                                                        ()
                                                    };
                                                    ()
                                                }
                                                {
                                                    let v949: string = sprintf!(
                                                        "\u{001b}[4;7m{}\u{001b}[0m",
                                                        v885
                                                    );
                                                    let v956: &str = &*v949;
                                                    String::from(v956)
                                                }
                                            }
                                            Spiral::US29::US29_1(v831_1_0) => {
                                                let v1016: std::string::String = v831_1_0.clone();
                                                let v1019: () = {
                                                    Spiral::closure50(v5, v1016.clone(), ());
                                                    ()
                                                };
                                                let v1066: string =
                                                    sprintf!("\u{001b}[4;7m{}\u{001b}[0m", v1016);
                                                let v1073: &str = &*v1066;
                                                String::from(v1073)
                                            }
                                        };
                                        let v1136: std::sync::Arc<
                                            std::sync::Mutex<
                                                std::sync::mpsc::Sender<std::string::String>,
                                            >,
                                        > = v811;
                                        let v1138: Result<
                                            std::sync::MutexGuard<
                                                std::sync::mpsc::Sender<std::string::String>,
                                            >,
                                            std::sync::PoisonError<
                                                std::sync::MutexGuard<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                            >,
                                        > = v1136.lock();
                                        let v1142: std::sync::MutexGuard<
                                            std::sync::mpsc::Sender<std::string::String>,
                                        > = v1138.unwrap();
                                        let v1155: &std::sync::mpsc::Sender<std::string::String> =
                                            &v1142;
                                        let v1157: Result<
                                            (),
                                            std::sync::mpsc::SendError<std::string::String>,
                                        > = v1155.send(v1134);
                                        let v1158 = Spiral::method144();
                                        let v1162: Result<(), std::string::String> =
                                            v1157.map_err(|x| v1158(x));
                                        let v1175: _ = v1162;
                                        let v1177: bool = true;
                                        v1175
                                    }); //;
                                    let v1180: Result<(), string> =
                                        Spiral::method145(_iter_try_for_each.map_err(|x| x.into()));
                                    let v1181: string = string("}");
                                    let v1186: bool = true;
                                    let _fix_closure_v1183 = v1180;
                                    let v1193: string = append(
                                        (append(
                                            (append(
                                                (append(
                                                    string("true; _fix_closure_v1183 "),
                                                    (v1181),
                                                )),
                                                string("); "),
                                            )),
                                            string(""),
                                        )),
                                        string(" // rust.fix_closure\'"),
                                    );
                                    let v1194: bool = true;
                                    _fix_closure_v1183
                                }); // rust.fix_closure';
                                let v1196: std::thread::JoinHandle<Result<(), string>> = __spawn;
                                let v1221: Spiral::US30 = defaultValue(
                                    Spiral::US30::US30_1,
                                    map(Spiral::method146(), v4.clone()),
                                );
                                match &v1221 {
                                    Spiral::US30::US30_0(v1221_0_0) => {
                                        let v1227: std::sync::Arc<
                                            std::sync::Mutex<Option<std::process::ChildStdin>>,
                                        > = v441.clone();
                                        let v1229: Result<
                                            std::sync::MutexGuard<Option<std::process::ChildStdin>>,
                                            std::sync::PoisonError<
                                                std::sync::MutexGuard<
                                                    Option<std::process::ChildStdin>,
                                                >,
                                            >,
                                        > = v1227.lock();
                                        let v1245: std::sync::MutexGuard<
                                            Option<std::process::ChildStdin>,
                                        > = Spiral::method147(v1229.unwrap());
                                        let v1247: bool = true;
                                        let mut v1245 = v1245;
                                        let v1249: &mut Option<std::process::ChildStdin> =
                                            &mut v1245;
                                        let v1251: Option<std::process::ChildStdin> =
                                            Option::take(v1249);
                                        let v1253: bool = true;
                                        let _optionm_map_ = v1251.map(|x| {
                                            //;
                                            let v1255: std::process::ChildStdin = x;
                                            let v1257: std::sync::Mutex<std::process::ChildStdin> =
                                                std::sync::Mutex::new(v1255);
                                            let v1259: std::sync::Arc<
                                                std::sync::Mutex<std::process::ChildStdin>,
                                            > = std::sync::Arc::new(v1257);
                                            let v1261: bool = true;
                                            v1259
                                        });
                                        let v1263: Option<
                                            std::sync::Arc<
                                                std::sync::Mutex<std::process::ChildStdin>,
                                            >,
                                        > = _optionm_map_;
                                        let v1288: Spiral::US31 = defaultValue(
                                            Spiral::US31::US31_1,
                                            map(Spiral::method148(), v1263),
                                        );
                                        match &v1288 {
                                            Spiral::US31::US31_0(v1288_0_0) => {
                                                let v1292: std::sync::Arc<
                                                    std::sync::Mutex<std::process::ChildStdin>,
                                                > = match &v1288 {
                                                    Spiral::US31::US31_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }
                                                .clone();
                                                (match &v1221 {
                                                    Spiral::US30::US30_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })(
                                                    v1292.clone()
                                                );
                                                {
                                                    let v1294: std::sync::Arc<
                                                        std::sync::Mutex<std::process::ChildStdin>,
                                                    > = v1292;
                                                    let v1296: Result<
                                                        std::sync::MutexGuard<
                                                            std::process::ChildStdin,
                                                        >,
                                                        std::sync::PoisonError<
                                                            std::sync::MutexGuard<
                                                                std::process::ChildStdin,
                                                            >,
                                                        >,
                                                    > = v1294.lock();
                                                    let v1312: std::sync::MutexGuard<
                                                        std::process::ChildStdin,
                                                    > = Spiral::method149(v1296.unwrap());
                                                    let v1314: bool = true;
                                                    let mut v1312 = v1312;
                                                    let v1316: bool = true;
                                                    std::io::Write::flush(&mut *v1312).unwrap();
                                                    ()
                                                }
                                            }
                                            _ => (),
                                        }
                                    }
                                    _ => (),
                                }
                                {
                                    let v1318: std::sync::Arc<
                                        std::sync::Mutex<Option<std::process::Child>>,
                                    > = v311;
                                    let v1320: Result<
                                        std::sync::MutexGuard<Option<std::process::Child>>,
                                        std::sync::PoisonError<
                                            std::sync::MutexGuard<Option<std::process::Child>>,
                                        >,
                                    > = v1318.lock();
                                    let v1336: std::sync::MutexGuard<Option<std::process::Child>> =
                                        Spiral::method133(v1320.unwrap());
                                    let v1338: bool = true;
                                    let mut v1336 = v1336;
                                    let v1340: &mut Option<std::process::Child> = &mut v1336;
                                    let v1342: Option<std::process::Child> = Option::take(v1340);
                                    let v1344: std::process::Child = v1342.unwrap();
                                    let v1346: Result<std::process::Output, std::io::Error> =
                                        v1344.wait_with_output();
                                    let v1347 = Spiral::method79();
                                    let v1360: Result<std::process::Output, std::string::String> =
                                        v1346.map_err(|x| v1347(x));
                                    let v1370: string = string("vec![v797, v1196]");
                                    let v1371: Vec<std::thread::JoinHandle<Result<(), string>>> =
                                        vec![v797, v1196];
                                    let v1373: bool = true;
                                    v1371.into_iter().for_each(|x| {
                                        //;
                                        let v1375: std::thread::JoinHandle<Result<(), string>> = x;
                                        let v1377: Result<
                                            Result<(), string>,
                                            Box<dyn core::any::Any + 'static + Send>,
                                        > = std::thread::JoinHandle::join(v1375);
                                        let v1381: Result<(), string> = v1377.unwrap();
                                        v1381.unwrap();
                                        {
                                            let v1398: bool = true;
                                            let v1400: bool = true;
                                        }
                                    });
                                    {
                                        //;
                                        let v1401 = Spiral::method150();
                                        let v1402 = Spiral::method151();
                                        let v1404: Spiral::US32 = match &v1360 {
                                            Err(v1360_1_0) => v1402(v1360_1_0.clone()),
                                            Ok(v1360_0_0) => v1401(v1360_0_0.clone()),
                                        };
                                        match &v1404 {
                                            Spiral::US32::US32_0(v1404_0_0) => {
                                                let v1409: std::process::ExitStatus =
                                                    v1404_0_0.clone().status;
                                                let v1411: Option<i32> = v1409.code();
                                                let v1436: Spiral::US33 = defaultValue(
                                                    Spiral::US33::US33_1,
                                                    map(Spiral::method153(), v1411),
                                                );
                                                match &v1436 {
                                                    Spiral::US33::US33_0(v1436_0_0) => (
                                                        match &v1436 {
                                                            Spiral::US33::US33_0(x) => x.clone(),
                                                            _ => unreachable!(),
                                                        },
                                                        Spiral::US7::US7_1,
                                                        Spiral::US28::US28_0(v462.clone()),
                                                    ),
                                                    _ => {
                                                        let v1450:
                                                                                        &str =
                                                                                    &*string("runtime.execute_with_options / exit_code=None");
                                                        (
                                                            -1_i32,
                                                            Spiral::US7::US7_0(String::from(v1450)),
                                                            Spiral::US28::US28_0(v462.clone()),
                                                        )
                                                    }
                                                }
                                            }
                                            Spiral::US32::US32_1(v1404_1_0) => {
                                                let v1518: std::string::String = v1404_1_0.clone();
                                                let v1521: () = {
                                                    Spiral::closure57(
                                                        v0_1.clone(),
                                                        v1_1.clone(),
                                                        v2.clone(),
                                                        v3.clone(),
                                                        v4.clone(),
                                                        v5,
                                                        v6.clone(),
                                                        v29.clone(),
                                                        v120.clone(),
                                                        v1518.clone(),
                                                        (),
                                                    );
                                                    ()
                                                };
                                                (
                                                    -2_i32,
                                                    Spiral::US7::US7_0(v1518),
                                                    Spiral::US28::US28_1,
                                                )
                                            }
                                        }
                                    }
                                }
                            }
                            Spiral::US27::US27_1(v310_1_0) => {
                                let v1580: std::string::String = v310_1_0.clone();
                                let v1583: () = {
                                    Spiral::closure44(
                                        v0_1.clone(),
                                        v1_1.clone(),
                                        v2.clone(),
                                        v3.clone(),
                                        v4.clone(),
                                        v5,
                                        v6.clone(),
                                        v29.clone(),
                                        v120.clone(),
                                        v1580.clone(),
                                        (),
                                    );
                                    ()
                                };
                                (-1_i32, Spiral::US7::US7_0(v1580), Spiral::US28::US28_1)
                            }
                        };
                        let v1641: Spiral::US28 = patternInput_3.2.clone();
                        let v1640: Spiral::US7 = patternInput_3.1.clone();
                        let v1639: i32 = patternInput_3.0.clone();
                        let v1652: Option<
                            std::sync::Arc<
                                std::sync::Mutex<
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                >,
                            >,
                        > = match &v1641 {
                            Spiral::US28::US28_0(v1641_0_0) => Some(
                                match &v1641 {
                                    Spiral::US28::US28_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            _ => {
                                None::<
                                    std::sync::Arc<
                                        std::sync::Mutex<
                                            std::sync::Arc<
                                                std::sync::mpsc::Receiver<std::string::String>,
                                            >,
                                        >,
                                    >,
                                >
                            }
                        };
                        let v1654: bool = true;
                        let _optionm_map_ = v1652.map(|x| {
                            //;
                            let v1656: std::sync::Arc<
                                std::sync::Mutex<
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                >,
                            > = x;
                            let v1658: std::sync::Arc<
                                std::sync::Mutex<
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                >,
                            > = v1656;
                            let v1660: Result<
                                std::sync::MutexGuard<
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                >,
                                std::sync::PoisonError<
                                    std::sync::MutexGuard<
                                        std::sync::Arc<
                                            std::sync::mpsc::Receiver<std::string::String>,
                                        >,
                                    >,
                                >,
                            > = v1658.lock();
                            let v1664: std::sync::MutexGuard<
                                std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                            > = v1660.unwrap();
                            let v1677 = v1664.iter();
                            let v1679: Vec<std::string::String> = v1677.collect::<Vec<_>>();
                            let v1681: bool = true;
                            let _vec_map: Vec<_> = v1679
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v1683: std::string::String = x;
                                    let v1685: string =
                                        fable_library_rust::String_::fromString(v1683);
                                    let v1687: bool = true;
                                    v1685
                                })
                                .collect::<Vec<_>>();
                            let v1689: Vec<string> = _vec_map;
                            let v1693: LrcPtr<dyn IEnumerable_1<string>> = ofArray_1(
                                fable_library_rust::NativeArray_::array_from(v1689.clone()),
                            );
                            let v1701: string = join(Spiral::method75(), toArray_1(v1693));
                            let v1706: bool = true;
                            v1701
                        });
                        let v1708: Option<string> = _optionm_map_;
                        let v1715: Spiral::US5 = match &v1640 {
                            Spiral::US7::US7_0(v1640_0_0) => {
                                Spiral::US5::US5_0(fable_library_rust::String_::fromString(
                                    match &v1640 {
                                        Spiral::US7::US7_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                ))
                            }
                            _ => Spiral::US5::US5_1,
                        };
                        let v1721: string = defaultValue(
                            match &v1715 {
                                Spiral::US5::US5_0(v1715_0_0) => match &v1715 {
                                    Spiral::US5::US5_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                                _ => string(""),
                            },
                            v1708,
                        );
                        let v1726: () = {
                            Spiral::closure59(v1639, v1721.clone(), ());
                            ()
                        };
                        LrcPtr::new((v1639, v1721))
                    }
                }))();
                _capture_v175.set(Some(x_5))
            }
            {
                let v1778: LrcPtr<(i32, string)> = match &_capture_v175.get().clone() {
                    None => panic!("{}", string("base.capture / _capture_v175=None"),),
                    Some(_capture_v175_0_0) => _capture_v175_0_0.clone(),
                };
                let _run_target_args__v15: (i32, string) = (v1778.0.clone(), v1778.1.clone());
                (
                    _run_target_args__v15.0.clone(),
                    _run_target_args__v15.1.clone(),
                )
            }
        }
        pub fn method176(v0_1: i32, v1_1: string, v2: string) -> string {
            let v4: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v13: () = {
                Spiral::closure7(v4.clone(), string("{ "), ());
                ()
            };
            let v24: () = {
                Spiral::closure7(v4.clone(), string("exit_code"), ());
                ()
            };
            let v35: () = {
                Spiral::closure7(v4.clone(), string(" = "), ());
                ()
            };
            let v44: () = {
                Spiral::closure7(v4.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v55: () = {
                Spiral::closure7(v4.clone(), string("; "), ());
                ()
            };
            let v66: () = {
                Spiral::closure7(v4.clone(), string("run_result"), ());
                ()
            };
            let v75: () = {
                Spiral::closure7(v4.clone(), string(" = "), ());
                ()
            };
            let v84: () = {
                Spiral::closure7(v4.clone(), v1_1, ());
                ()
            };
            let v93: () = {
                Spiral::closure7(v4.clone(), string("; "), ());
                ()
            };
            let v104: () = {
                Spiral::closure7(v4.clone(), string("new_code_path"), ());
                ()
            };
            let v113: () = {
                Spiral::closure7(v4.clone(), string(" = "), ());
                ()
            };
            let v122: () = {
                Spiral::closure7(v4.clone(), v2, ());
                ()
            };
            let v133: () = {
                Spiral::closure7(v4.clone(), string(" }"), ());
                ()
            };
            v4.l0.get().clone()
        }
        pub fn method175(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
        ) -> string {
            let v11: string = Spiral::method176(v8, v9, v10);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral.process_gleam / check error"),
                v11
            ))
        }
        pub fn closure68(v0_1: string, v1_1: string, v2: i32, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v7: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v33: Option<i64> = patternInput.5.clone();
                let v32: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v31: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v30: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v29: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v28: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method175(
                    v28.clone(),
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    v33.clone(),
                    Spiral::method8(v28, v29, v30, v31, v32, v33),
                    Spiral::method82(),
                    v2,
                    v1_1,
                    v0_1,
                ))
            };
        }
        pub fn method178(v0_1: i32, v1_1: string, v2: string, v3: string) -> string {
            let v5: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v14: () = {
                Spiral::closure7(v5.clone(), string("{ "), ());
                ()
            };
            let v25: () = {
                Spiral::closure7(v5.clone(), string("exit_code"), ());
                ()
            };
            let v36: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v45: () = {
                Spiral::closure7(v5.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v56: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v67: () = {
                Spiral::closure7(v5.clone(), string("run_result"), ());
                ()
            };
            let v76: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v85: () = {
                Spiral::closure7(v5.clone(), v1_1, ());
                ()
            };
            let v94: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v105: () = {
                Spiral::closure7(v5.clone(), string("new_code_path"), ());
                ()
            };
            let v114: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v123: () = {
                Spiral::closure7(v5.clone(), v2, ());
                ()
            };
            let v132: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v143: () = {
                Spiral::closure7(v5.clone(), string("external_command"), ());
                ()
            };
            let v152: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v161: () = {
                Spiral::closure7(v5.clone(), v3, ());
                ()
            };
            let v172: () = {
                Spiral::closure7(v5.clone(), string(" }"), ());
                ()
            };
            v5.l0.get().clone()
        }
        pub fn method177(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral::method178(v8, v9, v10, v11);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral.process_gleam / error"),
                v12
            ))
        }
        pub fn closure69(v0_1: string, v1_1: string, v2: i32, v3: string, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v8: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v34: Option<i64> = patternInput.5.clone();
                let v33: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v32: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v31: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v30: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v29: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method177(
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    v33.clone(),
                    v34.clone(),
                    Spiral::method8(v29, v30, v31, v32, v33, v34),
                    Spiral::method82(),
                    v2,
                    v1_1,
                    v0_1,
                    v3,
                ))
            };
        }
        pub fn method179(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
        ) -> string {
            let v11: string = Spiral::method176(v8, v9, v10);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral.process_gleam / esbuild error"),
                v11
            ))
        }
        pub fn closure70(v0_1: string, v1_1: string, v2: i32, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v7: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v33: Option<i64> = patternInput.5.clone();
                let v32: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v31: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v30: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v29: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v28: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method179(
                    v28.clone(),
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    v33.clone(),
                    Spiral::method8(v28, v29, v30, v31, v32, v33),
                    Spiral::method82(),
                    v2,
                    v1_1,
                    v0_1,
                ))
            };
        }
        pub fn method180(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
        ) -> string {
            let v11: string = Spiral::method176(v8, v9, v10);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral.process_gleam / trunk error"),
                v11
            ))
        }
        pub fn closure71(v0_1: string, v1_1: string, v2: i32, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v7: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v33: Option<i64> = patternInput.5.clone();
                let v32: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v31: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v30: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v29: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v28: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method180(
                    v28.clone(),
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    v33.clone(),
                    Spiral::method8(v28, v29, v30, v31, v32, v33),
                    Spiral::method82(),
                    v2,
                    v1_1,
                    v0_1,
                ))
            };
        }
        pub fn closure72(unitVar: (), v0_1: string) -> Spiral::US5 {
            Spiral::US5::US5_0(v0_1)
        }
        pub fn closure73(v0_1: string, unitVar: ()) -> string {
            let v13: LrcPtr<dyn IEnumerable_1<string>> =
                ofArray_1(split(v0_1, string("\n"), -1_i32, 0_i32));
            join(Spiral::method75(), toArray_1(v13))
        }
        pub fn method182(
            v0_1: LrcPtr<Exception>,
            v1_1: std::string::String,
            v2: string,
            v3: string,
        ) -> string {
            let v5: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v14: () = {
                Spiral::closure7(v5.clone(), string("{ "), ());
                ()
            };
            let v25: () = {
                Spiral::closure7(v5.clone(), string("ex"), ());
                ()
            };
            let v36: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v45: std::string::String = format!("{:#?}", v0_1);
            let v84: () = {
                Spiral::closure7(v5.clone(), fable_library_rust::String_::fromString(v45), ());
                ()
            };
            let v95: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v106: () = {
                Spiral::closure7(v5.clone(), string("run_result\'"), ());
                ()
            };
            let v115: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v124: std::string::String = format!("{:#?}", v1_1);
            let v163: () = {
                Spiral::closure7(
                    v5.clone(),
                    fable_library_rust::String_::fromString(v124),
                    (),
                );
                ()
            };
            let v172: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v183: () = {
                Spiral::closure7(v5.clone(), string("new_code_path"), ());
                ()
            };
            let v192: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v201: () = {
                Spiral::closure7(v5.clone(), v2, ());
                ()
            };
            let v210: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v221: () = {
                Spiral::closure7(v5.clone(), string("external_command"), ());
                ()
            };
            let v230: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v239: () = {
                Spiral::closure7(v5.clone(), v3, ());
                ()
            };
            let v250: () = {
                Spiral::closure7(v5.clone(), string(" }"), ());
                ()
            };
            v5.l0.get().clone()
        }
        pub fn method181(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: LrcPtr<Exception>,
            v9: std::string::String,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral::method182(v8, v9, v10, v11);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral.process_gleam / Exception"),
                v12
            ))
        }
        pub fn closure75(
            v0_1: string,
            v1_1: string,
            v2: std::string::String,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v8: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v34: Option<i64> = patternInput.5.clone();
                let v33: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v32: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v31: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v30: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v29: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method181(
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    v33.clone(),
                    v34.clone(),
                    Spiral::method8(v29, v30, v31, v32, v33, v34),
                    Spiral::method82(),
                    v3,
                    v2,
                    v0_1,
                    v1_1,
                ))
            };
        }
        pub fn closure74(
            v0_1: string,
            v1_1: string,
            v2: std::string::String,
            v3: LrcPtr<Exception>,
        ) -> Spiral::US5 {
            let v6: () = {
                Spiral::closure75(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral::US5::US5_1
        }
        pub fn method183(
            v0_1: Func1<(string, string), LrcPtr<(std::string::String, std::string::String)>>,
        ) -> Func1<(string, string), LrcPtr<(std::string::String, std::string::String)>> {
            v0_1
        }
        pub fn closure76(
            v0_1: Func1<(string, string), LrcPtr<(std::string::String, std::string::String)>>,
            _arg: (string, string),
        ) -> LrcPtr<(std::string::String, std::string::String)> {
            let v3: Func1<(string, string), LrcPtr<(std::string::String, std::string::String)>> =
                Spiral::method183(v0_1);
            (move |x| v3(x))((_arg.0.clone(), _arg.1.clone()))
        }
        pub fn method184() -> string {
            string("py-path")
        }
        pub fn method185() -> string {
            string("env")
        }
        pub fn method187(v0_1: Spiral::US38, v1_1: i32, v2: string, v3: string) -> string {
            let v5: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v14: () = {
                Spiral::closure7(v5.clone(), string("{ "), ());
                ()
            };
            let v25: () = {
                Spiral::closure7(v5.clone(), string("env"), ());
                ()
            };
            let v36: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v49: () = {
                Spiral::closure7(v5.clone(), sprintf!("{:?}", v0_1), ());
                ()
            };
            let v60: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v71: () = {
                Spiral::closure7(v5.clone(), string("exit_code"), ());
                ()
            };
            let v80: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v89: () = {
                Spiral::closure7(v5.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v98: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v109: () = {
                Spiral::closure7(v5.clone(), string("run_result"), ());
                ()
            };
            let v118: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v127: () = {
                Spiral::closure7(v5.clone(), v2, ());
                ()
            };
            let v136: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v147: () = {
                Spiral::closure7(v5.clone(), string("new_code_path"), ());
                ()
            };
            let v156: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v165: () = {
                Spiral::closure7(v5.clone(), v3, ());
                ()
            };
            let v176: () = {
                Spiral::closure7(v5.clone(), string(" }"), ());
                ()
            };
            v5.l0.get().clone()
        }
        pub fn method186(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: Spiral::US38,
            v9: i32,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral::method187(v8, v9, v10, v11);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral.process_cuda / env install error"),
                v12
            ))
        }
        pub fn closure77(v0_1: Spiral::US38, v1_1: string, v2: string, v3: i32, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v8: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v34: Option<i64> = patternInput.5.clone();
                let v33: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v32: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v31: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v30: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v29: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method186(
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    v33.clone(),
                    v34.clone(),
                    Spiral::method8(v29, v30, v31, v32, v33, v34),
                    Spiral::method82(),
                    v0_1,
                    v3,
                    v2,
                    v1_1,
                ))
            };
        }
        pub fn closure78(v0_1: string, unitVar: ()) -> string {
            let v13: LrcPtr<dyn IEnumerable_1<string>> =
                ofArray_1(split(v0_1, string("\n"), -1_i32, 0_i32));
            join(Spiral::method75(), toArray_1(v13))
        }
        pub fn method189(v0_1: LrcPtr<Exception>, v1_1: string, v2: string, v3: string) -> string {
            let v5: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v14: () = {
                Spiral::closure7(v5.clone(), string("{ "), ());
                ()
            };
            let v25: () = {
                Spiral::closure7(v5.clone(), string("ex"), ());
                ()
            };
            let v36: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v45: std::string::String = format!("{:#?}", v0_1);
            let v84: () = {
                Spiral::closure7(v5.clone(), fable_library_rust::String_::fromString(v45), ());
                ()
            };
            let v95: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v106: () = {
                Spiral::closure7(v5.clone(), string("run_result"), ());
                ()
            };
            let v115: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v124: () = {
                Spiral::closure7(v5.clone(), v1_1, ());
                ()
            };
            let v133: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v144: () = {
                Spiral::closure7(v5.clone(), string("new_code_path"), ());
                ()
            };
            let v153: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v162: () = {
                Spiral::closure7(v5.clone(), v2, ());
                ()
            };
            let v171: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v182: () = {
                Spiral::closure7(v5.clone(), string("external_command"), ());
                ()
            };
            let v191: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v200: () = {
                Spiral::closure7(v5.clone(), v3, ());
                ()
            };
            let v211: () = {
                Spiral::closure7(v5.clone(), string(" }"), ());
                ()
            };
            v5.l0.get().clone()
        }
        pub fn method188(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: LrcPtr<Exception>,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral::method189(v8, v9, v10, v11);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral.process_cuda / Exception"),
                v12
            ))
        }
        pub fn closure80(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v8: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v34: Option<i64> = patternInput.5.clone();
                let v33: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v32: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v31: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v30: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v29: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method188(
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    v33.clone(),
                    v34.clone(),
                    Spiral::method8(v29, v30, v31, v32, v33, v34),
                    Spiral::method82(),
                    v3,
                    v1_1,
                    v0_1,
                    v2,
                ))
            };
        }
        pub fn closure79(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral::US5 {
            let v6: () = {
                Spiral::closure80(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral::US5::US5_1
        }
        pub fn method190(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral::method178(v8, v9, v10, v11);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral.process_cuda / error"),
                v12
            ))
        }
        pub fn closure81(v0_1: string, v1_1: string, v2: i32, v3: string, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v8: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v34: Option<i64> = patternInput.5.clone();
                let v33: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v32: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v31: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v30: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v29: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method190(
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    v33.clone(),
                    v34.clone(),
                    Spiral::method8(v29, v30, v31, v32, v33, v34),
                    Spiral::method82(),
                    v2,
                    v1_1,
                    v0_1,
                    v3,
                ))
            };
        }
        pub fn method191() -> string {
            string("fs-path")
        }
        pub fn method192() -> string {
            string("command")
        }
        pub fn method193() -> string {
            string("path")
        }
        pub fn method195(v0_1: string) -> string {
            Spiral::method69(Spiral::method36(Spiral::method34(), v0_1))
        }
        pub fn closure82(unitVar: (), v0_1: std::string::String) -> string {
            Spiral::method195(fable_library_rust::String_::fromString(v0_1))
        }
        pub fn method194() -> Func1<std::string::String, string> {
            Func1::new(move |v: std::string::String| Spiral::closure82((), v))
        }
        pub fn method196() -> string {
            string("retries")
        }
        pub fn method197() -> string {
            string("working-directory")
        }
        pub fn method200(v0_1: i32, v1_1: string, v2: string) -> string {
            let v4: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v13: () = {
                Spiral::closure7(v4.clone(), string("{ "), ());
                ()
            };
            let v24: () = {
                Spiral::closure7(v4.clone(), string("exit_code"), ());
                ()
            };
            let v35: () = {
                Spiral::closure7(v4.clone(), string(" = "), ());
                ()
            };
            let v44: () = {
                Spiral::closure7(v4.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v55: () = {
                Spiral::closure7(v4.clone(), string("; "), ());
                ()
            };
            let v66: () = {
                Spiral::closure7(v4.clone(), string("repl_result"), ());
                ()
            };
            let v75: () = {
                Spiral::closure7(v4.clone(), string(" = "), ());
                ()
            };
            let v84: () = {
                Spiral::closure7(v4.clone(), v1_1, ());
                ()
            };
            let v93: () = {
                Spiral::closure7(v4.clone(), string("; "), ());
                ()
            };
            let v104: () = {
                Spiral::closure7(v4.clone(), string("retry"), ());
                ()
            };
            let v113: () = {
                Spiral::closure7(v4.clone(), string(" = "), ());
                ()
            };
            let v122: () = {
                Spiral::closure7(v4.clone(), v2, ());
                ()
            };
            let v133: () = {
                Spiral::closure7(v4.clone(), string(" }"), ());
                ()
            };
            v4.l0.get().clone()
        }
        pub fn method199(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
        ) -> string {
            let v11: string = Spiral::method200(v8, v9, v10);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral.run / repl error"),
                v11
            ))
        }
        pub fn closure83(v0_1: u8, v1_1: u8, v2: string, v3: i32, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_1) {
                let v8: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v34: Option<i64> = patternInput.5.clone();
                let v33: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v32: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v31: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v30: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v29: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method199(
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    v33.clone(),
                    v34.clone(),
                    Spiral::method8(v29, v30, v31, v32, v33, v34),
                    Spiral::method12(),
                    v3,
                    v2,
                    sprintf!("{}/{}", v1_1, v0_1),
                ))
            };
        }
        pub fn method198(v0_1: Spiral::US5, v1_1: u8, v2: string, v3: u8) -> (i32, string) {
            let v0_1: MutCell<Spiral::US5> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<u8> = MutCell::new(v1_1);
            let v2: MutCell<string> = MutCell::new(v2.clone());
            let v3: MutCell<u8> = MutCell::new(v3);
            '_method198: loop {
                break '_method198 ({
                    let patternInput: (i32, string) = Spiral::method101(
                        sprintf!(
                            "dotnet repl --exit-after-run --run \"{}\" --output-path \"{}.ipynb\"",
                            v2.get().clone(),
                            v2.get().clone()
                        ),
                        None::<CancellationToken>,
                        new_array(&[
                            (string("TRACE_LEVEL"), string("Verbose")),
                            (string("AUTOMATION"), string("True")),
                        ]),
                        None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                        None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                        false,
                        match &v0_1.get().clone() {
                            Spiral::US5::US5_0(v0_1_0_0) => Some(
                                match &v0_1.get().clone() {
                                    Spiral::US5::US5_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            _ => None::<string>,
                        },
                    );
                    let v40: string = patternInput.1.clone();
                    let v39: i32 = patternInput.0.clone();
                    if if (v39) == 0_i32 {
                        true
                    } else {
                        (v3.get().clone()) >= (v1_1.get().clone())
                    } {
                        (v39, v40.clone())
                    } else {
                        let v46: () = {
                            Spiral::closure83(v1_1.get().clone(), v3.get().clone(), v40, v39, ());
                            ()
                        };
                        {
                            let v0_1_temp: Spiral::US5 = v0_1.get().clone();
                            let v1_1_temp: u8 = v1_1.get().clone();
                            let v2_temp: string = v2.get().clone();
                            let v3_temp: u8 = (v3.get().clone()) + 1_u8;
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            continue '_method198;
                        }
                    }
                });
            }
        }
        pub fn method202(v0_1: i32, v1_1: i32) -> string {
            let v3: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v12: () = {
                Spiral::closure7(v3.clone(), string("{ "), ());
                ()
            };
            let v23: () = {
                Spiral::closure7(v3.clone(), string("exit_code"), ());
                ()
            };
            let v34: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v43: () = {
                Spiral::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v54: () = {
                Spiral::closure7(v3.clone(), string("; "), ());
                ()
            };
            let v65: () = {
                Spiral::closure7(v3.clone(), string("jupyter_result_length"), ());
                ()
            };
            let v74: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v83: () = {
                Spiral::closure7(v3.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v94: () = {
                Spiral::closure7(v3.clone(), string(" }"), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method201(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: i32,
        ) -> string {
            let v10: string = Spiral::method202(v8, v9);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral.run / dib / jupyter nbconvert"),
                v10
            ))
        }
        pub fn closure84(v0_1: string, v1_1: i32, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_1) {
                let v6: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v32: Option<i64> = patternInput.5.clone();
                let v31: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v30: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v29: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v28: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v27: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method201(
                    v27.clone(),
                    v28.clone(),
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    Spiral::method8(v27, v28, v29, v30, v31, v32),
                    Spiral::method12(),
                    v1_1,
                    length(v0_1),
                ))
            };
        }
        pub fn method204(v0_1: i32, v1_1: i32) -> string {
            let v3: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v12: () = {
                Spiral::closure7(v3.clone(), string("{ "), ());
                ()
            };
            let v23: () = {
                Spiral::closure7(v3.clone(), string("exit_code"), ());
                ()
            };
            let v34: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v43: () = {
                Spiral::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v54: () = {
                Spiral::closure7(v3.clone(), string("; "), ());
                ()
            };
            let v65: () = {
                Spiral::closure7(v3.clone(), string("pwsh_replace_html_result_length"), ());
                ()
            };
            let v74: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v83: () = {
                Spiral::closure7(v3.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v94: () = {
                Spiral::closure7(v3.clone(), string(" }"), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method203(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: i32,
        ) -> string {
            let v10: string = Spiral::method204(v8, v9);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral.run / dib / html cell ids"),
                v10
            ))
        }
        pub fn closure85(v0_1: string, v1_1: i32, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_1) {
                let v6: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v32: Option<i64> = patternInput.5.clone();
                let v31: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v30: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v29: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v28: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v27: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method203(
                    v27.clone(),
                    v28.clone(),
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    Spiral::method8(v27, v28, v29, v30, v31, v32),
                    Spiral::method12(),
                    v1_1,
                    length(v0_1),
                ))
            };
        }
        pub fn method206(v0_1: i32, v1_1: i32) -> string {
            let v3: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v12: () = {
                Spiral::closure7(v3.clone(), string("{ "), ());
                ()
            };
            let v23: () = {
                Spiral::closure7(v3.clone(), string("exit_code"), ());
                ()
            };
            let v34: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v43: () = {
                Spiral::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v54: () = {
                Spiral::closure7(v3.clone(), string("; "), ());
                ()
            };
            let v65: () = {
                Spiral::closure7(v3.clone(), string("result_length"), ());
                ()
            };
            let v74: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v83: () = {
                Spiral::closure7(v3.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v94: () = {
                Spiral::closure7(v3.clone(), string(" }"), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method205(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: i32,
        ) -> string {
            let v10: string = Spiral::method206(v8, v9);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral.run / dib"),
                v10
            ))
        }
        pub fn closure86(v0_1: string, v1_1: i32, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_1) {
                let v6: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v32: Option<i64> = patternInput.5.clone();
                let v31: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v30: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v29: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v28: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v27: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method205(
                    v27.clone(),
                    v28.clone(),
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    Spiral::method8(v27, v28, v29, v30, v31, v32),
                    Spiral::method12(),
                    v1_1,
                    length(v0_1),
                ))
            };
        }
        pub fn method207() -> string {
            string("cleanup")
        }
        pub fn method208() -> string {
            string("wasm")
        }
        pub fn method209() -> string {
            string("contract")
        }
        pub fn method210(v0_1: string, v1_1: string, v2: Spiral::US39) -> string {
            let v4: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v13: () = {
                Spiral::closure7(v4.clone(), string("{ "), ());
                ()
            };
            let v24: () = {
                Spiral::closure7(v4.clone(), string("extension"), ());
                ()
            };
            let v35: () = {
                Spiral::closure7(v4.clone(), string(" = "), ());
                ()
            };
            let v44: () = {
                Spiral::closure7(v4.clone(), v0_1, ());
                ()
            };
            let v55: () = {
                Spiral::closure7(v4.clone(), string("; "), ());
                ()
            };
            let v66: () = {
                Spiral::closure7(v4.clone(), string("code"), ());
                ()
            };
            let v75: () = {
                Spiral::closure7(v4.clone(), string(" = "), ());
                ()
            };
            let v84: () = {
                Spiral::closure7(v4.clone(), v1_1, ());
                ()
            };
            let v93: () = {
                Spiral::closure7(v4.clone(), string("; "), ());
                ()
            };
            let v104: () = {
                Spiral::closure7(v4.clone(), string("runtime"), ());
                ()
            };
            let v113: () = {
                Spiral::closure7(v4.clone(), string(" = "), ());
                ()
            };
            let v126: () = {
                Spiral::closure7(v4.clone(), sprintf!("{:?}", v2), ());
                ()
            };
            let v137: () = {
                Spiral::closure7(v4.clone(), string(" }"), ());
                ()
            };
            v4.l0.get().clone()
        }
        pub fn method211(v0_1: Spiral::US5, v1_1: string, v2: Spiral::US42, v3: string) -> string {
            let v6: string = Spiral::method36(Spiral::method36(v3, string("target/spiral")), v1_1);
            if let Spiral::US5::US5_0(v0_1_0_0) = &v0_1 {
                if let Spiral::US42::US42_0(v2_0_0) = &v2 {
                    let v8: Spiral::US41 = v2_0_0.clone();
                    let v10: string = Spiral::method36(v6.clone(), string("packages"));
                    let v15: Spiral::US5 = if if let Spiral::US41::US41_0 = &v8 {
                        true
                    } else {
                        false
                    } {
                        Spiral::US5::US5_0(string("Rust"))
                    } else {
                        Spiral::US5::US5_1
                    };
                    let v38: Spiral::US5 = match &v15 {
                        Spiral::US5::US5_0(v15_0_0) => Spiral::US5::US5_0(
                            match &v15 {
                                Spiral::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ),
                        _ => {
                            let v22: Spiral::US5 = if if let Spiral::US41::US41_1 = &v8 {
                                true
                            } else {
                                false
                            } {
                                Spiral::US5::US5_0(string("TypeScript"))
                            } else {
                                Spiral::US5::US5_1
                            };
                            match &v22 {
                                Spiral::US5::US5_0(v22_0_0) => Spiral::US5::US5_0(
                                    match &v22 {
                                        Spiral::US5::US5_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                ),
                                _ => {
                                    let v29: Spiral::US5 = if if let Spiral::US41::US41_2 = &v8 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral::US5::US5_0(string("Python"))
                                    } else {
                                        Spiral::US5::US5_1
                                    };
                                    match &v29 {
                                        Spiral::US5::US5_0(v29_0_0) => Spiral::US5::US5_0(
                                            match &v29 {
                                                Spiral::US5::US5_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                        ),
                                        _ => Spiral::US5::US5_1,
                                    }
                                }
                            }
                        }
                    };
                    Spiral::method36(
                        Spiral::method36(
                            v10,
                            match &v38 {
                                Spiral::US5::US5_0(v38_0_0) => match &v38 {
                                    Spiral::US5::US5_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                                _ => panic!("{}", string("Option does not have a value."),),
                            },
                        ),
                        v0_1_0_0.clone(),
                    )
                } else {
                    v6.clone()
                }
            } else {
                v6
            }
        }
        pub fn method213(
            v0_1: string,
            v1_1: LrcPtr<Spiral::UH2>,
            v2: LrcPtr<Spiral::UH2>,
        ) -> LrcPtr<Spiral::UH2> {
            match v1_1.as_ref() {
                Spiral::UH2::UH2_0 => v2.clone(),
                Spiral::UH2::UH2_1(v1_1_1_0, v1_1_1_1) => {
                    let v5: LrcPtr<Spiral::UH2> = Spiral::method213(
                        v0_1.clone(),
                        match v1_1.as_ref() {
                            Spiral::UH2::UH2_1(_, x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                        v2.clone(),
                    );
                    LrcPtr::new(Spiral::UH2::UH2_1(
                        concat(new_array(&[
                            string("<Compile Include=\""),
                            Spiral::method36(
                                v0_1.clone(),
                                match v1_1.as_ref() {
                                    Spiral::UH2::UH2_1(x, _) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            string("\" />"),
                        ])),
                        v5,
                    ))
                }
            }
        }
        pub fn method214(
            v0_1: LrcPtr<Spiral::UH4>,
            v1_1: LrcPtr<Spiral::UH2>,
        ) -> LrcPtr<Spiral::UH2> {
            match v0_1.as_ref() {
                Spiral::UH4::UH4_0 => v1_1.clone(),
                Spiral::UH4::UH4_1(v0_1_1_0, v0_1_1_1, v0_1_1_2) => {
                    LrcPtr::new(Spiral::UH2::UH2_1(
                        sprintf!(
                            "<PackageReference Include=\"{}\" Version=\"{}\" />",
                            match v0_1.as_ref() {
                                Spiral::UH4::UH4_1(x, _, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            match v0_1.as_ref() {
                                Spiral::UH4::UH4_1(_, x, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone()
                        ),
                        Spiral::method214(
                            match v0_1.as_ref() {
                                Spiral::UH4::UH4_1(_, _, x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            v1_1.clone(),
                        ),
                    ))
                }
            }
        }
        pub fn method212(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<Spiral::UH2>,
            v3: LrcPtr<Spiral::UH4>,
            v4: string,
            v5: string,
        ) -> string {
            let v6: LrcPtr<dyn IDisposable> = Spiral::method78(v4.clone());
            let v9: string = Spiral::method46(Spiral::method36(
                v4.clone(),
                concat(new_array(&[v1_1.clone(), string(".fs")])),
            ));
            Spiral::method76(v9.clone(), v0_1);
            {
                let v13: List<string> = Spiral::method124(
                    Spiral::method213(v5, v2, LrcPtr::new(Spiral::UH2::UH2_0)),
                    empty::<string>(),
                );
                let v32: string = join(
                    string("\\n        "),
                    toArray_1(delay(Func0::new({
                        let v13 = v13.clone();
                        move || ofList(v13.clone()).clone()
                    }))),
                );
                let v38: List<string> = Spiral::method124(
                    Spiral::method214(v3, LrcPtr::new(Spiral::UH2::UH2_0)),
                    empty::<string>(),
                );
                let v55: string = join(
                    string("\\n        "),
                    toArray_1(delay(Func0::new({
                        let v38 = v38.clone();
                        move || ofList(v38.clone()).clone()
                    }))),
                );
                let v60: string = Spiral::method46(Spiral::method36(
                    v4,
                    concat(new_array(&[v1_1, string(".fsproj")])),
                ));
                Spiral::method76(v60.clone(),
                                 append((append((append((append((append((append((append((append((append((append((append((append((append(string("<Project Sdk=\"Microsoft.NET.Sdk\">\n<PropertyGroup>\n    <TargetFramework>net9.0</TargetFramework>\n    <LangVersion>preview</LangVersion>\n    <RollForward>Major</RollForward>\n    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>\n    <PublishAot>false</PublishAot>\n    <PublishTrimmed>false</PublishTrimmed>\n    <PublishSingleFile>true</PublishSingleFile>\n    <SelfContained>true</SelfContained>\n    <Version>0.0.1-alpha.1</Version>\n    <OutputType>Exe</OutputType>\n    <ServerGarbageCollection>true</ServerGarbageCollection>\n    <ConcurrentGarbageCollection>true</ConcurrentGarbageCollection>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'FreeBSD\'))\">\n    <DefineConstants>_FREEBSD</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Linux\'))\">\n    <DefineConstants>_LINUX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'OSX\'))\">\n    <DefineConstants>_OSX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Windows\'))\">\n    <DefineConstants>_WINDOWS</DefineConstants>\n</PropertyGroup>\n<ItemGroup>\n"),
                                                                                                                                        (concat(new_array(&[string("    "),
                                                                                                                                                            v32]))))),
                                                                                                                                string("\n"))),
                                                                                                                        (concat(new_array(&[string("    <Compile Include=\""),
                                                                                                                                            v9,
                                                                                                                                            string("\" />")]))))),
                                                                                                                string("\n"))),
                                                                                                        string("</ItemGroup>"))),
                                                                                                string("\n"))),
                                                                                        string("<ItemGroup>"))),
                                                                                string("\n"))),
                                                                        (concat(new_array(&[string("    "),
                                                                                            v55]))))),
                                                                string("\n"))),
                                                        string("</ItemGroup>"))),
                                                string("\n"))),
                                        string("</Project>")));
                v60
            }
        }
        pub fn closure87(unitVar: (), v0_1: chrono::DateTime<chrono::Utc>) -> Spiral::US43 {
            Spiral::US43::US43_0(v0_1)
        }
        pub fn method216() -> Func1<chrono::DateTime<chrono::Utc>, Spiral::US43> {
            Func1::new(move |v: chrono::DateTime<chrono::Utc>| Spiral::closure87((), v))
        }
        pub fn method217() -> string {
            string("hh:mm")
        }
        pub fn method218() -> string {
            string("yyyyMMdd-HHmm-ssff-ffff-f")
        }
        pub fn method219() -> string {
            string("hhmm")
        }
        pub fn method215(v0_1: Guid, v1_1: DateTime) -> Guid {
            let v576: DateTime = {
                let _arg: DateTime = DateTime::unixEpoch();
                _arg.toUniversalTime()
            };
            let v586: DateTime = {
                let _arg_1: DateTime = DateTime::specifyKind(v1_1, 2_i32);
                _arg_1.toUniversalTime()
            };
            let v678: i64 = ((v586.ticks()) - (v576.ticks())) / 10_i64;
            let v680: Option<chrono::DateTime<chrono::Utc>> =
                chrono::DateTime::from_timestamp_micros(v678);
            let v705: Spiral::US43 =
                defaultValue(Spiral::US43::US43_1, map(Spiral::method216(), v680));
            let v725: Spiral::US5 = match &v705 {
                Spiral::US43::US43_0(v705_0_0) => {
                    let v711: chrono::NaiveDateTime = match &v705 {
                        Spiral::US43::US43_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone()
                    .naive_utc();
                    let v713: chrono::DateTime<chrono::Local> =
                        chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v711);
                    let v715: string = string("r#\"%Y%m%d-%H%M-%S%f\"#");
                    let v716: &str = r#"%Y%m%d-%H%M-%S%f"#;
                    let v718: std::string::String = v713.format(v716).to_string();
                    let v720: string = fable_library_rust::String_::fromString(v718);
                    Spiral::US5::US5_0(sprintf!(
                        "{}-{}-{}",
                        getSlice(v720.clone(), Some(0_i32), Some(17_i32)),
                        getSlice(v720.clone(), Some(18_i32), Some(21_i32)),
                        getCharAt(v720, 22_i32)
                    ))
                }
                _ => Spiral::US5::US5_1,
            };
            let v729: string = match &v725 {
                Spiral::US5::US5_0(v725_0_0) => match &v725 {
                    Spiral::US5::US5_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => string(""),
            };
            let v736: LrcPtr<TimeZoneInfo> = std::sync::Arc::new(
                chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64,
            );
            let v774: i64 = v586.ticks();
            let v809: string =
                string("chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))");
            let v950: TimeSpan = TimeSpan::new_ticks(chrono::FixedOffset::local_minus_utc(
                &chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(
                    &chrono::DateTime::from_timestamp_nanos(v774),
                )),
            ) as i64);
            let v965: u8 = if (v950.hours()) > 0_i32 { 1_u8 } else { 0_u8 };
            let v966: string = Spiral::method217();
            let v1135: string = v950.toString(v966);
            let v1190: string = sprintf!(
                "{}{}{}",
                v965,
                getSlice(v1135.clone(), Some(0_i32), Some(1_i32)),
                getSlice(v1135, Some(3_i32), Some(4_i32))
            );
            let v1193: string = toString(v0_1);
            parse(concat(new_array(&[
                v729.clone(),
                v1190.clone(),
                getSlice(
                    v1193.clone(),
                    Some((length(v729)) + (length(v1190))),
                    Some((length(v1193)) - 1_i32),
                ),
            ])))
        }
        pub fn method220(v0_1: string, v1_1: string) {
            if (Spiral::method39(v0_1.clone())) == false {
                let v4: LrcPtr<dyn IDisposable> = Spiral::method78(v0_1.clone());
                ()
            }
            {
                let v9: string = defaultValue(string(""), Spiral::method41(v1_1.clone()));
                if (Spiral::method39(v9.clone())) == false {
                    let v14: LrcPtr<dyn IDisposable> = Spiral::method78(v9);
                    ()
                }
                if if Spiral::method39(v1_1.clone()) {
                    let v16: Result<std::path::PathBuf, std::io::Error> =
                        Spiral::method47(v1_1.clone());
                    v16.is_err()
                } else {
                    false
                } {
                    Spiral::method89(true, v1_1.clone());
                }
                if (Spiral::method39(v1_1.clone())) == false {
                    let v32: bool = true;
                    #[cfg(windows)]
                    std::os::windows::fs::symlink_dir(&*v0_1.clone(), &*v1_1.clone()).unwrap();
                    let v34: bool = true;
                    #[cfg(unix)]
                    std::os::unix::fs::symlink(&*v0_1, &*v1_1).unwrap();
                    ()
                }
            }
        }
        pub fn method222() -> string {
            string("(")
        }
        pub fn method223() -> string {
            string(" ")
        }
        pub fn method224(v0_1: Spiral::US40) -> string {
            let v2: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v13: () = {
                Spiral::closure7(v2.clone(), sprintf!("{:?}", v0_1), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method228(v0_1: bool, v1_1: string, v2: i32, v3: string) -> string {
            let v5: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v14: () = {
                Spiral::closure7(v5.clone(), string("{ "), ());
                ()
            };
            let v25: () = {
                Spiral::closure7(v5.clone(), string("is_error"), ());
                ()
            };
            let v36: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v48: () = {
                Spiral::closure7(
                    v5.clone(),
                    if v0_1 {
                        string("true")
                    } else {
                        string("false")
                    },
                    (),
                );
                ()
            };
            let v59: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v70: () = {
                Spiral::closure7(v5.clone(), string("retry"), ());
                ()
            };
            let v79: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v88: () = {
                Spiral::closure7(v5.clone(), v1_1, ());
                ()
            };
            let v97: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v108: () = {
                Spiral::closure7(v5.clone(), string("result"), ());
                ()
            };
            let v117: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v126: () = {
                Spiral::closure7(v5.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v137: () = {
                Spiral::closure7(v5.clone(), string(", "), ());
                ()
            };
            let v146: () = {
                Spiral::closure7(v5.clone(), v3, ());
                ()
            };
            let v157: () = {
                Spiral::closure7(v5.clone(), string(" }"), ());
                ()
            };
            v5.l0.get().clone()
        }
        pub fn method227(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: bool,
            v9: string,
            v10: i32,
            v11: string,
        ) -> string {
            let v12: string = Spiral::method228(v8, v9, v10, v11);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("common.retry_fn\' / loop"),
                v12
            ))
        }
        pub fn closure88(v0_1: u8, v1_1: u8, v2: i32, v3: string, v4: bool, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_1) {
                let v9: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v35: Option<i64> = patternInput.5.clone();
                let v34: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v33: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v32: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v31: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v30: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method227(
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    v33.clone(),
                    v34.clone(),
                    v35.clone(),
                    Spiral::method8(v30, v31, v32, v33, v34, v35),
                    Spiral::method12(),
                    v4,
                    sprintf!("{}/{}", v1_1, v0_1),
                    v2,
                    v3,
                ))
            };
        }
        pub fn method226(
            v0_1: u8,
            v1_1: string,
            v2: Option<CancellationToken>,
            v3: Array<(string, string)>,
            v4: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v5: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v6: bool,
            v7: Option<string>,
            v8: u8,
        ) -> (i32, string) {
            let v0_1: MutCell<u8> = MutCell::new(v0_1);
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<Option<CancellationToken>> = MutCell::new(v2.clone());
            let v3: MutCell<Array<(string, string)>> = MutCell::new(v3.clone());
            let v4 = MutCell::new(v4.clone());
            let v5 = MutCell::new(v5.clone());
            let v6: MutCell<bool> = MutCell::new(v6);
            let v7: MutCell<Option<string>> = MutCell::new(v7.clone());
            let v8: MutCell<u8> = MutCell::new(v8);
            '_method226: loop {
                break '_method226 ({
                    let patternInput: (i32, string) = Spiral::method101(
                        v1_1.get().clone(),
                        v2.get().clone(),
                        v3.get().clone(),
                        v4.get().clone(),
                        v5.get().clone(),
                        v6.get().clone(),
                        v7.get().clone(),
                    );
                    let v9: i32 = patternInput.0.clone();
                    let v10: string = patternInput.1.clone();
                    let v14: Spiral::US44 = if (v9) == 0_i32 {
                        Spiral::US44::US44_0(v9, v10.clone())
                    } else {
                        Spiral::US44::US44_1(v9, v10)
                    };
                    let patternInput_1: (bool, i32, string) = match &v14 {
                        Spiral::US44::US44_0(v14_0_0, v14_0_1) => {
                            (false, v14_0_0.clone(), v14_0_1.clone())
                        }
                        Spiral::US44::US44_1(v14_1_0, v14_1_1) => {
                            (true, v14_1_0.clone(), v14_1_1.clone())
                        }
                    };
                    let v24: string = patternInput_1.2.clone();
                    let v23: i32 = patternInput_1.1.clone();
                    let v22: bool = patternInput_1.0.clone();
                    if if (v22) == false {
                        true
                    } else {
                        (v8.get().clone()) >= (v0_1.get().clone())
                    } {
                        (v23, v24.clone())
                    } else {
                        let v30: () = {
                            Spiral::closure88(
                                v0_1.get().clone(),
                                v8.get().clone(),
                                v23,
                                v24,
                                v22,
                                (),
                            );
                            ()
                        };
                        {
                            let v0_1_temp: u8 = v0_1.get().clone();
                            let v1_1_temp: string = v1_1.get().clone();
                            let v2_temp: Option<CancellationToken> = v2.get().clone();
                            let v3_temp: Array<(string, string)> = v3.get().clone();
                            let v4_temp = v4.get().clone();
                            let v5_temp = v5.get().clone();
                            let v6_temp: bool = v6.get().clone();
                            let v7_temp: Option<string> = v7.get().clone();
                            let v8_temp: u8 = (v8.get().clone()) + 1_u8;
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            v5.set(v5_temp);
                            v6.set(v6_temp);
                            v7.set(v7_temp);
                            v8.set(v8_temp);
                            continue '_method226;
                        }
                    }
                });
            }
        }
        pub fn method225(
            v0_1: u8,
            v1_1: string,
            v2: Option<CancellationToken>,
            v3: Array<(string, string)>,
            v4: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v5: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v6: bool,
            v7: Option<string>,
        ) -> (i32, string) {
            Spiral::method226(v0_1, v1_1, v2, v3, v4, v5, v6, v7, 1_u8)
        }
        pub fn method221(
            v0_1: Spiral::US39,
            v1_1: string,
            v2: string,
            v3: string,
            v4: Spiral::US13,
        ) -> (i32, string) {
            let v175: string = sprintf!(
                "dotnet fable \"{}\" --optimize --lang {} --extension .{} --outDir \"{}\"{}{}",
                v3,
                v2.clone(),
                v2,
                v1_1,
                concat(new_array(&[
                    string(" --define "),
                    if cfg!(windows) {
                        string("_WINDOWS")
                    } else {
                        string("_LINUX")
                    }
                ])),
                match &v0_1 {
                    Spiral::US39::US39_0(v0_1_0_0) => {
                        let v57: Spiral::US40 = match &v0_1 {
                            Spiral::US39::US39_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                        let v110: Spiral::US5 = if if let Spiral::US40::US40_0(v57_0_0) = &v57 {
                            string("") == (v57_0_0.clone())
                        } else {
                            false
                        } {
                            Spiral::US5::US5_0(string("Wasm"))
                        } else {
                            let v74: string = Spiral::method222();
                            let v94: Array<string> = split(
                                Spiral::method224(Spiral::US40::US40_0(string(""))),
                                v74,
                                -1_i32,
                                0_i32,
                            );
                            let v98: string = v94[0_i32].clone();
                            if startsWith3(Spiral::method224(v57.clone()), v98, false) {
                                Spiral::US5::US5_0(string("Wasm"))
                            } else {
                                Spiral::US5::US5_1
                            }
                        };
                        let v164: Spiral::US5 = match &v110 {
                            Spiral::US5::US5_0(v110_0_0) => Spiral::US5::US5_0(
                                match &v110 {
                                    Spiral::US5::US5_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            _ => {
                                let v157: Spiral::US5 = if if let Spiral::US40::US40_1(v57_1_0) =
                                    &v57
                                {
                                    string("") == (v57_1_0.clone())
                                } else {
                                    false
                                } {
                                    Spiral::US5::US5_0(string("Contract"))
                                } else {
                                    let v121: string = Spiral::method222();
                                    let v141: Array<string> = split(
                                        Spiral::method224(Spiral::US40::US40_1(string(""))),
                                        v121,
                                        -1_i32,
                                        0_i32,
                                    );
                                    let v145: string = v141[0_i32].clone();
                                    if startsWith3(Spiral::method224(v57.clone()), v145, false) {
                                        Spiral::US5::US5_0(string("Contract"))
                                    } else {
                                        Spiral::US5::US5_1
                                    }
                                };
                                match &v157 {
                                    Spiral::US5::US5_0(v157_0_0) => Spiral::US5::US5_0(
                                        match &v157 {
                                            Spiral::US5::US5_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                    ),
                                    _ => Spiral::US5::US5_1,
                                }
                            }
                        };
                        concat(new_array(&[
                            string(" --define "),
                            toUpper(match &v164 {
                                Spiral::US5::US5_0(v164_0_0) => match &v164 {
                                    Spiral::US5::US5_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                        ]))
                    }
                    _ => string(""),
                }
            );
            let v187: Result<string, string> = match &v4 {
                Spiral::US13::US13_0(v4_0_0) => Ok::<string, string>(v4_0_0.clone()),
                Spiral::US13::US13_1(v4_1_0) => Err::<string, string>(v4_1_0.clone()),
            };
            Spiral::method225(
                3_u8,
                v175,
                None::<CancellationToken>,
                new_empty::<(string, string)>(),
                None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                true,
                v187.ok(),
            )
        }
        pub fn method230(v0_1: i32, v1_1: string) -> string {
            let v3: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v12: () = {
                Spiral::closure7(v3.clone(), string("{ "), ());
                ()
            };
            let v23: () = {
                Spiral::closure7(v3.clone(), string("exit_code"), ());
                ()
            };
            let v34: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v43: () = {
                Spiral::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v54: () = {
                Spiral::closure7(v3.clone(), string("; "), ());
                ()
            };
            let v65: () = {
                Spiral::closure7(v3.clone(), string("dotnet_fable_result"), ());
                ()
            };
            let v74: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v83: () = {
                Spiral::closure7(v3.clone(), v1_1, ());
                ()
            };
            let v94: () = {
                Spiral::closure7(v3.clone(), string(" }"), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method229(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
        ) -> string {
            let v10: string = Spiral::method230(v8, v9);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral.process_rust / dotnet fable error"),
                v10
            ))
        }
        pub fn closure89(v0_1: string, v1_1: i32, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v6: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v32: Option<i64> = patternInput.5.clone();
                let v31: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v30: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v29: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v28: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v27: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method229(
                    v27.clone(),
                    v28.clone(),
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    Spiral::method8(v27, v28, v29, v30, v31, v32),
                    Spiral::method82(),
                    v1_1,
                    v0_1,
                ))
            };
        }
        pub fn closure90(unitVar: (), v0_1: std::string::String) -> bool {
            contains(
                fable_library_rust::String_::fromString(v0_1),
                string("near-sdk"),
            )
        }
        pub fn method231() -> Func1<std::string::String, bool> {
            Func1::new(move |v: std::string::String| Spiral::closure90((), v))
        }
        pub fn method232(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn method233() -> string {
            string("(")
        }
        pub fn method234() -> string {
            string("(")
        }
        pub fn method236(
            v0_1: string,
            v1_1: regex::Regex,
        ) -> Vec<std::collections::HashMap<string, string>> {
            let v8: &str = &*v0_1;
            let v41: std::string::String = String::from(v8);
            let v69: bool = true;
            let _capture_move = (move || {
                //;
                let v71: Box<std::string::String> = Box::new(v41);
                let v73: &'static mut std::string::String = Box::leak(v71);
                let v75: regex::Regex = v1_1.clone();
                let v77: regex::CaptureMatches = v75.captures_iter(v73);
                let v79: bool = true;
                let _regex_captures: Vec<_> = v77
                    .map(|x| {
                        //;
                        let v81: regex::Captures<'static> = x;
                        let v83: Box<regex::Captures<'static>> = Box::new(v81);
                        let v85: &'static mut regex::Captures<'static> = Box::leak(v83);
                        let v87: regex::CaptureNames = v1_1.capture_names();
                        let v89: bool = true;
                        let _regex_captures: std::collections::HashMap<_, _> = v87
                            .map(|x| {
                                //;
                                let v91: string = x.unwrap_or("").to_string().into();
                                let v93: string = v91.clone().clone();
                                let v95: string = v85
                                    .name(&v91)
                                    .map(|x| x.as_str())
                                    .unwrap_or("")
                                    .to_string()
                                    .into();
                                let v101: bool = true;
                                LrcPtr::new((v93, v95))
                            })
                            .map(|x| std::sync::Arc::try_unwrap(x).unwrap_or_else(|x| (*x).clone()))
                            .collect();
                        let v103: std::collections::HashMap<string, string> = _regex_captures;
                        let v105: bool = true;
                        v103
                    })
                    .collect::<Vec<_>>();
                let v107: Vec<std::collections::HashMap<string, string>> = _regex_captures;
                let v109: bool = true;
                v107
            })();
            _capture_move
        }
        pub fn closure91(
            unitVar: (),
            v0_1: std::collections::HashMap<string, string>,
        ) -> Spiral::US45 {
            Spiral::US45::US45_0(v0_1)
        }
        pub fn method237() -> Func1<std::collections::HashMap<string, string>, Spiral::US45> {
            Func1::new(move |v: std::collections::HashMap<string, string>| Spiral::closure91((), v))
        }
        pub fn method238() -> string {
            string("a")
        }
        pub fn closure92(v0_1: u8, v1_1: i32, v2: string, v3: bool, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_1) {
                let v8: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v34: Option<i64> = patternInput.5.clone();
                let v33: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v32: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v31: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v30: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v29: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method227(
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    v33.clone(),
                    v34.clone(),
                    Spiral::method8(v29, v30, v31, v32, v33, v34),
                    Spiral::method12(),
                    v3,
                    sprintf!("{}/{}", v0_1, 3_u8),
                    v1_1,
                    v2,
                ))
            };
        }
        pub fn method235(v0_1: Spiral::US13, v1_1: string, v2: u8) -> (i32, string) {
            let v0_1: MutCell<Spiral::US13> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<u8> = MutCell::new(v2);
            '_method235: loop {
                break '_method235 ({
                    let v20: string = concat(new_array(&[
                        string("cargo fmt --manifest-path \""),
                        v1_1.get().clone(),
                        string("\" --"),
                    ]));
                    let v32: Result<string, string> = match &v0_1.get().clone() {
                        Spiral::US13::US13_0(v0_1_0_0) => Ok::<string, string>(v0_1_0_0.clone()),
                        Spiral::US13::US13_1(v0_1_1_0) => Err::<string, string>(v0_1_1_0.clone()),
                    };
                    let patternInput: (i32, string) = Spiral::method101(
                        v20,
                        None::<CancellationToken>,
                        new_empty::<(string, string)>(),
                        None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                        None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                        true,
                        v32.ok(),
                    );
                    let v50: string = patternInput.1.clone();
                    let v49: i32 = patternInput.0.clone();
                    let v227: Spiral::US44 = if (contains(
                        v50.clone(),
                        string("failed to load manifest for workspace member"),
                    )) == false
                    {
                        if (v49) == 0_i32 {
                            Spiral::US44::US44_0(v49, v50.clone())
                        } else {
                            Spiral::US44::US44_1(v49, v50.clone())
                        }
                    } else {
                        let v64: Result<regex::Regex, regex::Error> =
                            regex::Regex::new(&string("failed to read `(?<a>.*?Cargo.toml)`"));
                        let v80: Vec<std::collections::HashMap<string, string>> =
                            Spiral::method236(v50.clone(), v64.unwrap());
                        let v83: Option<std::collections::HashMap<string, string>> = tryItem(
                            0_i32,
                            fable_library_rust::NativeArray_::array_from(v80.clone()),
                        );
                        let v108: Spiral::US45 =
                            defaultValue(Spiral::US45::US45_1, map(Spiral::method237(), v83));
                        let v147: Spiral::US46 = match &v108 {
                            Spiral::US45::US45_0(v108_0_0) => {
                                let v113: string = Spiral::method238();
                                let v115: Option<string> = std::collections::HashMap::get(
                                    &match &v108 {
                                        Spiral::US45::US45_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                    &v113,
                                )
                                .map(|x| x)
                                .cloned();
                                Spiral::US46::US46_0(defaultValue(
                                    Spiral::US5::US5_1,
                                    map(Spiral::method6(), v115),
                                ))
                            }
                            _ => Spiral::US46::US46_1,
                        };
                        let v154: Spiral::US5 = if let Spiral::US46::US46_0(v147_0_0) = &v147 {
                            let v148: Spiral::US5 = v147_0_0.clone();
                            if let Spiral::US5::US5_0(v148_0_0) = &v148 {
                                Spiral::US5::US5_0(v148_0_0.clone())
                            } else {
                                Spiral::US5::US5_1
                            }
                        } else {
                            Spiral::US5::US5_1
                        };
                        match &v154 {
                            Spiral::US5::US5_0(v154_0_0) => {
                                let v156: string = match &v154 {
                                    Spiral::US5::US5_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone();
                                if (Spiral::method38(v156.clone())) == false {
                                    let v166: LrcPtr<dyn IDisposable> = Spiral::method78(
                                        defaultValue(string(""), Spiral::method41(v156.clone())),
                                    );
                                    let v170: DateTime = DateTime::now();
                                    let v193: string =
                                        toString(Spiral::method215(new_guid(), v170));
                                    let v218: string =
                                                     append((append((append((append((append((append((append((append((append((append((append((append((append(string("[package]\n"),
                                                                                                                                                            (concat(new_array(&[string("name = \"spiral_"),
                                                                                                                                                                                v193.clone(),
                                                                                                                                                                                string("\"")]))))),
                                                                                                                                                    string("\n"))),
                                                                                                                                            string("version = \"0.0.1\""))),
                                                                                                                                    string("\n"))),
                                                                                                                            string("edition = \"2021\""))),
                                                                                                                    string("\n"))),
                                                                                                            string(""))),
                                                                                                    string("\n"))),
                                                                                            string("[[bin]]"))),
                                                                                    string("\n"))),
                                                                            (concat(new_array(&[string("name = \"spiral_"),
                                                                                                v193,
                                                                                                string("\"")]))))),
                                                                    string("\n"))),
                                                            string("path = \"spiral.rs\""));
                                    std::fs::write(&*v156, &*v218).unwrap();
                                    ()
                                }
                                if (v49) == 0_i32 {
                                    Spiral::US44::US44_0(v49, v50.clone())
                                } else {
                                    Spiral::US44::US44_1(v49, v50.clone())
                                }
                            }
                            _ => Spiral::US44::US44_1(v49, v50.clone()),
                        }
                    };
                    let patternInput_1: (bool, i32, string) = match &v227 {
                        Spiral::US44::US44_0(v227_0_0, v227_0_1) => {
                            (false, v227_0_0.clone(), v227_0_1.clone())
                        }
                        Spiral::US44::US44_1(v227_1_0, v227_1_1) => {
                            (true, v227_1_0.clone(), v227_1_1.clone())
                        }
                    };
                    let v237: string = patternInput_1.2.clone();
                    let v236: i32 = patternInput_1.1.clone();
                    let v235: bool = patternInput_1.0.clone();
                    if if (v235) == false {
                        true
                    } else {
                        (v2.get().clone()) >= 3_u8
                    } {
                        (v236, v237.clone())
                    } else {
                        let v243: () = {
                            Spiral::closure92(v2.get().clone(), v236, v237, v235, ());
                            ()
                        };
                        {
                            let v0_1_temp: Spiral::US13 = v0_1.get().clone();
                            let v1_1_temp: string = v1_1.get().clone();
                            let v2_temp: u8 = (v2.get().clone()) + 1_u8;
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            continue '_method235;
                        }
                    }
                });
            }
        }
        pub fn method240(v0_1: i32, v1_1: string) -> string {
            let v3: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v12: () = {
                Spiral::closure7(v3.clone(), string("{ "), ());
                ()
            };
            let v23: () = {
                Spiral::closure7(v3.clone(), string("exit_code"), ());
                ()
            };
            let v34: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v43: () = {
                Spiral::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v54: () = {
                Spiral::closure7(v3.clone(), string("; "), ());
                ()
            };
            let v65: () = {
                Spiral::closure7(v3.clone(), string("cargo_fmt_result"), ());
                ()
            };
            let v74: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v83: () = {
                Spiral::closure7(v3.clone(), v1_1, ());
                ()
            };
            let v94: () = {
                Spiral::closure7(v3.clone(), string(" }"), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method239(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
        ) -> string {
            let v10: string = Spiral::method240(v8, v9);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral.process_rust / cargo fmt error"),
                v10
            ))
        }
        pub fn closure93(v0_1: string, v1_1: i32, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v6: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v32: Option<i64> = patternInput.5.clone();
                let v31: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v30: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v29: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v28: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v27: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method239(
                    v27.clone(),
                    v28.clone(),
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    Spiral::method8(v27, v28, v29, v30, v31, v32),
                    Spiral::method82(),
                    v1_1,
                    v0_1,
                ))
            };
        }
        pub fn method241() -> string {
            string("{")
        }
        pub fn closure94(unitVar: (), v0_1: string) -> string {
            v0_1
        }
        pub fn closure95(v0_1: string, v1_1: string, v2: string) -> string {
            replace(v2, v0_1, v1_1)
        }
        pub fn closure96(v0_1: string, v1_1: string) -> string {
            replace(v1_1, v0_1, string("type DateTime = ();"))
        }
        pub fn method243(v0_1: i32, v1_1: string, v2: string, v3: bool, v4: string) -> string {
            let v6: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v15: () = {
                Spiral::closure7(v6.clone(), string("{ "), ());
                ()
            };
            let v26: () = {
                Spiral::closure7(v6.clone(), string("exit_code"), ());
                ()
            };
            let v37: () = {
                Spiral::closure7(v6.clone(), string(" = "), ());
                ()
            };
            let v46: () = {
                Spiral::closure7(v6.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v57: () = {
                Spiral::closure7(v6.clone(), string("; "), ());
                ()
            };
            let v68: () = {
                Spiral::closure7(v6.clone(), string("new_code_path"), ());
                ()
            };
            let v77: () = {
                Spiral::closure7(v6.clone(), string(" = "), ());
                ()
            };
            let v86: () = {
                Spiral::closure7(v6.clone(), v1_1, ());
                ()
            };
            let v95: () = {
                Spiral::closure7(v6.clone(), string("; "), ());
                ()
            };
            let v106: () = {
                Spiral::closure7(v6.clone(), string("external_command"), ());
                ()
            };
            let v115: () = {
                Spiral::closure7(v6.clone(), string(" = "), ());
                ()
            };
            let v124: () = {
                Spiral::closure7(v6.clone(), v2, ());
                ()
            };
            let v133: () = {
                Spiral::closure7(v6.clone(), string("; "), ());
                ()
            };
            let v144: () = {
                Spiral::closure7(v6.clone(), string("cleanup"), ());
                ()
            };
            let v153: () = {
                Spiral::closure7(v6.clone(), string(" = "), ());
                ()
            };
            let v165: () = {
                Spiral::closure7(
                    v6.clone(),
                    if v3 { string("true") } else { string("false") },
                    (),
                );
                ()
            };
            let v174: () = {
                Spiral::closure7(v6.clone(), string("; "), ());
                ()
            };
            let v185: () = {
                Spiral::closure7(v6.clone(), string("cargo_result"), ());
                ()
            };
            let v194: () = {
                Spiral::closure7(v6.clone(), string(" = "), ());
                ()
            };
            let v203: () = {
                Spiral::closure7(v6.clone(), v4, ());
                ()
            };
            let v214: () = {
                Spiral::closure7(v6.clone(), string(" }"), ());
                ()
            };
            v6.l0.get().clone()
        }
        pub fn method242(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
            v11: bool,
            v12: string,
        ) -> string {
            let v13: string = Spiral::method243(v8, v9, v10, v11, v12);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral.process_rust / error"),
                v13
            ))
        }
        pub fn closure97(v0_1: bool, v1_1: string, v2: string, v3: i32, v4: string, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v9: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v35: Option<i64> = patternInput.5.clone();
                let v34: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v33: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v32: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v31: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v30: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method242(
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    v33.clone(),
                    v34.clone(),
                    v35.clone(),
                    Spiral::method8(v30, v31, v32, v33, v34, v35),
                    Spiral::method82(),
                    v3,
                    v1_1,
                    v4,
                    v0_1,
                    v2,
                ))
            };
        }
        pub fn closure99(unitVar: (), v0_1: string) -> bool {
            if (contains(v0_1.clone(), string("profile [optimized] target"))) == false {
                if (contains(v0_1.clone(), string("profile [unoptimized] target"))) == false {
                    (contains(v0_1, string("profile [unoptimized + debuginfo] target"))) == false
                } else {
                    false
                }
            } else {
                false
            }
        }
        pub fn closure98(v0_1: string, unitVar: ()) -> string {
            let v16: LrcPtr<dyn IEnumerable_1<string>> = ofArray_1(skip(
                2_i32,
                skipWhile(
                    Func1::new(move |v: string| Spiral::closure99((), v)),
                    split(v0_1, string("\n"), -1_i32, 0_i32),
                ),
            ));
            join(Spiral::method75(), toArray_1(v16))
        }
        pub fn method245(v0_1: LrcPtr<Exception>, v1_1: string, v2: string, v3: string) -> string {
            let v5: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v14: () = {
                Spiral::closure7(v5.clone(), string("{ "), ());
                ()
            };
            let v25: () = {
                Spiral::closure7(v5.clone(), string("ex"), ());
                ()
            };
            let v36: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v45: std::string::String = format!("{:#?}", v0_1);
            let v84: () = {
                Spiral::closure7(v5.clone(), fable_library_rust::String_::fromString(v45), ());
                ()
            };
            let v95: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v106: () = {
                Spiral::closure7(v5.clone(), string("new_code_path"), ());
                ()
            };
            let v115: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v124: () = {
                Spiral::closure7(v5.clone(), v1_1, ());
                ()
            };
            let v133: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v144: () = {
                Spiral::closure7(v5.clone(), string("external_command"), ());
                ()
            };
            let v153: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v162: () = {
                Spiral::closure7(v5.clone(), v2, ());
                ()
            };
            let v171: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v182: () = {
                Spiral::closure7(v5.clone(), string("cargo_result"), ());
                ()
            };
            let v191: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v200: () = {
                Spiral::closure7(v5.clone(), v3, ());
                ()
            };
            let v211: () = {
                Spiral::closure7(v5.clone(), string(" }"), ());
                ()
            };
            v5.l0.get().clone()
        }
        pub fn method244(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: LrcPtr<Exception>,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral::method245(v8, v9, v10, v11);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral.process_rust / Exception"),
                v12
            ))
        }
        pub fn closure101(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v8: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v34: Option<i64> = patternInput.5.clone();
                let v33: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v32: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v31: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v30: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v29: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method244(
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    v33.clone(),
                    v34.clone(),
                    Spiral::method8(v29, v30, v31, v32, v33, v34),
                    Spiral::method82(),
                    v3,
                    v0_1,
                    v2,
                    v1_1,
                ))
            };
        }
        pub fn closure100(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral::US5 {
            let v6: () = {
                Spiral::closure101(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral::US5::US5_1
        }
        pub fn method247(v0_1: i32, v1_1: string, v2: string, v3: bool, v4: string) -> string {
            let v6: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v15: () = {
                Spiral::closure7(v6.clone(), string("{ "), ());
                ()
            };
            let v26: () = {
                Spiral::closure7(v6.clone(), string("exit_code"), ());
                ()
            };
            let v37: () = {
                Spiral::closure7(v6.clone(), string(" = "), ());
                ()
            };
            let v46: () = {
                Spiral::closure7(v6.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v57: () = {
                Spiral::closure7(v6.clone(), string("; "), ());
                ()
            };
            let v68: () = {
                Spiral::closure7(v6.clone(), string("new_code_path"), ());
                ()
            };
            let v77: () = {
                Spiral::closure7(v6.clone(), string(" = "), ());
                ()
            };
            let v86: () = {
                Spiral::closure7(v6.clone(), v1_1, ());
                ()
            };
            let v95: () = {
                Spiral::closure7(v6.clone(), string("; "), ());
                ()
            };
            let v106: () = {
                Spiral::closure7(v6.clone(), string("cargo_result"), ());
                ()
            };
            let v115: () = {
                Spiral::closure7(v6.clone(), string(" = "), ());
                ()
            };
            let v124: () = {
                Spiral::closure7(v6.clone(), v2, ());
                ()
            };
            let v133: () = {
                Spiral::closure7(v6.clone(), string("; "), ());
                ()
            };
            let v144: () = {
                Spiral::closure7(v6.clone(), string("cleanup"), ());
                ()
            };
            let v153: () = {
                Spiral::closure7(v6.clone(), string(" = "), ());
                ()
            };
            let v165: () = {
                Spiral::closure7(
                    v6.clone(),
                    if v3 { string("true") } else { string("false") },
                    (),
                );
                ()
            };
            let v174: () = {
                Spiral::closure7(v6.clone(), string("; "), ());
                ()
            };
            let v185: () = {
                Spiral::closure7(v6.clone(), string("spiral_wasm_result"), ());
                ()
            };
            let v194: () = {
                Spiral::closure7(v6.clone(), string(" = "), ());
                ()
            };
            let v203: () = {
                Spiral::closure7(v6.clone(), v4, ());
                ()
            };
            let v214: () = {
                Spiral::closure7(v6.clone(), string(" }"), ());
                ()
            };
            v6.l0.get().clone()
        }
        pub fn method246(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
            v11: bool,
            v12: string,
        ) -> string {
            let v13: string = Spiral::method247(v8, v9, v10, v11, v12);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral.process_rust / wasm error"),
                v13
            ))
        }
        pub fn closure102(v0_1: bool, v1_1: string, v2: string, v3: string, v4: i32, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v9: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v35: Option<i64> = patternInput.5.clone();
                let v34: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v33: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v32: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v31: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v30: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method246(
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    v33.clone(),
                    v34.clone(),
                    v35.clone(),
                    Spiral::method8(v30, v31, v32, v33, v34, v35),
                    Spiral::method82(),
                    v4,
                    v1_1,
                    v2,
                    v0_1,
                    concat(new_array(&[string("\n"), v3])),
                ))
            };
        }
        pub fn method249(
            v0_1: i32,
            v1_1: string,
            v2: string,
            v3: string,
            v4: bool,
            v5: string,
        ) -> string {
            let v7: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v16: () = {
                Spiral::closure7(v7.clone(), string("{ "), ());
                ()
            };
            let v27: () = {
                Spiral::closure7(v7.clone(), string("exit_code"), ());
                ()
            };
            let v38: () = {
                Spiral::closure7(v7.clone(), string(" = "), ());
                ()
            };
            let v47: () = {
                Spiral::closure7(v7.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v58: () = {
                Spiral::closure7(v7.clone(), string("; "), ());
                ()
            };
            let v69: () = {
                Spiral::closure7(v7.clone(), string("new_code_path"), ());
                ()
            };
            let v78: () = {
                Spiral::closure7(v7.clone(), string(" = "), ());
                ()
            };
            let v87: () = {
                Spiral::closure7(v7.clone(), v1_1, ());
                ()
            };
            let v96: () = {
                Spiral::closure7(v7.clone(), string("; "), ());
                ()
            };
            let v107: () = {
                Spiral::closure7(v7.clone(), string("wasm_path"), ());
                ()
            };
            let v116: () = {
                Spiral::closure7(v7.clone(), string(" = "), ());
                ()
            };
            let v125: () = {
                Spiral::closure7(v7.clone(), v2, ());
                ()
            };
            let v134: () = {
                Spiral::closure7(v7.clone(), string("; "), ());
                ()
            };
            let v145: () = {
                Spiral::closure7(v7.clone(), string("command"), ());
                ()
            };
            let v154: () = {
                Spiral::closure7(v7.clone(), string(" = "), ());
                ()
            };
            let v163: () = {
                Spiral::closure7(v7.clone(), v3, ());
                ()
            };
            let v172: () = {
                Spiral::closure7(v7.clone(), string("; "), ());
                ()
            };
            let v183: () = {
                Spiral::closure7(v7.clone(), string("cleanup"), ());
                ()
            };
            let v192: () = {
                Spiral::closure7(v7.clone(), string(" = "), ());
                ()
            };
            let v204: () = {
                Spiral::closure7(
                    v7.clone(),
                    if v4 { string("true") } else { string("false") },
                    (),
                );
                ()
            };
            let v213: () = {
                Spiral::closure7(v7.clone(), string("; "), ());
                ()
            };
            let v224: () = {
                Spiral::closure7(v7.clone(), string("cargo_result"), ());
                ()
            };
            let v233: () = {
                Spiral::closure7(v7.clone(), string(" = "), ());
                ()
            };
            let v242: () = {
                Spiral::closure7(v7.clone(), v5, ());
                ()
            };
            let v253: () = {
                Spiral::closure7(v7.clone(), string(" }"), ());
                ()
            };
            v7.l0.get().clone()
        }
        pub fn method248(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
            v11: string,
            v12: bool,
            v13: string,
        ) -> string {
            let v14: string = Spiral::method249(v8, v9, v10, v11, v12, v13);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral.process_rust / cargo error"),
                v14
            ))
        }
        pub fn closure103(
            v0_1: bool,
            v1_1: string,
            v2: string,
            v3: i32,
            v4: string,
            v5: string,
            unitVar: (),
        ) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v10: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v36: Option<i64> = patternInput.5.clone();
                let v35: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v34: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v33: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v32: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v31: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method248(
                    v31.clone(),
                    v32.clone(),
                    v33.clone(),
                    v34.clone(),
                    v35.clone(),
                    v36.clone(),
                    Spiral::method8(v31, v32, v33, v34, v35, v36),
                    Spiral::method82(),
                    v3,
                    v1_1,
                    v4,
                    v5,
                    v0_1,
                    concat(new_array(&[string("\n"), v2])),
                ))
            };
        }
        pub fn method251(v0_1: string, v1_1: LrcPtr<Spiral::UH5>) -> string {
            let v3: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v12: () = {
                Spiral::closure7(v3.clone(), string("{ "), ());
                ()
            };
            let v23: () = {
                Spiral::closure7(v3.clone(), string("new_code_path"), ());
                ()
            };
            let v34: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v43: () = {
                Spiral::closure7(v3.clone(), v0_1, ());
                ()
            };
            let v54: () = {
                Spiral::closure7(v3.clone(), string("; "), ());
                ()
            };
            let v65: () = {
                Spiral::closure7(v3.clone(), string("cleanup"), ());
                ()
            };
            let v74: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v87: () = {
                Spiral::closure7(v3.clone(), sprintf!("{:?}", v1_1), ());
                ()
            };
            let v98: () = {
                Spiral::closure7(v3.clone(), string(" }"), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method250(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
            v9: string,
            v10: bool,
            v11: string,
            v12: bool,
            v13: string,
            v14: bool,
            v15: string,
            v16: bool,
            v17: string,
            v18: bool,
        ) -> string {
            let v25: string = Spiral::method251(
                v8,
                LrcPtr::new(Spiral::UH5::UH5_1(
                    v9,
                    v10,
                    LrcPtr::new(Spiral::UH5::UH5_1(
                        v11,
                        v12,
                        LrcPtr::new(Spiral::UH5::UH5_1(
                            v13,
                            v14,
                            LrcPtr::new(Spiral::UH5::UH5_1(
                                v15,
                                v16,
                                LrcPtr::new(Spiral::UH5::UH5_1(
                                    v17,
                                    v18,
                                    LrcPtr::new(Spiral::UH5::UH5_0),
                                )),
                            )),
                        )),
                    )),
                )),
            );
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral.process_rust / cleanup"),
                v25
            ))
        }
        pub fn closure104(
            v0_1: string,
            v1_1: string,
            v2: bool,
            v3: string,
            v4: bool,
            v5: string,
            v6: bool,
            v7: string,
            v8: bool,
            v9: string,
            v10: bool,
            unitVar: (),
        ) {
            if Spiral::method7(Spiral::US0::US0_0) {
                let v15: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v41: Option<i64> = patternInput.5.clone();
                let v40: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v39: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v38: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v37: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v36: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method250(
                    v36.clone(),
                    v37.clone(),
                    v38.clone(),
                    v39.clone(),
                    v40.clone(),
                    v41.clone(),
                    Spiral::method8(v36, v37, v38, v39, v40, v41),
                    Spiral::method85(),
                    v0_1,
                    v1_1,
                    v2,
                    v3,
                    v4,
                    v5,
                    v6,
                    v7,
                    v8,
                    v9,
                    v10,
                ))
            };
        }
        pub fn closure105(unitVar: (), unitVar_1: ()) -> Spiral::US47 {
            Spiral::US47::US47_0
        }
        pub fn method253() -> Func0<Spiral::US47> {
            Func0::new(move || Spiral::closure105((), ()))
        }
        pub fn closure106(unitVar: (), v0_1: string) -> Spiral::US47 {
            Spiral::US47::US47_1(v0_1)
        }
        pub fn method254() -> Func1<string, Spiral::US47> {
            Func1::new(move |v: string| Spiral::closure106((), v))
        }
        pub fn method256(v0_1: string) -> string {
            let v2: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v11: () = {
                Spiral::closure7(v2.clone(), string("{ "), ());
                ()
            };
            let v22: () = {
                Spiral::closure7(v2.clone(), string("error\'"), ());
                ()
            };
            let v33: () = {
                Spiral::closure7(v2.clone(), string(" = "), ());
                ()
            };
            let v42: () = {
                Spiral::closure7(v2.clone(), v0_1, ());
                ()
            };
            let v53: () = {
                Spiral::closure7(v2.clone(), string(" }"), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method255(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
        ) -> string {
            let v9: string = Spiral::method256(v8);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("file_system.file_delete"),
                v9
            ))
        }
        pub fn closure107(v0_1: string, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v5: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v31: Option<i64> = patternInput.5.clone();
                let v30: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v29: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v28: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v27: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v26: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method255(
                    v26.clone(),
                    v27.clone(),
                    v28.clone(),
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    Spiral::method8(v26, v27, v28, v29, v30, v31),
                    Spiral::method82(),
                    v0_1,
                ))
            };
        }
        pub fn method252(v0_1: LrcPtr<Spiral::UH5>) {
            let v0_1: MutCell<LrcPtr<Spiral::UH5>> = MutCell::new(v0_1.clone());
            '_method252: loop {
                break '_method252 (match v0_1.get().clone().as_ref() {
                    Spiral::UH5::UH5_0 => (),
                    Spiral::UH5::UH5_1(v0_1_1_0, v0_1_1_1, v0_1_1_2) => {
                        let v6: Result<(), std::io::Error> = std::fs::remove_file(
                            &*match v0_1.get().clone().as_ref() {
                                Spiral::UH5::UH5_1(x, _, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        );
                        let v7 = Spiral::method49();
                        let v20: Result<(), string> = v6.map_err(|x| v7(x));
                        let v23 = Spiral::method253();
                        let v24 = Spiral::method254();
                        let v26: Spiral::US47 = match &v20 {
                            Err(v20_1_0) => v24(v20_1_0.clone()),
                            _ => v23(),
                        };
                        match &v26 {
                            Spiral::US47::US47_0 => (),
                            Spiral::US47::US47_1(v26_1_0) => {
                                let v32: () = {
                                    Spiral::closure107(
                                        match &v26 {
                                            Spiral::US47::US47_1(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                        (),
                                    );
                                    ()
                                };
                                ()
                            }
                        }
                        {
                            let v0_1_temp: LrcPtr<Spiral::UH5> =
                                match v0_1.get().clone().as_ref() {
                                    Spiral::UH5::UH5_1(_, _, x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone();
                            v0_1.set(v0_1_temp);
                            continue '_method252;
                        }
                    }
                });
            }
        }
        pub fn method257(v0_1: string) -> string {
            v0_1
        }
        pub fn closure109(unitVar: (), v0_1: std::fs::FileType) -> Spiral::US48 {
            Spiral::US48::US48_0(v0_1)
        }
        pub fn method258() -> Func1<std::fs::FileType, Spiral::US48> {
            Func1::new(move |v: std::fs::FileType| Spiral::closure109((), v))
        }
        pub fn closure110(unitVar: (), v0_1: std::string::String) -> Spiral::US48 {
            Spiral::US48::US48_1(v0_1)
        }
        pub fn method259() -> Func1<std::string::String, Spiral::US48> {
            Func1::new(move |v: std::string::String| Spiral::closure110((), v))
        }
        pub fn method260(v0_1: string) -> string {
            let v12: &str = &*v0_1;
            let v45: std::string::String = String::from(v12);
            let v78: std::path::PathBuf = std::path::PathBuf::from(v45);
            let v106: Option<&std::ffi::OsStr> = v78.file_name();
            let v108: bool = true;
            let _optionm_map_ = v106.map(|x| {
                //;
                let v110: &std::ffi::OsStr = x;
                let v112: std::ffi::OsString = v110.to_os_string();
                let v114: Option<&str> = v112.to_str();
                let v116: &str = v114.unwrap();
                let v123: std::string::String = String::from(v116);
                let v151: string = fable_library_rust::String_::fromString(v123);
                let v153: bool = true;
                v151
            });
            let v155: Option<string> = _optionm_map_;
            let v180: Spiral::US5 = defaultValue(Spiral::US5::US5_1, map(Spiral::method6(), v155));
            match &v180 {
                Spiral::US5::US5_0(v180_0_0) => match &v180 {
                    Spiral::US5::US5_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => string(""),
            }
        }
        pub fn closure108(
            v0_1: string,
            v1_1: async_walkdir::DirEntry,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = async_walkdir::Filtering> + Send>>
        {
            let v3: bool = true;
            let __future_init = Box::pin(
                /*;
                let v5: bool = */
                async {
                    /*;
                    let v7: bool = */
                    ();
                    let v9: bool = true;
                    let __future_init = Box::pin(
                        /*;
                        let v11: bool = */
                        async move {
                            /*;
                            let v13: bool = */
                            ();
                            let v15: async_walkdir::DirEntry = v1_1.clone();
                            let v17: std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                            Output = Result<std::fs::FileType, std::io::Error>,
                                        > + Send,
                                >,
                            > = Box::pin(async_walkdir::DirEntry::file_type(&v15));
                            let v19: Result<std::fs::FileType, std::io::Error> = v17.await;
                            let v20 = Spiral::method79();
                            let v33: Result<std::fs::FileType, std::string::String> =
                                v19.map_err(|x| v20(x));
                            let v36 = Spiral::method258();
                            let v37 = Spiral::method259();
                            let v39: Spiral::US48 = match &v33 {
                                Err(v33_1_0) => v37(v33_1_0.clone()),
                                Ok(v33_0_0) => v36(v33_0_0.clone()),
                            };
                            let v284: Spiral::US49 = if let Spiral::US48::US48_0(v39_0_0) = &v39 {
                                if (std::fs::FileType::is_dir(&v39_0_0.clone())) == false {
                                    Spiral::US49::US49_0
                                } else {
                                    let v48: std::path::PathBuf =
                                        async_walkdir::DirEntry::path(&v1_1.clone());
                                    let v55: std::path::Display = v48.display();
                                    let v88: std::string::String = format!("{}", v55);
                                    let v116: string = fable_library_rust::String_::fromString(v88);
                                    if (startsWith3(
                                        Spiral::method260(v116.clone()),
                                        v0_1.clone(),
                                        false,
                                    )) == false
                                    {
                                        Spiral::US49::US49_1
                                    } else {
                                        let v124: Option<string> = Spiral::method41(v116);
                                        let v149: Spiral::US5 = defaultValue(
                                            Spiral::US5::US5_1,
                                            map(Spiral::method6(), v124),
                                        );
                                        if let Spiral::US5::US5_0(v149_0_0) = &v149 {
                                            if (contains(v149_0_0.clone(), v0_1.clone())) == false {
                                                Spiral::US49::US49_2
                                            } else {
                                                Spiral::US49::US49_1
                                            }
                                        } else {
                                            Spiral::US49::US49_1
                                        }
                                    }
                                }
                            } else {
                                let v167: std::path::PathBuf = async_walkdir::DirEntry::path(&v1_1);
                                let v174: std::path::Display = v167.display();
                                let v207: std::string::String = format!("{}", v174);
                                let v235: string = fable_library_rust::String_::fromString(v207);
                                if (startsWith3(
                                    Spiral::method260(v235.clone()),
                                    v0_1.clone(),
                                    false,
                                )) == false
                                {
                                    Spiral::US49::US49_1
                                } else {
                                    let v243: Option<string> = Spiral::method41(v235);
                                    let v268: Spiral::US5 = defaultValue(
                                        Spiral::US5::US5_1,
                                        map(Spiral::method6(), v243),
                                    );
                                    if let Spiral::US5::US5_0(v268_0_0) = &v268 {
                                        if (contains(v268_0_0.clone(), v0_1)) == false {
                                            Spiral::US49::US49_2
                                        } else {
                                            Spiral::US49::US49_1
                                        }
                                    } else {
                                        Spiral::US49::US49_1
                                    }
                                }
                            };
                            let v287: string = string("}");
                            let v292: bool = true;
                            let _fix_closure_v289 = v284;
                            let v299: string = append(
                                (append(
                                    (append(
                                        (append(string("true; _fix_closure_v289 "), (v287))),
                                        string("); "),
                                    )),
                                    string(""),
                                )),
                                string(" // rust.fix_closure\'"),
                            );
                            let v300: bool = true;
                            _fix_closure_v289
                        },
                    ); // rust.fix_closure';
                    let v302 = __future_init;
                    let v304: std::pin::Pin<
                        Box<dyn std::future::Future<Output = Spiral::US49> + Send>,
                    > = v302;
                    let v306: Spiral::US49 = v304.await;
                    let v315: async_walkdir::Filtering = match &v306 {
                        Spiral::US49::US49_0 => async_walkdir::Filtering::Ignore,
                        Spiral::US49::US49_1 => async_walkdir::Filtering::IgnoreDir,
                        _ => async_walkdir::Filtering::Continue,
                    };
                    let v316: string = string("}");
                    let v321: bool = true;
                    let _fix_closure_v318 = v315;
                    let v328: string = append(
                        (append(
                            (append(
                                (append(string("true; _fix_closure_v318 "), (v316))),
                                string("); "),
                            )),
                            string(""),
                        )),
                        string(" // rust.fix_closure\'"),
                    );
                    let v329: bool = true;
                    _fix_closure_v318
                },
            ); // rust.fix_closure';
            let v331 = __future_init;
            v331
        }
        pub fn closure112(unitVar: (), v0_1: async_walkdir::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method262() -> Func1<async_walkdir::Error, std::string::String> {
            Func1::new(move |v: async_walkdir::Error| Spiral::closure112((), v))
        }
        pub fn closure113(unitVar: (), v0_1: async_walkdir::DirEntry) -> Spiral::US50 {
            Spiral::US50::US50_0(v0_1)
        }
        pub fn method263() -> Func1<async_walkdir::DirEntry, Spiral::US50> {
            Func1::new(move |v: async_walkdir::DirEntry| Spiral::closure113((), v))
        }
        pub fn closure114(unitVar: (), v0_1: std::string::String) -> Spiral::US50 {
            Spiral::US50::US50_1(v0_1)
        }
        pub fn method264() -> Func1<std::string::String, Spiral::US50> {
            Func1::new(move |v: std::string::String| Spiral::closure114((), v))
        }
        pub fn method266(v0_1: std::string::String) -> string {
            let v2: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v11: () = {
                Spiral::closure7(v2.clone(), string("{ "), ());
                ()
            };
            let v22: () = {
                Spiral::closure7(v2.clone(), string("error"), ());
                ()
            };
            let v33: () = {
                Spiral::closure7(v2.clone(), string(" = "), ());
                ()
            };
            let v42: std::string::String = format!("{:#?}", v0_1);
            let v81: () = {
                Spiral::closure7(v2.clone(), fable_library_rust::String_::fromString(v42), ());
                ()
            };
            let v92: () = {
                Spiral::closure7(v2.clone(), string(" }"), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method265(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: std::string::String,
        ) -> string {
            let v9: string = Spiral::method266(v8);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral.process_typescript / stream_filter_map"),
                v9
            ))
        }
        pub fn closure115(v0_1: std::string::String, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v5: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v31: Option<i64> = patternInput.5.clone();
                let v30: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v29: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v28: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v27: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v26: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method265(
                    v26.clone(),
                    v27.clone(),
                    v28.clone(),
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    Spiral::method8(v26, v27, v28, v29, v30, v31),
                    Spiral::method82(),
                    v0_1,
                ))
            };
        }
        pub fn closure111(
            v0_1: string,
            v1_1: Result<async_walkdir::DirEntry, async_walkdir::Error>,
        ) -> Option<(string, string)> {
            let v2 = Spiral::method262();
            let v15: Result<async_walkdir::DirEntry, std::string::String> = v1_1.map_err(|x| v2(x));
            let v18 = Spiral::method263();
            let v19 = Spiral::method264();
            let v21: Spiral::US50 = match &v15 {
                Err(v15_1_0) => v19(v15_1_0.clone()),
                Ok(v15_0_0) => v18(v15_0_0.clone()),
            };
            let v245: Spiral::US51 = match &v21 {
                Spiral::US50::US50_0(v21_0_0) => {
                    let v26: std::path::PathBuf = async_walkdir::DirEntry::path(&v21_0_0.clone());
                    let v33: std::path::Display = v26.display();
                    let v66: std::string::String = format!("{}", v33);
                    let v94: string = fable_library_rust::String_::fromString(v66);
                    let v95: string =
                        concat(new_array(&[v0_1.clone(), string("\\.(?<a>[-\\d\\w.]+)$")]));
                    let v97: Result<regex::Regex, regex::Error> = regex::Regex::new(&v95);
                    let v113: Vec<std::collections::HashMap<string, string>> =
                        Spiral::method236(v94.clone(), v97.unwrap());
                    let v116: Option<std::collections::HashMap<string, string>> = tryItem(
                        0_i32,
                        fable_library_rust::NativeArray_::array_from(v113.clone()),
                    );
                    let v141: Spiral::US45 =
                        defaultValue(Spiral::US45::US45_1, map(Spiral::method237(), v116));
                    let v180: Spiral::US46 = match &v141 {
                        Spiral::US45::US45_0(v141_0_0) => {
                            let v146: string = Spiral::method238();
                            let v148: Option<string> = std::collections::HashMap::get(
                                &match &v141 {
                                    Spiral::US45::US45_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                                &v146,
                            )
                            .map(|x| x)
                            .cloned();
                            Spiral::US46::US46_0(defaultValue(
                                Spiral::US5::US5_1,
                                map(Spiral::method6(), v148),
                            ))
                        }
                        _ => Spiral::US46::US46_1,
                    };
                    let v187: Spiral::US5 = if let Spiral::US46::US46_0(v180_0_0) = &v180 {
                        let v181: Spiral::US5 = v180_0_0.clone();
                        if let Spiral::US5::US5_0(v181_0_0) = &v181 {
                            Spiral::US5::US5_0(v181_0_0.clone())
                        } else {
                            Spiral::US5::US5_1
                        }
                    } else {
                        Spiral::US5::US5_1
                    };
                    match &v187 {
                        Spiral::US5::US5_0(v187_0_0) => Spiral::US51::US51_0(
                            v94.clone(),
                            match &v187 {
                                Spiral::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ),
                        _ => Spiral::US51::US51_1,
                    }
                }
                Spiral::US50::US50_1(v21_1_0) => {
                    let v196: () = {
                        Spiral::closure115(v21_1_0.clone(), ());
                        ()
                    };
                    Spiral::US51::US51_1
                }
            };
            match &v245 {
                Spiral::US51::US51_0(v245_0_0, v245_0_1) => Some((
                    match &v245 {
                        Spiral::US51::US51_0(x, _) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone(),
                    match &v245 {
                        Spiral::US51::US51_0(_, x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone(),
                )),
                _ => None::<(string, string)>,
            }
        }
        pub fn method261(
            v0_1: string,
        ) -> Func1<Result<async_walkdir::DirEntry, async_walkdir::Error>, Option<(string, string)>>
        {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: Result<async_walkdir::DirEntry, async_walkdir::Error>| {
                    Spiral::closure111(v0_1.clone(), v)
                }
            })
        }
        pub fn closure116(unitVar: (), _arg: (string, string)) -> (string, string) {
            (_arg.0.clone(), _arg.1.clone())
        }
        pub fn closure117(unitVar: (), _arg: (string, string)) -> Spiral::US51 {
            Spiral::US51::US51_0(_arg.0.clone(), _arg.1.clone())
        }
        pub fn method267() -> Func1<(string, string), Spiral::US51> {
            Func1::new(move |arg10_0040: (string, string)| Spiral::closure117((), arg10_0040))
        }
        pub fn method269(v0_1: Spiral::US51) -> string {
            let v2: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v11: () = {
                Spiral::closure7(v2.clone(), string("{ "), ());
                ()
            };
            let v22: () = {
                Spiral::closure7(v2.clone(), string("version"), ());
                ()
            };
            let v33: () = {
                Spiral::closure7(v2.clone(), string(" = "), ());
                ()
            };
            let v46: () = {
                Spiral::closure7(v2.clone(), sprintf!("{:?}", v0_1), ());
                ()
            };
            let v57: () = {
                Spiral::closure7(v2.clone(), string(" }"), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method268(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: Spiral::US51,
        ) -> string {
            let v9: string = Spiral::method269(v8);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral.process_typescript"),
                v9
            ))
        }
        pub fn closure118(v0_1: Spiral::US51, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_1) {
                let v5: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v31: Option<i64> = patternInput.5.clone();
                let v30: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v29: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v28: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v27: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v26: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method268(
                    v26.clone(),
                    v27.clone(),
                    v28.clone(),
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    Spiral::method8(v26, v27, v28, v29, v30, v31),
                    Spiral::method12(),
                    v0_1,
                ))
            };
        }
        pub fn method270(v0_1: string, v1_1: string, v2: Spiral::US51) {
            match &v2 {
                Spiral::US51::US51_0(v2_0_0, v2_0_1) => {
                    let v4: string = match &v2 {
                        Spiral::US51::US51_0(_, x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    Spiral::method220(
                        Spiral::method36(
                            v1_1.clone(),
                            concat(new_array(&[
                                string("fable-library-"),
                                string("ts"),
                                string("."),
                                v4.clone(),
                            ])),
                        ),
                        Spiral::method36(
                            v0_1.clone(),
                            concat(new_array(&[
                                string("fable_modules/fable-library-"),
                                string("ts"),
                                string("."),
                                v4,
                            ])),
                        ),
                    )
                }
                _ => panic!(
                    "{}",
                    concat(new_array(&[
                        string("spiral.process_typescript / fable library not found / lib_path: "),
                        v1_1.clone()
                    ])),
                ),
            };
        }
        pub fn method271(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
        ) -> string {
            let v10: string = Spiral::method230(v8, v9);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral.process_typescript"),
                v10
            ))
        }
        pub fn closure119(v0_1: string, v1_1: i32, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v6: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v32: Option<i64> = patternInput.5.clone();
                let v31: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v30: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v29: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v28: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v27: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method271(
                    v27.clone(),
                    v28.clone(),
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    Spiral::method8(v27, v28, v29, v30, v31, v32),
                    Spiral::method82(),
                    v1_1,
                    v0_1,
                ))
            };
        }
        pub fn method273(v0_1: string) -> string {
            let v2: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v11: () = {
                Spiral::closure7(v2.clone(), string("{ "), ());
                ()
            };
            let v22: () = {
                Spiral::closure7(v2.clone(), string("new_code_path"), ());
                ()
            };
            let v33: () = {
                Spiral::closure7(v2.clone(), string(" = "), ());
                ()
            };
            let v42: () = {
                Spiral::closure7(v2.clone(), v0_1, ());
                ()
            };
            let v53: () = {
                Spiral::closure7(v2.clone(), string(" }"), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method272(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
        ) -> string {
            let v9: string = Spiral::method273(v8);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral.process_typescript"),
                v9
            ))
        }
        pub fn closure120(v0_1: string, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_1) {
                let v5: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v31: Option<i64> = patternInput.5.clone();
                let v30: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v29: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v28: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v27: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v26: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method272(
                    v26.clone(),
                    v27.clone(),
                    v28.clone(),
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    Spiral::method8(v26, v27, v28, v29, v30, v31),
                    Spiral::method12(),
                    v0_1,
                ))
            };
        }
        pub fn method274(
            v0_1: LrcPtr<Spiral::UH4>,
            v1_1: LrcPtr<Spiral::UH4>,
        ) -> LrcPtr<Spiral::UH4> {
            match v0_1.as_ref() {
                Spiral::UH4::UH4_0 => v1_1.clone(),
                Spiral::UH4::UH4_1(v0_1_1_0, v0_1_1_1, v0_1_1_2) => {
                    LrcPtr::new(Spiral::UH4::UH4_1(
                        match v0_1.as_ref() {
                            Spiral::UH4::UH4_1(x, _, _) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                        match v0_1.as_ref() {
                            Spiral::UH4::UH4_1(_, x, _) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                        Spiral::method274(
                            match v0_1.as_ref() {
                                Spiral::UH4::UH4_1(_, _, x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            v1_1.clone(),
                        ),
                    ))
                }
            }
        }
        pub fn method275(
            v0_1: LrcPtr<Spiral::UH4>,
            v1_1: List<(string, string)>,
        ) -> List<(string, string)> {
            match v0_1.as_ref() {
                Spiral::UH4::UH4_0 => v1_1.clone(),
                Spiral::UH4::UH4_1(v0_1_1_0, v0_1_1_1, v0_1_1_2) => cons(
                    (
                        match v0_1.as_ref() {
                            Spiral::UH4::UH4_1(x, _, _) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                        match v0_1.as_ref() {
                            Spiral::UH4::UH4_1(_, x, _) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    ),
                    Spiral::method275(
                        match v0_1.as_ref() {
                            Spiral::UH4::UH4_1(_, _, x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                        v1_1.clone(),
                    ),
                ),
            }
        }
        pub fn closure121(v0_1: string, unitVar: ()) -> string {
            let v13: LrcPtr<dyn IEnumerable_1<string>> =
                ofArray_1(split(v0_1, string("\n"), -1_i32, 0_i32));
            join(Spiral::method75(), toArray_1(v13))
        }
        pub fn method277(v0_1: LrcPtr<Exception>, v1_1: string, v2: string, v3: string) -> string {
            let v5: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v14: () = {
                Spiral::closure7(v5.clone(), string("{ "), ());
                ()
            };
            let v25: () = {
                Spiral::closure7(v5.clone(), string("ex"), ());
                ()
            };
            let v36: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v45: std::string::String = format!("{:#?}", v0_1);
            let v84: () = {
                Spiral::closure7(v5.clone(), fable_library_rust::String_::fromString(v45), ());
                ()
            };
            let v95: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v106: () = {
                Spiral::closure7(v5.clone(), string("new_code_path"), ());
                ()
            };
            let v115: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v124: () = {
                Spiral::closure7(v5.clone(), v1_1, ());
                ()
            };
            let v133: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v144: () = {
                Spiral::closure7(v5.clone(), string("external_command"), ());
                ()
            };
            let v153: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v162: () = {
                Spiral::closure7(v5.clone(), v2, ());
                ()
            };
            let v171: () = {
                Spiral::closure7(v5.clone(), string("; "), ());
                ()
            };
            let v182: () = {
                Spiral::closure7(v5.clone(), string("run_result"), ());
                ()
            };
            let v191: () = {
                Spiral::closure7(v5.clone(), string(" = "), ());
                ()
            };
            let v200: () = {
                Spiral::closure7(v5.clone(), v3, ());
                ()
            };
            let v211: () = {
                Spiral::closure7(v5.clone(), string(" }"), ());
                ()
            };
            v5.l0.get().clone()
        }
        pub fn method276(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: LrcPtr<Exception>,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral::method277(v8, v9, v10, v11);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral.process_typescript / Exception"),
                v12
            ))
        }
        pub fn closure123(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v8: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v34: Option<i64> = patternInput.5.clone();
                let v33: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v32: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v31: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v30: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v29: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method276(
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    v33.clone(),
                    v34.clone(),
                    Spiral::method8(v29, v30, v31, v32, v33, v34),
                    Spiral::method82(),
                    v3,
                    v0_1,
                    v2,
                    v1_1,
                ))
            };
        }
        pub fn closure122(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral::US5 {
            let v6: () = {
                Spiral::closure123(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral::US5::US5_1
        }
        pub fn method278(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral::method178(v8, v9, v10, v11);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral.process_typescript / error"),
                v12
            ))
        }
        pub fn closure124(v0_1: string, v1_1: string, v2: i32, v3: string, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v8: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v34: Option<i64> = patternInput.5.clone();
                let v33: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v32: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v31: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v30: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v29: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method278(
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    v33.clone(),
                    v34.clone(),
                    Spiral::method8(v29, v30, v31, v32, v33, v34),
                    Spiral::method82(),
                    v2,
                    v1_1,
                    v0_1,
                    v3,
                ))
            };
        }
        pub fn method279(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
        ) -> string {
            let v10: string = Spiral::method230(v8, v9);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral.process_python"),
                v10
            ))
        }
        pub fn closure125(v0_1: string, v1_1: i32, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v6: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v32: Option<i64> = patternInput.5.clone();
                let v31: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v30: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v29: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v28: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v27: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method279(
                    v27.clone(),
                    v28.clone(),
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    Spiral::method8(v27, v28, v29, v30, v31, v32),
                    Spiral::method82(),
                    v1_1,
                    v0_1,
                ))
            };
        }
        pub fn method280(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
        ) -> string {
            let v9: string = Spiral::method273(v8);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral.process_python"),
                v9
            ))
        }
        pub fn closure126(v0_1: string, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_1) {
                let v5: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v31: Option<i64> = patternInput.5.clone();
                let v30: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v29: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v28: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v27: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v26: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method280(
                    v26.clone(),
                    v27.clone(),
                    v28.clone(),
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    Spiral::method8(v26, v27, v28, v29, v30, v31),
                    Spiral::method12(),
                    v0_1,
                ))
            };
        }
        pub fn closure127(v0_1: string, unitVar: ()) -> string {
            let v13: LrcPtr<dyn IEnumerable_1<string>> =
                ofArray_1(split(v0_1, string("\n"), -1_i32, 0_i32));
            join(Spiral::method75(), toArray_1(v13))
        }
        pub fn method281(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: LrcPtr<Exception>,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral::method277(v8, v9, v10, v11);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral.process_python / Exception"),
                v12
            ))
        }
        pub fn closure129(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v8: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v34: Option<i64> = patternInput.5.clone();
                let v33: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v32: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v31: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v30: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v29: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method281(
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    v33.clone(),
                    v34.clone(),
                    Spiral::method8(v29, v30, v31, v32, v33, v34),
                    Spiral::method82(),
                    v3,
                    v0_1,
                    v2,
                    v1_1,
                ))
            };
        }
        pub fn closure128(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral::US5 {
            let v6: () = {
                Spiral::closure129(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral::US5::US5_1
        }
        pub fn method282(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral::method178(v8, v9, v10, v11);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral.process_python / error"),
                v12
            ))
        }
        pub fn closure130(v0_1: string, v1_1: string, v2: i32, v3: string, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_4) {
                let v8: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v34: Option<i64> = patternInput.5.clone();
                let v33: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v32: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v31: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v30: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v29: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method282(
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    v33.clone(),
                    v34.clone(),
                    Spiral::method8(v29, v30, v31, v32, v33, v34),
                    Spiral::method82(),
                    v2,
                    v1_1,
                    v0_1,
                    v3,
                ))
            };
        }
        pub fn method284(v0_1: std::string::String, v1_1: clap::ArgMatches) -> string {
            let v3: LrcPtr<Spiral::Mut3> = LrcPtr::new(Spiral::Mut3 {
                l0: MutCell::new(Spiral::method14()),
            });
            let v12: () = {
                Spiral::closure7(v3.clone(), string("{ "), ());
                ()
            };
            let v23: () = {
                Spiral::closure7(v3.clone(), string("subcommand"), ());
                ()
            };
            let v34: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v43: std::string::String = format!("{:#?}", v0_1);
            let v82: () = {
                Spiral::closure7(v3.clone(), fable_library_rust::String_::fromString(v43), ());
                ()
            };
            let v93: () = {
                Spiral::closure7(v3.clone(), string("; "), ());
                ()
            };
            let v104: () = {
                Spiral::closure7(v3.clone(), string("arg_matches"), ());
                ()
            };
            let v113: () = {
                Spiral::closure7(v3.clone(), string(" = "), ());
                ()
            };
            let v122: std::string::String = format!("{:#?}", v1_1);
            let v161: () = {
                Spiral::closure7(
                    v3.clone(),
                    fable_library_rust::String_::fromString(v122),
                    (),
                );
                ()
            };
            let v172: () = {
                Spiral::closure7(v3.clone(), string(" }"), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method283(
            v0_1: LrcPtr<Spiral::Mut0>,
            v1_1: LrcPtr<Spiral::Mut1>,
            v2: LrcPtr<Spiral::Mut2>,
            v3: LrcPtr<Spiral::Mut3>,
            v4: LrcPtr<Spiral::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: std::string::String,
            v9: clap::ArgMatches,
        ) -> string {
            let v10: string = Spiral::method284(v8, v9);
            Spiral::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral.run / invalid subcommand"),
                v10
            ))
        }
        pub fn closure131(v0_1: clap::ArgMatches, v1_1: std::string::String, unitVar: ()) {
            if Spiral::method7(Spiral::US0::US0_1) {
                let v6: () = {
                    Spiral::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral::Mut0>,
                    LrcPtr<Spiral::Mut1>,
                    LrcPtr<Spiral::Mut2>,
                    LrcPtr<Spiral::Mut3>,
                    LrcPtr<Spiral::Mut4>,
                    Option<i64>,
                ) = Spiral::TraceState::trace_state().get().clone().unwrap();
                let v32: Option<i64> = patternInput.5.clone();
                let v31: LrcPtr<Spiral::Mut4> = patternInput.4.clone();
                let v30: LrcPtr<Spiral::Mut3> = patternInput.3.clone();
                let v29: LrcPtr<Spiral::Mut2> = patternInput.2.clone();
                let v28: LrcPtr<Spiral::Mut1> = patternInput.1.clone();
                let v27: LrcPtr<Spiral::Mut0> = patternInput.0.clone();
                Spiral::method19(Spiral::method283(
                    v27.clone(),
                    v28.clone(),
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    Spiral::method8(v27, v28, v29, v30, v31, v32),
                    Spiral::method12(),
                    v1_1,
                    v0_1,
                ))
            };
        }
        pub fn closure132(unitVar: (), v0_1: serde_json::Error) -> string {
            let v7: std::string::String = format!("{}", v0_1);
            fable_library_rust::String_::fromString(v7)
        }
        pub fn method285() -> Func1<serde_json::Error, string> {
            Func1::new(move |v: serde_json::Error| Spiral::closure132((), v))
        }
        pub fn method20(
            v0_1: Spiral::US0,
            v1_1: clap::ArgMatches,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<string, string>>>> {
            let v3: bool = true;
            let __future_init = Box::pin(
                /*;
                let v5: bool = */
                async move {
                    /*;
                    let v7: bool = */
                    ();
                    let v10: Option<(std::string::String, clap::ArgMatches)> =
                        clap::ArgMatches::subcommand(Box::leak(Box::new(v1_1))).map(|(a, b)| {
                            (
                                Func1::new(move |v: &str| Spiral::closure11((), v))(a),
                                b.clone(),
                            )
                        });
                    let v36: Spiral::US6 =
                        defaultValue(Spiral::US6::US6_1, map(Spiral::method21(), v10));
                    let v7367: Array<(string, string)> = if let Spiral::US6::US6_0(
                        v36_0_0,
                        v36_0_1,
                    ) = &v36
                    {
                        let v41: clap::ArgMatches = v36_0_1.clone();
                        let v40: std::string::String = v36_0_0.clone();
                        if (fable_library_rust::String_::fromString(v40.clone())) == string("gleam")
                        {
                            let v45: string = Spiral::method22();
                            let v52: &str = &*v45;
                            let v80: Option<std::string::String> =
                                clap::ArgMatches::get_one(&v41.clone(), v52).cloned();
                            let v105: Spiral::US7 =
                                defaultValue(Spiral::US7::US7_1, map(Spiral::method23(), v80));
                            let v112: std::string::String = match &v105 {
                                Spiral::US7::US7_0(v105_0_0) => match &v105 {
                                    Spiral::US7::US7_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                                _ => panic!("{}", string("Option does not have a value."),),
                            };
                            let v114: string = fable_library_rust::String_::fromString(v112);
                            let v115: string = Spiral::method24();
                            let v122: &str = &*v115;
                            let v150: Option<std::string::String> =
                                clap::ArgMatches::get_one(&v41.clone(), v122).cloned();
                            let v175: Spiral::US7 =
                                defaultValue(Spiral::US7::US7_1, map(Spiral::method23(), v150));
                            let v236: Spiral::US8 = match &v175 {
                                Spiral::US7::US7_0(v175_0_0) => {
                                    let v181: string = fable_library_rust::String_::fromString(
                                        match &v175 {
                                            Spiral::US7::US7_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                    );
                                    let v186: string = toLower(string("JavaScript"));
                                    let v193: string = toLower(string("Erlang"));
                                    let v200: Spiral::US9 = if string("Erlang") == (v181.clone()) {
                                        Spiral::US9::US9_0(Spiral::US10::US10_0)
                                    } else {
                                        Spiral::US9::US9_1
                                    };
                                    Spiral::US8::US8_0(match &v200 {
                                        Spiral::US9::US9_0(v200_0_0) => Spiral::US9::US9_0(
                                            match &v200 {
                                                Spiral::US9::US9_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                        ),
                                        _ => {
                                            let v207: Spiral::US9 =
                                                if string("JavaScript") == (v181.clone()) {
                                                    Spiral::US9::US9_0(Spiral::US10::US10_1)
                                                } else {
                                                    Spiral::US9::US9_1
                                                };
                                            match &v207 {
                                                Spiral::US9::US9_0(v207_0_0) => Spiral::US9::US9_0(
                                                    match &v207 {
                                                        Spiral::US9::US9_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                ),
                                                _ => {
                                                    let v214: Spiral::US9 =
                                                        if (v193.clone()) == (v181.clone()) {
                                                            Spiral::US9::US9_0(Spiral::US10::US10_0)
                                                        } else {
                                                            Spiral::US9::US9_1
                                                        };
                                                    match &v214 {
                                                        Spiral::US9::US9_0(v214_0_0) => {
                                                            Spiral::US9::US9_0(
                                                                match &v214 {
                                                                    Spiral::US9::US9_0(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone(),
                                                            )
                                                        }
                                                        _ => {
                                                            let v221: Spiral::US9 =
                                                                if (v186.clone()) == (v181.clone())
                                                                {
                                                                    Spiral::US9::US9_0(
                                                                        Spiral::US10::US10_1,
                                                                    )
                                                                } else {
                                                                    Spiral::US9::US9_1
                                                                };
                                                            match &v221 {
                                                                Spiral::US9::US9_0(v221_0_0) => {
                                                                    Spiral::US9::US9_0(
                                                                        match &v221 {
                                                                            Spiral::US9::US9_0(
                                                                                x,
                                                                            ) => x.clone(),
                                                                            _ => unreachable!(),
                                                                        }
                                                                        .clone(),
                                                                    )
                                                                }
                                                                _ => Spiral::US9::US9_1,
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    })
                                }
                                _ => Spiral::US8::US8_1,
                            };
                            let v243: Spiral::US9 = if let Spiral::US8::US8_0(v236_0_0) = &v236 {
                                let v237: Spiral::US9 = v236_0_0.clone();
                                if let Spiral::US9::US9_0(v237_0_0) = &v237 {
                                    Spiral::US9::US9_0(v237_0_0.clone())
                                } else {
                                    Spiral::US9::US9_1
                                }
                            } else {
                                Spiral::US9::US9_1
                            };
                            let v247: Spiral::US10 = match &v243 {
                                Spiral::US9::US9_0(v243_0_0) => match &v243 {
                                    Spiral::US9::US9_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                                _ => Spiral::US10::US10_0,
                            };
                            let v248: string = Spiral::method25();
                            let v255: &str = &*v248;
                            let v283: Option<Vec<std::string::String>> =
                                clap::ArgMatches::get_many(&v41.clone(), v255)
                                    .map(|x| x.cloned().into_iter().collect());
                            let v308: Spiral::US11 =
                                defaultValue(Spiral::US11::US11_1, map(Spiral::method26(), v283));
                            let v314: Vec<std::string::String> =
                                new_empty::<std::string::String>().to_vec();
                            let v317: Vec<std::string::String> = match &v308 {
                                Spiral::US11::US11_0(v308_0_0) => match &v308 {
                                    Spiral::US11::US11_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                                _ => v314.clone(),
                            };
                            let v329: Result<Vec<u8>, std::io::Error> =
                                std::fs::read(&*v114.clone());
                            let v374: Vec<u8> = Spiral::method27(v329.unwrap());
                            let v376: Result<std::string::String, std::string::FromUtf8Error> =
                                std::string::String::from_utf8(v374);
                            let v380: std::string::String = v376.unwrap();
                            let v415: string = fable_library_rust::String_::fromString(v380);
                            let v423: string =
                                Spiral::method29(Spiral::method28(string("gleam"), v415.clone()));
                            let v425: Spiral::US5 = Spiral::method35(Spiral::method34());
                            let v431: Spiral::US5 = match &v425 {
                                Spiral::US5::US5_0(v425_0_0) => Spiral::US5::US5_0(
                                    match &v425 {
                                        Spiral::US5::US5_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                ),
                                _ => Spiral::method35(string(
                                    "/home/runner/work/spiral/polyglot/target/Builder/spiral",
                                )),
                            };
                            let v437: Spiral::US5 = match &v431 {
                                Spiral::US5::US5_0(v431_0_0) => Spiral::US5::US5_0(
                                    match &v431 {
                                        Spiral::US5::US5_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                ),
                                _ => Spiral::method35(string("/workspaces")),
                            };
                            let v441: string = match &v437 {
                                Spiral::US5::US5_0(v437_0_0) => match &v437 {
                                    Spiral::US5::US5_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                                _ => panic!("{}", string("Option does not have a value."),),
                            };
                            let v456: string = Spiral::method36(
                                if string("deps") == (Spiral::method55(v441.clone())) {
                                    let v449: Spiral::US5 = Spiral::method35(
                                        Spiral::method41(v441.clone()).clone().unwrap(),
                                    );
                                    match &v449 {
                                        Spiral::US5::US5_0(v449_0_0) => match &v449 {
                                            Spiral::US5::US5_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                        _ => panic!("{}", string("Option does not have a value."),),
                                    }
                                } else {
                                    v441
                                },
                                string("polyglot"),
                            );
                            let v460: string = toLower(Spiral::method34());
                            let v465: string = toLower(v456);
                            let v474: Spiral::US13 = if startsWith3(v460, v465.clone(), false) {
                                Spiral::US13::US13_1(v465.clone())
                            } else {
                                Spiral::US13::US13_0(v465)
                            };
                            let v486: Result<string, string> = match &v474 {
                                Spiral::US13::US13_0(v474_0_0) => {
                                    Ok::<string, string>(v474_0_0.clone())
                                }
                                Spiral::US13::US13_1(v474_1_0) => {
                                    Err::<string, string>(v474_1_0.clone())
                                }
                            };
                            let v488: bool = true;
                            let _result_unwrap_or_else = v486.unwrap_or_else(|x| {
                                //;
                                let v490: string = x;
                                let v492: bool = true;
                                v490
                            });
                            let v495: string = Spiral::method69(_result_unwrap_or_else);
                            let v503: string = Spiral::method69(defaultValue(
                                string(""),
                                Spiral::method41(v114.clone()),
                            ));
                            let v506: string =
                                Spiral::method69(Spiral::method36(v503.clone(), string("..")));
                            let v508: string = Spiral::method36(v506.clone(), string("gleam.toml"));
                            let v511: Array<string> = new_array(&[
                                string("gleam_stdlib=\">=0.55.0 and <1.0.0\""),
                                string("gary=\">=1.1.0 and <2.0.0\""),
                            ]);
                            let v513: Vec<string> = v511.to_vec();
                            let v515: bool = true;
                            let _vec_map: Vec<_> = v513
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v517: string = x;
                                    let v524: &str = &*v517;
                                    let v557: std::string::String = String::from(v524);
                                    let v585: bool = true;
                                    v557
                                })
                                .collect::<Vec<_>>();
                            let v587: Vec<std::string::String> = _vec_map;
                            let v588: Vec<std::string::String> = Spiral::method73(v317);
                            let v589: Vec<std::string::String> = Spiral::method74(v587);
                            let v591: bool = true;
                            let mut v589 = v589;
                            let v593: bool = true;
                            v589.extend(v588);
                            let v595: Vec<std::string::String> = v589;
                            let v597: bool = true;
                            let _vec_map: Vec<_> = v595
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v599: std::string::String = x;
                                    let v601: string =
                                        fable_library_rust::String_::fromString(v599);
                                    let v620: string = if contains(v601.clone(), string("=")) {
                                        v601.clone()
                                    } else {
                                        if endsWith3(v601.clone(), string("]"), false) {
                                            concat(new_array(&[
                                                replace(
                                                    v601.clone(),
                                                    string("["),
                                                    string("={version=\'*\',features=["),
                                                ),
                                                string("}"),
                                            ]))
                                        } else {
                                            concat(new_array(&[v601, string("=\'*\'")]))
                                        }
                                    };
                                    let v622: bool = true;
                                    v620
                                })
                                .collect::<Vec<_>>();
                            let v624: Vec<string> = _vec_map;
                            let v626: Array<string> =
                                fable_library_rust::NativeArray_::array_from(v624.clone());
                            let _let__v631: LrcPtr<dyn IEnumerable_1<string>> =
                                delay(Func0::new({
                                    let v626 = v626.clone();
                                    move || {
                                        map_1(
                                            Func1::new({
                                                let v626 = v626.clone();
                                                move |i: i32| v626[i].clone()
                                            }),
                                            rangeNumeric(
                                                0_i32,
                                                1_i32,
                                                (get_Count(v626.clone())) - 1_i32,
                                            ),
                                        )
                                    }
                                }));
                            let v645: string = join(Spiral::method75(), toArray_1(_let__v631));
                            let v653: Spiral::US5 = if if let Spiral::US10::US10_0 = &v247 {
                                true
                            } else {
                                false
                            } {
                                Spiral::US5::US5_0(string("Erlang"))
                            } else {
                                Spiral::US5::US5_1
                            };
                            let v667: Spiral::US5 = match &v653 {
                                Spiral::US5::US5_0(v653_0_0) => Spiral::US5::US5_0(
                                    match &v653 {
                                        Spiral::US5::US5_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                ),
                                _ => {
                                    let v660: Spiral::US5 = if if let Spiral::US10::US10_1 = &v247 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral::US5::US5_0(string("JavaScript"))
                                    } else {
                                        Spiral::US5::US5_1
                                    };
                                    match &v660 {
                                        Spiral::US5::US5_0(v660_0_0) => Spiral::US5::US5_0(
                                            match &v660 {
                                                Spiral::US5::US5_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                        ),
                                        _ => Spiral::US5::US5_1,
                                    }
                                }
                            };
                            let v674: string = toLower(match &v667 {
                                Spiral::US5::US5_0(v667_0_0) => match &v667 {
                                    Spiral::US5::US5_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                                _ => panic!("{}", string("Option does not have a value."),),
                            });
                            Spiral::method76(
                                v508,
                                append(
                                    (append(
                                        (append(
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(
                                                            (append(
                                                                (concat(new_array(&[
                                                                    string("name = \""),
                                                                    if contains(
                                                                        v114.clone(),
                                                                        string("_real"),
                                                                    ) {
                                                                        string("main_real")
                                                                    } else {
                                                                        string("main")
                                                                    },
                                                                    string("\""),
                                                                ]))),
                                                                string("\n"),
                                                            )),
                                                            (concat(new_array(&[
                                                                string("target = \""),
                                                                v674,
                                                                string("\""),
                                                            ]))),
                                                        )),
                                                        string("\n"),
                                                    )),
                                                    string(""),
                                                )),
                                                string("\n"),
                                            )),
                                            string("[dependencies]"),
                                        )),
                                        string("\n"),
                                    )),
                                    (v645),
                                ),
                            );
                            {
                                let patternInput: (i32, string) = Spiral::method101(
                                    string("gleam check"),
                                    None::<CancellationToken>,
                                    new_empty::<(string, string)>(),
                                    None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                                    None::<
                                        Func1<
                                            std::sync::Arc<
                                                std::sync::Mutex<std::process::ChildStdin>,
                                            >,
                                            (),
                                        >,
                                    >,
                                    true,
                                    Some(v506.clone()),
                                );
                                let v723: i32 = patternInput.0.clone();
                                let patternInput_6: (
                                    Spiral::US5,
                                    Spiral::US5,
                                    Spiral::US5,
                                    Spiral::US5,
                                ) = if (v723) != 0_i32 {
                                    let v731: () = {
                                        Spiral::closure68(
                                            v114.clone(),
                                            patternInput.1.clone(),
                                            v723,
                                            (),
                                        );
                                        ()
                                    };
                                    (
                                        Spiral::US5::US5_0(string("gleam")),
                                        Spiral::US5::US5_1,
                                        Spiral::US5::US5_1,
                                        Spiral::US5::US5_1,
                                    )
                                } else {
                                    let v785: string = if if let Spiral::US10::US10_0 = &v247 {
                                        true
                                    } else {
                                        false
                                    } {
                                        concat(new_array(&[
                                            string("gleam run --no-print-progress \""),
                                            v114.clone(),
                                            string("\""),
                                        ]))
                                    } else {
                                        string("gleam build --no-print-progress")
                                    };
                                    let v789: Array<(string, string)> = new_array(&[
                                        (string("TRACE_LEVEL"), string("")),
                                        (string("GLEAM_LOG"), string("")),
                                        (string("GLEAM_LOG_NOCOLOUR"), string("")),
                                    ]);
                                    let patternInput_1: (i32, string) = Spiral::method101(
                                        v785.clone(),
                                        None::<CancellationToken>,
                                        v789.clone(),
                                        None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                                        None::<
                                            Func1<
                                                std::sync::Arc<
                                                    std::sync::Mutex<std::process::ChildStdin>,
                                                >,
                                                (),
                                            >,
                                        >,
                                        true,
                                        Some(v506.clone()),
                                    );
                                    let v813: string = patternInput_1.1.clone();
                                    let v812: i32 = patternInput_1.0.clone();
                                    let v814: i32 = get_Count(v789.clone());
                                    let v815: Array<string> = new_init(&string(""), v814);
                                    let v816: LrcPtr<Spiral::Mut5> = LrcPtr::new(Spiral::Mut5 {
                                        l0: MutCell::new(0_i32),
                                    });
                                    while Spiral::method32(v814, v816.clone()) {
                                        let v818: i32 = v816.l0.get().clone();
                                        let patternInput_2: (string, string) = v789[v818].clone();
                                        let v821: string = sprintf!(
                                            "$env:{}=\'\'{}\'\'",
                                            patternInput_2.0.clone(),
                                            patternInput_2.1.clone()
                                        );
                                        v815.get_mut()[v818 as usize] = v821;
                                        {
                                            let v822: i32 = (v818) + 1_i32;
                                            v816.l0.set(v822);
                                            ()
                                        }
                                    }
                                    {
                                        let v835: string = sprintf!(
                                            "pwsh -c \'{}; {}\'",
                                            join(string(";"), toArray_1(ofArray_1(v815.clone()))),
                                            v785
                                        );
                                        let patternInput_5: (
                                            Spiral::US5,
                                            Spiral::US5,
                                            Spiral::US5,
                                            Spiral::US5,
                                        ) = if (v812) != 0_i32 {
                                            let v842: () = {
                                                Spiral::closure69(
                                                    v114.clone(),
                                                    v813.clone(),
                                                    v812,
                                                    v835.clone(),
                                                    (),
                                                );
                                                ()
                                            };
                                            (
                                                Spiral::US5::US5_0(string("gleam")),
                                                Spiral::US5::US5_1,
                                                Spiral::US5::US5_1,
                                                Spiral::US5::US5_1,
                                            )
                                        } else {
                                            let v1411: string = if if let Spiral::US10::US10_0 =
                                                &v247
                                            {
                                                true
                                            } else {
                                                false
                                            } {
                                                v813
                                            } else {
                                                let v894: string = concat(new_array(&[
                                                    v506.clone(),
                                                    string("/build/dev/javascript/main/main.mjs"),
                                                ]));
                                                let v906: Result<Vec<u8>, std::io::Error> =
                                                    std::fs::read(&*v894.clone());
                                                let v951: Vec<u8> = Spiral::method27(v906.unwrap());
                                                let v953: Result<
                                                    std::string::String,
                                                    std::string::FromUtf8Error,
                                                > = std::string::String::from_utf8(v951);
                                                let v957: std::string::String = v953.unwrap();
                                                let v1000: string = replace(
                                                    fable_library_rust::String_::fromString(v957),
                                                    string("#app_"),
                                                    concat(new_array(&[
                                                        string("#app_"),
                                                        v423.clone(),
                                                    ])),
                                                );
                                                if (endsWith3(
                                                    v1000.clone(),
                                                    string("main()"),
                                                    false,
                                                )) == false
                                                {
                                                    Spiral::method76(
                                                        v894.clone(),
                                                        concat(new_array(&[
                                                            v1000,
                                                            string("\nmain()"),
                                                        ])),
                                                    );
                                                }
                                                {
                                                    let v1026:
                                                                    string =
                                                                concat(new_array(&[string("bunx --bun esbuild --bundle --minify --loader:.wasm=file --outdir="),
                                                                                   v503.clone(),
                                                                                   string(" "),
                                                                                   v894]));
                                                    let v1028: string =
                                                        Spiral::method3(string("PATH"));
                                                    let v1067: Spiral::US5 = if (v1028.clone())
                                                        == string("")
                                                    {
                                                        Spiral::US5::US5_1
                                                    } else {
                                                        Spiral::US5::US5_0(concat(new_array(&[
                                                            string("~/.bun/bin"),
                                                            if cfg!(windows) {
                                                                string(";")
                                                            } else {
                                                                string(":")
                                                            },
                                                            v1028,
                                                        ])))
                                                    };
                                                    let patternInput_3:
                                                                    (i32,
                                                                     string) =
                                                                Spiral::method101(v1026,
                                                                                  None::<CancellationToken>,
                                                                                  match &v1067
                                                                                      {
                                                                                      Spiral::US5::US5_0(v1067_0_0)
                                                                                      =>
                                                                                      new_array(&[(string("PATH"),
                                                                                                   match &v1067
                                                                                                       {
                                                                                                       Spiral::US5::US5_0(x)
                                                                                                       =>
                                                                                                       x.clone(),
                                                                                                       _
                                                                                                       =>
                                                                                                       unreachable!(),
                                                                                                   }.clone())]),
                                                                                      _
                                                                                      =>
                                                                                      new_empty::<(string,
                                                                                                   string)>(),
                                                                                  },
                                                                                  None::<Func1<(i32,
                                                                                                string,
                                                                                                bool),
                                                                                               Arc<Async<()>>>>,
                                                                                  None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                               ()>>,
                                                                                  true,
                                                                                  Some(v506));
                                                    let v1078: i32 = patternInput_3.0.clone();
                                                    if (v1078) != 0_i32 {
                                                        let v1086: () = {
                                                            Spiral::closure70(
                                                                v114.clone(),
                                                                patternInput_3.1.clone(),
                                                                v1078,
                                                                (),
                                                            );
                                                            ()
                                                        };
                                                        string("")
                                                    } else {
                                                        let v1193:
                                                                        string =
                                                                    append((append((append((append((append(string("<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link\n      data-trunk\n      rel=\"inline\"\n      href=\"../build/packages/lustre_ui/priv/static/lustre_ui.css\"\n    />\n    <link\n      data-trunk\n      rel=\"inline\"\n      type=\"module\"\n      href=\"main.js\"\n    />\n  </head>\n  <body>\n"),
                                                                                                           (concat(new_array(&[string("    <div id=\"app_"),
                                                                                                                               v423.clone(),
                                                                                                                               string("\"></div>")]))))),
                                                                                                   string("\n"))),
                                                                                           string("  </body>"))),
                                                                                   string("\n"))),
                                                                           string("</html>"));
                                                        let v1194: string = concat(new_array(&[
                                                            v503.clone(),
                                                            string("/index.html"),
                                                        ]));
                                                        Spiral::method76(v1194.clone(), v1193);
                                                        Spiral::method76(
                                                            concat(new_array(&[
                                                                v503.clone(),
                                                                string("/spiral_"),
                                                                v423.clone(),
                                                                string(".rs"),
                                                            ])),
                                                            string(""),
                                                        );
                                                        {
                                                            let v1223:
                                                                            string =
                                                                        append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append(string("[package]\n"),
                                                                                                                                                                                                               (concat(new_array(&[string("name = \"spiral_"),
                                                                                                                                                                                                                                   v423.clone(),
                                                                                                                                                                                                                                   string("\"")]))))),
                                                                                                                                                                                                       string("\n"))),
                                                                                                                                                                                               string(""))),
                                                                                                                                                                                       string("\n"))),
                                                                                                                                                                               string("[workspace]"))),
                                                                                                                                                                       string("\n"))),
                                                                                                                                                               string(""))),
                                                                                                                                                       string("\n"))),
                                                                                                                                               string("[lib]"))),
                                                                                                                                       string("\n"))),
                                                                                                                               string("crate-type = [\"cdylib\", \"rlib\"]"))),
                                                                                                                       string("\n"))),
                                                                                                               (concat(new_array(&[string("path = \"spiral_"),
                                                                                                                                   v423,
                                                                                                                                   string(".rs\"")]))))),
                                                                                                       string("\n"))),
                                                                                               string(""))),
                                                                                       string("\n"))),
                                                                               string("[dependencies]"));
                                                            Spiral::method76(
                                                                concat(new_array(&[
                                                                    v503.clone(),
                                                                    string("/Cargo.toml"),
                                                                ])),
                                                                v1223,
                                                            );
                                                            {
                                                                let patternInput_4:
                                                                                (i32,
                                                                                 string) =
                                                                            Spiral::method101(concat(new_array(&[string("trunk build --release --minify --dist="),
                                                                                                                 v503.clone(),
                                                                                                                 string(" --public-url=./ --no-sri")])),
                                                                                              None::<CancellationToken>,
                                                                                              new_array(&[(string("TRUNK_TOOLS_WASM_BINDGEN"),
                                                                                                           string("0.2.93"))]),
                                                                                              None::<Func1<(i32,
                                                                                                            string,
                                                                                                            bool),
                                                                                                           Arc<Async<()>>>>,
                                                                                              None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                           ()>>,
                                                                                              true,
                                                                                              Some(v503));
                                                                let v1251: i32 =
                                                                    patternInput_4.0.clone();
                                                                if (v1251) != 0_i32 {
                                                                    let v1259: () = {
                                                                        Spiral::closure71(
                                                                            v114.clone(),
                                                                            patternInput_4
                                                                                .1
                                                                                .clone(),
                                                                            v1251,
                                                                            (),
                                                                        );
                                                                        ()
                                                                    };
                                                                    string("")
                                                                } else {
                                                                    let v1317: Result<
                                                                        Vec<u8>,
                                                                        std::io::Error,
                                                                    > = std::fs::read(&*v1194);
                                                                    let v1362: Vec<u8> =
                                                                        Spiral::method27(
                                                                            v1317.unwrap(),
                                                                        );
                                                                    let v1364:
                                                                                    Result<std::string::String,
                                                                                           std::string::FromUtf8Error> =
                                                                                std::string::String::from_utf8(v1362);
                                                                    let v1368: std::string::String =
                                                                        v1364.unwrap();
                                                                    fable_library_rust::String_::fromString(v1368)
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            };
                                            let v1418: &str = &*v1411.clone();
                                            let v1451: std::string::String = String::from(v1418);
                                            let result: LrcPtr<MutCell<Spiral::US5>> =
                                                refCell(Spiral::US5::US5_1);
                                            try_catch(
                                                || {
                                                    result.set(Spiral::closure72(
                                                        (),
                                                        Spiral::closure73(v1411, ()),
                                                    ))
                                                },
                                                |ex: LrcPtr<Exception>| {
                                                    result.set(Spiral::closure74(
                                                        v114.clone(),
                                                        v835,
                                                        v1451,
                                                        ex.clone(),
                                                    ))
                                                },
                                            );
                                            {
                                                let v1483: Spiral::US5 = result.get().clone();
                                                let v1497: Option<string> = match &v1483 {
                                                    Spiral::US5::US5_0(v1483_0_0) => Some(
                                                        match &v1483 {
                                                            Spiral::US5::US5_0(x) => x.clone(),
                                                            _ => unreachable!(),
                                                        }
                                                        .clone(),
                                                    ),
                                                    _ => None::<string>,
                                                };
                                                (
                                                    Spiral::US5::US5_0(string("gleam")),
                                                    Spiral::US5::US5_0(v415),
                                                    Spiral::US5::US5_0(v114),
                                                    Spiral::US5::US5_0(v1497.unwrap()),
                                                )
                                            }
                                        };
                                        (
                                            patternInput_5.0.clone(),
                                            patternInput_5.1.clone(),
                                            patternInput_5.2.clone(),
                                            patternInput_5.3.clone(),
                                        )
                                    }
                                };
                                let v1511: Spiral::US5 = patternInput_6.3.clone();
                                let v1509: Spiral::US5 = patternInput_6.1.clone();
                                let v1508: Spiral::US5 = patternInput_6.0.clone();
                                let v1524: Array<(string, string)> = new_array(&[
                                    (
                                        string("extension"),
                                        match &v1508 {
                                            Spiral::US5::US5_0(v1508_0_0) => match &v1508 {
                                                Spiral::US5::US5_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                            _ => string(""),
                                        },
                                    ),
                                    (
                                        string("code"),
                                        match &v1509 {
                                            Spiral::US5::US5_0(v1509_0_0) => match &v1509 {
                                                Spiral::US5::US5_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                            _ => string(""),
                                        },
                                    ),
                                    (
                                        string("output"),
                                        match &v1511 {
                                            Spiral::US5::US5_0(v1511_0_0) => match &v1511 {
                                                Spiral::US5::US5_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                            _ => string(""),
                                        },
                                    ),
                                ]);
                                let v1526: Vec<(string, string)> = v1524.to_vec();
                                let v1529: bool = true;
                                let _func1_from_v1527 = Func1::from(move |value| {
                                    //;
                                    let patternInput_7: (string, string) = value;
                                    let v1539: &str = &*patternInput_7.0.clone();
                                    let v1572: std::string::String = String::from(v1539);
                                    let v1605: &str = &*patternInput_7.1.clone();
                                    let v1638: std::string::String = String::from(v1605);
                                    let v1671: bool = true;
                                    LrcPtr::new((v1572, v1638)) /*;
                                                                let v1673: bool = */
                                }); //;
                                let v1675: Func1<
                                    (string, string),
                                    LrcPtr<(std::string::String, std::string::String)>,
                                > = _func1_from_v1527;
                                let v1678: Vec<LrcPtr<(std::string::String, std::string::String)>> =
                                    v1526
                                        .into_iter()
                                        .map(|x| {
                                            Func1::new({
                                                let v1675 = v1675.clone();
                                                move |arg10_0040_5: (string, string)| {
                                                    Spiral::closure76(v1675.clone(), arg10_0040_5)
                                                }
                                            })(x.clone())
                                        })
                                        .collect::<Vec<_>>();
                                let v1679: string =
                                string("std::collections::BTreeMap::from_iter(v1678.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))");
                                let v1680: std::collections::BTreeMap<
                                    std::string::String,
                                    std::string::String,
                                > = std::collections::BTreeMap::from_iter(
                                    v1678
                                        .iter()
                                        .map(|x| x.as_ref())
                                        .map(|&(ref k, ref v)| (k.clone(), v.clone())),
                                );
                                let v1682: Result<std::string::String, serde_json::Error> =
                                    serde_json::to_string(&v1680);
                                let v1686: std::string::String = v1682.unwrap();
                                new_array(&[(
                                    string("command_result"),
                                    fable_library_rust::String_::fromString(v1686),
                                )])
                            }
                        } else {
                            if (fable_library_rust::String_::fromString(v40.clone()))
                                == string("cuda")
                            {
                                let v1705: string = Spiral::method184();
                                let v1712: &str = &*v1705;
                                let v1740: Option<std::string::String> =
                                    clap::ArgMatches::get_one(&v41.clone(), v1712).cloned();
                                let v1765: Spiral::US7 = defaultValue(
                                    Spiral::US7::US7_1,
                                    map(Spiral::method23(), v1740),
                                );
                                let v1772: std::string::String = match &v1765 {
                                    Spiral::US7::US7_0(v1765_0_0) => match &v1765 {
                                        Spiral::US7::US7_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                    _ => panic!("{}", string("Option does not have a value."),),
                                };
                                let v1774: string = fable_library_rust::String_::fromString(v1772);
                                let v1775: string = Spiral::method185();
                                let v1782: &str = &*v1775;
                                let v1810: Option<std::string::String> =
                                    clap::ArgMatches::get_one(&v41.clone(), v1782).cloned();
                                let v1835: Spiral::US7 = defaultValue(
                                    Spiral::US7::US7_1,
                                    map(Spiral::method23(), v1810),
                                );
                                let v1896: Spiral::US36 = match &v1835 {
                                    Spiral::US7::US7_0(v1835_0_0) => {
                                        let v1841: string = fable_library_rust::String_::fromString(
                                            match &v1835 {
                                                Spiral::US7::US7_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                        );
                                        let v1846: string = toLower(string("Poetry"));
                                        let v1853: string = toLower(string("Pip"));
                                        let v1860: Spiral::US37 =
                                            if string("Pip") == (v1841.clone()) {
                                                Spiral::US37::US37_0(Spiral::US38::US38_0)
                                            } else {
                                                Spiral::US37::US37_1
                                            };
                                        Spiral::US36::US36_0(match &v1860 {
                                            Spiral::US37::US37_0(v1860_0_0) => {
                                                Spiral::US37::US37_0(
                                                    match &v1860 {
                                                        Spiral::US37::US37_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                )
                                            }
                                            _ => {
                                                let v1867: Spiral::US37 =
                                                    if string("Poetry") == (v1841.clone()) {
                                                        Spiral::US37::US37_0(Spiral::US38::US38_1)
                                                    } else {
                                                        Spiral::US37::US37_1
                                                    };
                                                match &v1867 {
                                                    Spiral::US37::US37_0(v1867_0_0) => {
                                                        Spiral::US37::US37_0(
                                                            match &v1867 {
                                                                Spiral::US37::US37_0(x) => {
                                                                    x.clone()
                                                                }
                                                                _ => unreachable!(),
                                                            }
                                                            .clone(),
                                                        )
                                                    }
                                                    _ => {
                                                        let v1874: Spiral::US37 =
                                                            if (v1853.clone()) == (v1841.clone()) {
                                                                Spiral::US37::US37_0(
                                                                    Spiral::US38::US38_0,
                                                                )
                                                            } else {
                                                                Spiral::US37::US37_1
                                                            };
                                                        match &v1874 {
                                                            Spiral::US37::US37_0(v1874_0_0) => {
                                                                Spiral::US37::US37_0(
                                                                    match &v1874 {
                                                                        Spiral::US37::US37_0(x) => {
                                                                            x.clone()
                                                                        }
                                                                        _ => unreachable!(),
                                                                    }
                                                                    .clone(),
                                                                )
                                                            }
                                                            _ => {
                                                                let v1881: Spiral::US37 = if (v1846
                                                                    .clone())
                                                                    == (v1841.clone())
                                                                {
                                                                    Spiral::US37::US37_0(
                                                                        Spiral::US38::US38_1,
                                                                    )
                                                                } else {
                                                                    Spiral::US37::US37_1
                                                                };
                                                                match &v1881
                                                                                         {
                                                                                         Spiral::US37::US37_0(v1881_0_0)
                                                                                         =>
                                                                                         Spiral::US37::US37_0(match &v1881
                                                                                                                  {
                                                                                                                  Spiral::US37::US37_0(x)
                                                                                                                  =>
                                                                                                                  x.clone(),
                                                                                                                  _
                                                                                                                  =>
                                                                                                                  unreachable!(),
                                                                                                              }.clone()),
                                                                                         _
                                                                                         =>
                                                                                         Spiral::US37::US37_1,
                                                                                     }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        })
                                    }
                                    _ => Spiral::US36::US36_1,
                                };
                                let v1903: Spiral::US37 =
                                    if let Spiral::US36::US36_0(v1896_0_0) = &v1896 {
                                        let v1897: Spiral::US37 = v1896_0_0.clone();
                                        if let Spiral::US37::US37_0(v1897_0_0) = &v1897 {
                                            Spiral::US37::US37_0(v1897_0_0.clone())
                                        } else {
                                            Spiral::US37::US37_1
                                        }
                                    } else {
                                        Spiral::US37::US37_1
                                    };
                                let v1907: Spiral::US38 = match &v1903 {
                                    Spiral::US37::US37_0(v1903_0_0) => match &v1903 {
                                        Spiral::US37::US37_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                    _ => Spiral::US38::US38_0,
                                };
                                let v1908: string = Spiral::method25();
                                let v1915: &str = &*v1908;
                                let v1943: Option<Vec<std::string::String>> =
                                    clap::ArgMatches::get_many(&v41.clone(), v1915)
                                        .map(|x| x.cloned().into_iter().collect());
                                let v1968: Spiral::US11 = defaultValue(
                                    Spiral::US11::US11_1,
                                    map(Spiral::method26(), v1943),
                                );
                                let v1974: Vec<std::string::String> =
                                    new_empty::<std::string::String>().to_vec();
                                let v1977: Vec<std::string::String> = match &v1968 {
                                    Spiral::US11::US11_0(v1968_0_0) => match &v1968 {
                                        Spiral::US11::US11_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                    _ => v1974.clone(),
                                };
                                let v1989: Result<Vec<u8>, std::io::Error> =
                                    std::fs::read(&*v1774.clone());
                                let v2034: Vec<u8> = Spiral::method27(v1989.unwrap());
                                let v2036: Result<std::string::String, std::string::FromUtf8Error> =
                                    std::string::String::from_utf8(v2034);
                                let v2040: std::string::String = v2036.unwrap();
                                let v2053: string = fable_library_rust::String_::fromString(v2040);
                                let v2082: Spiral::US5 = Spiral::method35(Spiral::method34());
                                let v2088: Spiral::US5 = match &v2082 {
                                    Spiral::US5::US5_0(v2082_0_0) => Spiral::US5::US5_0(
                                        match &v2082 {
                                            Spiral::US5::US5_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                    ),
                                    _ => Spiral::method35(string(
                                        "/home/runner/work/spiral/polyglot/target/Builder/spiral",
                                    )),
                                };
                                let v2094: Spiral::US5 = match &v2088 {
                                    Spiral::US5::US5_0(v2088_0_0) => Spiral::US5::US5_0(
                                        match &v2088 {
                                            Spiral::US5::US5_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                    ),
                                    _ => Spiral::method35(string("/workspaces")),
                                };
                                let v2098: string = match &v2094 {
                                    Spiral::US5::US5_0(v2094_0_0) => match &v2094 {
                                        Spiral::US5::US5_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                    _ => panic!("{}", string("Option does not have a value."),),
                                };
                                let v2113: string = Spiral::method36(
                                    if string("deps") == (Spiral::method55(v2098.clone())) {
                                        let v2106: Spiral::US5 = Spiral::method35(
                                            Spiral::method41(v2098.clone()).clone().unwrap(),
                                        );
                                        match &v2106 {
                                            Spiral::US5::US5_0(v2106_0_0) => match &v2106 {
                                                Spiral::US5::US5_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                            _ => panic!(
                                                "{}",
                                                string("Option does not have a value."),
                                            ),
                                        }
                                    } else {
                                        v2098
                                    },
                                    string("polyglot"),
                                );
                                let v2117: string = toLower(Spiral::method34());
                                let v2122: string = toLower(v2113);
                                let v2131: Spiral::US13 =
                                    if startsWith3(v2117, v2122.clone(), false) {
                                        Spiral::US13::US13_1(v2122.clone())
                                    } else {
                                        Spiral::US13::US13_0(v2122)
                                    };
                                let v2143: Result<string, string> = match &v2131 {
                                    Spiral::US13::US13_0(v2131_0_0) => {
                                        Ok::<string, string>(v2131_0_0.clone())
                                    }
                                    Spiral::US13::US13_1(v2131_1_0) => {
                                        Err::<string, string>(v2131_1_0.clone())
                                    }
                                };
                                let v2145: bool = true;
                                let _result_unwrap_or_else = v2143.unwrap_or_else(|x| {
                                    //;
                                    let v2147: string = x;
                                    let v2149: bool = true;
                                    v2147
                                });
                                let v2151: string = _result_unwrap_or_else;
                                let v2156: string =
                                    defaultValue(string(""), Spiral::method41(v1774.clone()));
                                let v2164: string = match &v1907 {
                                    Spiral::US38::US38_1 => {
                                        Spiral::method36(v2156.clone(), string("pyproject.toml"))
                                    }
                                    _ => {
                                        Spiral::method36(v2156.clone(), string("requirements.txt"))
                                    }
                                };
                                let v2166: bool = true;
                                let _vec_map: Vec<_> = v1977
                                    .into_iter()
                                    .map(|x| {
                                        //;
                                        let v2168: std::string::String = x;
                                        let v2170: string =
                                            fable_library_rust::String_::fromString(v2168);
                                        let v2189: string = if contains(v2170.clone(), string("="))
                                        {
                                            v2170.clone()
                                        } else {
                                            if endsWith3(v2170.clone(), string("]"), false) {
                                                concat(new_array(&[
                                                    replace(
                                                        v2170.clone(),
                                                        string("["),
                                                        string("={version=\'*\',features=["),
                                                    ),
                                                    string("}"),
                                                ]))
                                            } else {
                                                concat(new_array(&[v2170, string("=\'*\'")]))
                                            }
                                        };
                                        let v2191: bool = true;
                                        v2189
                                    })
                                    .collect::<Vec<_>>();
                                let v2193: Vec<string> = _vec_map;
                                let v2195: Array<string> =
                                    fable_library_rust::NativeArray_::array_from(v2193.clone());
                                let _let__v2200: LrcPtr<dyn IEnumerable_1<string>> =
                                    delay(Func0::new({
                                        let v2195 = v2195.clone();
                                        move || {
                                            map_1(
                                                Func1::new({
                                                    let v2195 = v2195.clone();
                                                    move |i_1: i32| v2195[i_1].clone()
                                                }),
                                                rangeNumeric(
                                                    0_i32,
                                                    1_i32,
                                                    (get_Count(v2195.clone())) - 1_i32,
                                                ),
                                            )
                                        }
                                    }));
                                let v2214: string =
                                    join(Spiral::method75(), toArray_1(_let__v2200));
                                let patternInput_8: (i32, string) = if (v2214.clone()) == string("")
                                {
                                    (0_i32, string(""))
                                } else {
                                    Spiral::method76(v2164,
                                                     match &v1907 {
                                                         Spiral::US38::US38_1
                                                         =>
                                                         append((append((append((append((append((append((append((append((append(string("[tool.poetry]\nname = \"test\"\nversion = \"0.0.1\"\ndescription = \"\"\nauthors = []\n\n[tool.poetry.dependencies]\npython=\"~3.12\"\n"),
                                                                                                                                (v2214.clone()))),
                                                                                                                        string("\n"))),
                                                                                                                string(""))),
                                                                                                        string("\n"))),
                                                                                                string("[build-system]"))),
                                                                                        string("\n"))),
                                                                                string("requires = [\"poetry-core\"]"))),
                                                                        string("\n"))),
                                                                string("build-backend = \"poetry.core.masonry.api\"")),
                                                         _ => v2214.clone(),
                                                     });
                                    Spiral::method101(
                                        match &v1907 {
                                            Spiral::US38::US38_1 => string("poetry install"),
                                            _ => string("pip install -r requirements.txt"),
                                        },
                                        None::<CancellationToken>,
                                        new_empty::<(string, string)>(),
                                        None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                                        None::<
                                            Func1<
                                                std::sync::Arc<
                                                    std::sync::Mutex<std::process::ChildStdin>,
                                                >,
                                                (),
                                            >,
                                        >,
                                        true,
                                        Some(v2156.clone()),
                                    )
                                };
                                let v2287: i32 = patternInput_8.0.clone();
                                let patternInput_12: (
                                    Spiral::US5,
                                    Spiral::US5,
                                    Spiral::US5,
                                    Spiral::US5,
                                ) = if (v2287) != 0_i32 {
                                    let v2295: () = {
                                        Spiral::closure77(
                                            v1907.clone(),
                                            v1774.clone(),
                                            patternInput_8.1.clone(),
                                            v2287,
                                            (),
                                        );
                                        ()
                                    };
                                    (
                                        Spiral::US5::US5_0(string("py")),
                                        Spiral::US5::US5_1,
                                        Spiral::US5::US5_1,
                                        Spiral::US5::US5_1,
                                    )
                                } else {
                                    let v2350: string = match &v1907 {
                                        Spiral::US38::US38_1 => concat(new_array(&[
                                            string("poetry run python \""),
                                            v1774.clone(),
                                            string("\""),
                                        ])),
                                        _ => concat(new_array(&[
                                            string("python \""),
                                            v1774.clone(),
                                            string("\""),
                                        ])),
                                    };
                                    let v2353: Array<(string, string)> =
                                        new_array(&[(string("TRACE_LEVEL"), string("Verbose"))]);
                                    let patternInput_9: (i32, string) = Spiral::method101(
                                        v2350.clone(),
                                        None::<CancellationToken>,
                                        v2353.clone(),
                                        None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                                        None::<
                                            Func1<
                                                std::sync::Arc<
                                                    std::sync::Mutex<std::process::ChildStdin>,
                                                >,
                                                (),
                                            >,
                                        >,
                                        true,
                                        Some(v2156.clone()),
                                    );
                                    let v2377: string = patternInput_9.1.clone();
                                    let v2376: i32 = patternInput_9.0.clone();
                                    let v2378: i32 = get_Count(v2353.clone());
                                    let v2379: Array<string> = new_init(&string(""), v2378);
                                    let v2380: LrcPtr<Spiral::Mut5> = LrcPtr::new(Spiral::Mut5 {
                                        l0: MutCell::new(0_i32),
                                    });
                                    while Spiral::method32(v2378, v2380.clone()) {
                                        let v2382: i32 = v2380.l0.get().clone();
                                        let patternInput_10: (string, string) =
                                            v2353[v2382].clone();
                                        let v2385: string = sprintf!(
                                            "$env:{}=\'\'{}\'\'",
                                            patternInput_10.0.clone(),
                                            patternInput_10.1.clone()
                                        );
                                        v2379.get_mut()[v2382 as usize] = v2385;
                                        {
                                            let v2386: i32 = (v2382) + 1_i32;
                                            v2380.l0.set(v2386);
                                            ()
                                        }
                                    }
                                    {
                                        let v2399: string = sprintf!(
                                            "pwsh -c \'{}; {}\'",
                                            join(string(";"), toArray_1(ofArray_1(v2379.clone()))),
                                            v2350
                                        );
                                        let patternInput_11: (
                                            Spiral::US5,
                                            Spiral::US5,
                                            Spiral::US5,
                                            Spiral::US5,
                                        ) = if if (v2376) == 0_i32 {
                                            true
                                        } else {
                                            contains(v2377.clone(),
                                                            string("cupy_backends.cuda.api.runtime.CUDARuntimeError: cudaErrorInsufficientDriver"))
                                        } {
                                            let result_1: LrcPtr<MutCell<Spiral::US5>> =
                                                refCell(Spiral::US5::US5_1);
                                            try_catch(
                                                || {
                                                    result_1.set(Spiral::closure72(
                                                        (),
                                                        Spiral::closure78(v2377.clone(), ()),
                                                    ))
                                                },
                                                |ex_1: LrcPtr<Exception>| {
                                                    result_1.set(Spiral::closure79(
                                                        v1774.clone(),
                                                        v2377.clone(),
                                                        v2399.clone(),
                                                        ex_1.clone(),
                                                    ))
                                                },
                                            );
                                            {
                                                let v2413: Spiral::US5 = result_1.get().clone();
                                                let v2427: Option<string> = match &v2413 {
                                                    Spiral::US5::US5_0(v2413_0_0) => Some(
                                                        match &v2413 {
                                                            Spiral::US5::US5_0(x) => x.clone(),
                                                            _ => unreachable!(),
                                                        }
                                                        .clone(),
                                                    ),
                                                    _ => None::<string>,
                                                };
                                                (
                                                    Spiral::US5::US5_0(string("py")),
                                                    Spiral::US5::US5_0(v2053),
                                                    Spiral::US5::US5_0(v1774.clone()),
                                                    Spiral::US5::US5_0(v2427.unwrap()),
                                                )
                                            }
                                        } else {
                                            let v2437: () = {
                                                Spiral::closure81(
                                                    v1774.clone(),
                                                    v2377,
                                                    v2376,
                                                    v2399,
                                                    (),
                                                );
                                                ()
                                            };
                                            (
                                                Spiral::US5::US5_0(string("py")),
                                                Spiral::US5::US5_1,
                                                Spiral::US5::US5_1,
                                                Spiral::US5::US5_1,
                                            )
                                        };
                                        (
                                            patternInput_11.0.clone(),
                                            patternInput_11.1.clone(),
                                            patternInput_11.2.clone(),
                                            patternInput_11.3.clone(),
                                        )
                                    }
                                };
                                let v2496: Spiral::US5 = patternInput_12.3.clone();
                                let v2494: Spiral::US5 = patternInput_12.1.clone();
                                let v2493: Spiral::US5 = patternInput_12.0.clone();
                                let v2509: Array<(string, string)> = new_array(&[
                                    (
                                        string("extension"),
                                        match &v2493 {
                                            Spiral::US5::US5_0(v2493_0_0) => match &v2493 {
                                                Spiral::US5::US5_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                            _ => string(""),
                                        },
                                    ),
                                    (
                                        string("code"),
                                        match &v2494 {
                                            Spiral::US5::US5_0(v2494_0_0) => match &v2494 {
                                                Spiral::US5::US5_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                            _ => string(""),
                                        },
                                    ),
                                    (
                                        string("output"),
                                        match &v2496 {
                                            Spiral::US5::US5_0(v2496_0_0) => match &v2496 {
                                                Spiral::US5::US5_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                            _ => string(""),
                                        },
                                    ),
                                ]);
                                let v2511: Vec<(string, string)> = v2509.to_vec();
                                let v2514: bool = true;
                                let _func1_from_v2512 = Func1::from(move |value| {
                                    //;
                                    let patternInput_13: (string, string) = value;
                                    let v2524: &str = &*patternInput_13.0.clone();
                                    let v2557: std::string::String = String::from(v2524);
                                    let v2590: &str = &*patternInput_13.1.clone();
                                    let v2623: std::string::String = String::from(v2590);
                                    let v2656: bool = true;
                                    LrcPtr::new((v2557, v2623)) /*;
                                                                let v2658: bool = */
                                }); //;
                                let v2660: Func1<
                                    (string, string),
                                    LrcPtr<(std::string::String, std::string::String)>,
                                > = _func1_from_v2512;
                                let v2663: Vec<LrcPtr<(std::string::String, std::string::String)>> =
                                    v2511
                                        .into_iter()
                                        .map(|x| {
                                            Func1::new({
                                                let v2660 = v2660.clone();
                                                move |arg10_0040_9: (string, string)| {
                                                    Spiral::closure76(v2660.clone(), arg10_0040_9)
                                                }
                                            })(x.clone())
                                        })
                                        .collect::<Vec<_>>();
                                let v2664: string =
                                string("std::collections::BTreeMap::from_iter(v2663.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))");
                                let v2665: std::collections::BTreeMap<
                                    std::string::String,
                                    std::string::String,
                                > = std::collections::BTreeMap::from_iter(
                                    v2663
                                        .iter()
                                        .map(|x| x.as_ref())
                                        .map(|&(ref k, ref v)| (k.clone(), v.clone())),
                                );
                                let v2667: Result<std::string::String, serde_json::Error> =
                                    serde_json::to_string(&v2665);
                                let v2671: std::string::String = v2667.unwrap();
                                new_array(&[(
                                    string("command_result"),
                                    fable_library_rust::String_::fromString(v2671),
                                )])
                            } else {
                                if (fable_library_rust::String_::fromString(v40.clone()))
                                    == string("fable")
                                {
                                    let v2690: string = Spiral::method191();
                                    let v2697: &str = &*v2690;
                                    let v2725: Option<std::string::String> =
                                        clap::ArgMatches::get_one(&v41.clone(), v2697).cloned();
                                    let v2750: Spiral::US7 = defaultValue(
                                        Spiral::US7::US7_1,
                                        map(Spiral::method23(), v2725),
                                    );
                                    let v2757: std::string::String = match &v2750 {
                                        Spiral::US7::US7_0(v2750_0_0) => match &v2750 {
                                            Spiral::US7::US7_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                        _ => panic!("{}", string("Option does not have a value."),),
                                    };
                                    let v2759: string =
                                        fable_library_rust::String_::fromString(v2757);
                                    let v2760: string = Spiral::method192();
                                    let v2767: &str = &*v2760;
                                    let v2795: Option<std::string::String> =
                                        clap::ArgMatches::get_one(&v41.clone(), v2767).cloned();
                                    let v2820: Spiral::US7 = defaultValue(
                                        Spiral::US7::US7_1,
                                        map(Spiral::method23(), v2795),
                                    );
                                    let v2830: Spiral::US5 = match &v2820 {
                                        Spiral::US7::US7_0(v2820_0_0) => Spiral::US5::US5_0(
                                            fable_library_rust::String_::fromString(
                                                match &v2820 {
                                                    Spiral::US7::US7_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }
                                                .clone(),
                                            ),
                                        ),
                                        _ => Spiral::US5::US5_1,
                                    };
                                    new_array(&[(
                                        string("command_result"),
                                        match &v2830 {
                                            Spiral::US5::US5_0(v2830_0_0) => {
                                                let v2832: clap::Command = Spiral::method0();
                                                let v2834: Spiral::US25 =
                                                    Spiral::method116(sprintf!(
                                                        "_ {} --fs-path \"{}\"",
                                                        match &v2830 {
                                                            Spiral::US5::US5_0(x) => x.clone(),
                                                            _ => unreachable!(),
                                                        }
                                                        .clone(),
                                                        v2759.clone()
                                                    ));
                                                let v2843:
                                                             Array<string> =
                                                         match &v2834 {
                                                             Spiral::US25::US25_0(v2834_0_0)
                                                             =>
                                                             v2834_0_0.clone(),
                                                             Spiral::US25::US25_1(v2834_1_0)
                                                             =>
                                                             panic!("{}",
                                                                    concat(new_array(&[string("resultm.get / Result value was Error: "),
                   v2834_1_0.clone()])),),
                                                         };
                                                let v2845: Vec<string> = v2843.to_vec();
                                                let v2847: bool = true;
                                                let _vec_map: Vec<_> = v2845
                                                    .into_iter()
                                                    .map(|x| {
                                                        //;
                                                        let v2849: string = x;
                                                        let v2856: &str = &*v2849;
                                                        let v2889: std::string::String =
                                                            String::from(v2856);
                                                        let v2917: bool = true;
                                                        v2889
                                                    })
                                                    .collect::<Vec<_>>();
                                                let v2919: Vec<std::string::String> = _vec_map;
                                                let v2922: std::pin::Pin<
                                                    Box<
                                                        dyn std::future::Future<
                                                            Output = Result<string, string>,
                                                        >,
                                                    >,
                                                > = Spiral::method20(
                                                    v0_1.clone(),
                                                    clap::Command::get_matches_from(v2832, v2919),
                                                );
                                                let v2924: Result<string, string> = v2922.await;
                                                v2924.unwrap()
                                            }
                                            _ => string("{}"),
                                        },
                                    )])
                                } else {
                                    if (fable_library_rust::String_::fromString(v40.clone()))
                                        == string("dib")
                                    {
                                        let v2948: string = Spiral::method193();
                                        let v2955: &str = &*v2948;
                                        let v2983: Option<std::string::String> =
                                            clap::ArgMatches::get_one(&v41.clone(), v2955).cloned();
                                        let v2987: Option<string> = map(Spiral::method194(), v2983);
                                        let v3008: string = v2987.unwrap();
                                        let v3009: string = Spiral::method196();
                                        let v3016: &str = &*v3009;
                                        let v3046: u8 = defaultValue(
                                            1_u8,
                                            clap::ArgMatches::get_one(&v41.clone(), v3016).cloned(),
                                        );
                                        let v3049: string = Spiral::method197();
                                        let v3056: &str = &*v3049;
                                        let v3084: Option<std::string::String> =
                                            clap::ArgMatches::get_one(&v41.clone(), v3056).cloned();
                                        let v3109: Spiral::US7 = defaultValue(
                                            Spiral::US7::US7_1,
                                            map(Spiral::method23(), v3084),
                                        );
                                        let patternInput_14: (i32, string) = Spiral::method198(
                                            match &v3109 {
                                                Spiral::US7::US7_0(v3109_0_0) => {
                                                    Spiral::US5::US5_0(
                                                        fable_library_rust::String_::fromString(
                                                            match &v3109 {
                                                                Spiral::US7::US7_0(x) => x.clone(),
                                                                _ => unreachable!(),
                                                            }
                                                            .clone(),
                                                        ),
                                                    )
                                                }
                                                _ => Spiral::US5::US5_1,
                                            },
                                            v3046,
                                            v3008.clone(),
                                            1_u8,
                                        );
                                        let v3122: string = patternInput_14.1.clone();
                                        let v3121: i32 = patternInput_14.0.clone();
                                        let patternInput_17: (i32, string) = if (v3121) != 0_i32 {
                                            (v3121, v3122.clone())
                                        } else {
                                            let patternInput_15:
                                                    (i32, string) =
                                                Spiral::method101(concat(new_array(&[string("jupyter nbconvert \""),
                                                                                     v3008.clone(),
                                                                                     string(".ipynb\" --to html --HTMLExporter.theme=dark")])),
                                                                  None::<CancellationToken>,
                                                                  new_empty::<(string,
                                                                               string)>(),
                                                                  None::<Func1<(i32,
                                                                                string,
                                                                                bool),
                                                                               Arc<Async<()>>>>,
                                                                  None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                               ()>>,
                                                                  true,
                                                                  None::<string>);
                                            let v3147: string = patternInput_15.1.clone();
                                            let v3146: i32 = patternInput_15.0.clone();
                                            let v3150: () = {
                                                Spiral::closure84(v3147.clone(), v3146, ());
                                                ()
                                            };
                                            if (v3146) != 0_i32 {
                                                (
                                                    v3146,
                                                    concat(new_array(&[
                                                        string("repl_result: "),
                                                        v3122.clone(),
                                                        string("\n\njupyter_result: "),
                                                        v3147.clone(),
                                                    ])),
                                                )
                                            } else {
                                                let patternInput_16:
                                                        (i32, string) =
                                                    Spiral::method101(concat(new_array(&[string("pwsh -c \"$counter = 1; $path = \'"),
                                                                                         replace(v3008.clone(),
                                                                                                 string("\'"),
                                                                                                 string("\'\'")),
                                                                                         string(".html\'; (Get-Content $path -Raw) -replace \'(id=\\\"cell-id=)[a-fA-F0-9]{8}\', { $_.Groups[1].Value + $counter++ } | Set-Content $path\"")])),
                                                                      None::<CancellationToken>,
                                                                      new_empty::<(string,
                                                                                   string)>(),
                                                                      None::<Func1<(i32,
                                                                                    string,
                                                                                    bool),
                                                                                   Arc<Async<()>>>>,
                                                                      None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                   ()>>,
                                                                      true,
                                                                      None::<string>);
                                                let v3226: string = patternInput_16.1.clone();
                                                let v3225: i32 = patternInput_16.0.clone();
                                                let v3229: () = {
                                                    Spiral::closure85(v3226.clone(), v3225, ());
                                                    ()
                                                };
                                                let v3277: string = concat(new_array(&[
                                                    v3008.clone(),
                                                    string(".html"),
                                                ]));
                                                let v3289: Result<Vec<u8>, std::io::Error> =
                                                    std::fs::read(&*v3277);
                                                let v3334: Vec<u8> =
                                                    Spiral::method27(v3289.unwrap());
                                                let v3336: Result<
                                                    std::string::String,
                                                    std::string::FromUtf8Error,
                                                > = std::string::String::from_utf8(v3334);
                                                let v3340: std::string::String = v3336.unwrap();
                                                let v3383: string = replace(
                                                    fable_library_rust::String_::fromString(v3340),
                                                    string("\r\n"),
                                                    string("\n"),
                                                );
                                                let v3384: string = concat(new_array(&[
                                                    v3008.clone(),
                                                    string(".html"),
                                                ]));
                                                std::fs::write(&*v3384, &*v3383).unwrap();
                                                {
                                                    let v3387: string = concat(new_array(&[
                                                        v3008.clone(),
                                                        string(".ipynb"),
                                                    ]));
                                                    let v3399: Result<Vec<u8>, std::io::Error> =
                                                        std::fs::read(&*v3387);
                                                    let v3444: Vec<u8> =
                                                        Spiral::method27(v3399.unwrap());
                                                    let v3446: Result<
                                                        std::string::String,
                                                        std::string::FromUtf8Error,
                                                    > = std::string::String::from_utf8(v3444);
                                                    let v3450: std::string::String = v3446.unwrap();
                                                    let v3494: string = replace(
                                                        replace(
                                                            fable_library_rust::String_::fromString(
                                                                v3450,
                                                            ),
                                                            string("\r\n"),
                                                            string("\n"),
                                                        ),
                                                        string("\\r\\n"),
                                                        string("\\n"),
                                                    );
                                                    let v3495: string = concat(new_array(&[
                                                        v3008,
                                                        string(".ipynb"),
                                                    ]));
                                                    std::fs::write(&*v3495, &*v3494).unwrap();
                                                    (v3225,
                                                     sprintf!("repl_result: {}\n\njupyter_result: {}\n\npwsh_replace_html_result: {}",
                                                              v3122, v3147,
                                                              v3226))
                                                }
                                            }
                                        };
                                        let v3502: string = patternInput_17.1.clone();
                                        let v3501: i32 = patternInput_17.0.clone();
                                        let v3505: () = {
                                            Spiral::closure86(v3502.clone(), v3501, ());
                                            ()
                                        };
                                        if (v3501) != 0_i32 {
                                            panic!(
                                                "{}",
                                                sprintf!(
                                                    "spiral.run / dib / exit_code: {} / result: {}",
                                                    v3501,
                                                    v3502.clone()
                                                )
                                            );
                                        }
                                        new_array(&[(string("stdio"), v3502)])
                                    } else {
                                        let patternInput_40: (
                                            Spiral::US5,
                                            Spiral::US5,
                                            Spiral::US5,
                                            Spiral::US5,
                                        ) = if (fable_library_rust::String_::fromString(
                                            v40.clone(),
                                        )) == string("rust")
                                        {
                                            let v3563: string = Spiral::method191();
                                            let v3570: &str = &*v3563;
                                            let v3598: Option<std::string::String> =
                                                clap::ArgMatches::get_one(&v41.clone(), v3570)
                                                    .cloned();
                                            let v3623: Spiral::US7 = defaultValue(
                                                Spiral::US7::US7_1,
                                                map(Spiral::method23(), v3598),
                                            );
                                            let v3630: std::string::String = match &v3623 {
                                                Spiral::US7::US7_0(v3623_0_0) => match &v3623 {
                                                    Spiral::US7::US7_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }
                                                .clone(),
                                                _ => panic!(
                                                    "{}",
                                                    string("Option does not have a value."),
                                                ),
                                            };
                                            let v3632: string =
                                                fable_library_rust::String_::fromString(v3630);
                                            let v3633: string = Spiral::method25();
                                            let v3640: &str = &*v3633;
                                            let v3668: Option<Vec<std::string::String>> =
                                                clap::ArgMatches::get_many(&v41.clone(), v3640)
                                                    .map(|x| x.cloned().into_iter().collect());
                                            let v3693: Spiral::US11 = defaultValue(
                                                Spiral::US11::US11_1,
                                                map(Spiral::method26(), v3668),
                                            );
                                            let v3699: Vec<std::string::String> =
                                                new_empty::<std::string::String>().to_vec();
                                            let v3702: Vec<std::string::String> = match &v3693 {
                                                Spiral::US11::US11_0(v3693_0_0) => match &v3693 {
                                                    Spiral::US11::US11_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }
                                                .clone(),
                                                _ => v3699.clone(),
                                            };
                                            let v3703: string = Spiral::method207();
                                            let v3710: &str = &*v3703;
                                            let v3738: bool =
                                                clap::ArgMatches::get_flag(&v41.clone(), v3710);
                                            let v3739: string = Spiral::method208();
                                            let v3746: &str = &*v3739;
                                            let v3774: Option<std::string::String> =
                                                clap::ArgMatches::get_one(&v41.clone(), v3746)
                                                    .cloned();
                                            let v3799: Spiral::US7 = defaultValue(
                                                Spiral::US7::US7_1,
                                                map(Spiral::method23(), v3774),
                                            );
                                            let v3809: Spiral::US5 = match &v3799 {
                                                Spiral::US7::US7_0(v3799_0_0) => {
                                                    Spiral::US5::US5_0(
                                                        fable_library_rust::String_::fromString(
                                                            match &v3799 {
                                                                Spiral::US7::US7_0(x) => x.clone(),
                                                                _ => unreachable!(),
                                                            }
                                                            .clone(),
                                                        ),
                                                    )
                                                }
                                                _ => Spiral::US5::US5_1,
                                            };
                                            let v3810: string = Spiral::method209();
                                            let v3817: &str = &*v3810;
                                            let v3845: Option<std::string::String> =
                                                clap::ArgMatches::get_one(&v41.clone(), v3817)
                                                    .cloned();
                                            let v3870: Spiral::US7 = defaultValue(
                                                Spiral::US7::US7_1,
                                                map(Spiral::method23(), v3845),
                                            );
                                            let v3880: Spiral::US5 = match &v3870 {
                                                Spiral::US7::US7_0(v3870_0_0) => {
                                                    Spiral::US5::US5_0(
                                                        fable_library_rust::String_::fromString(
                                                            match &v3870 {
                                                                Spiral::US7::US7_0(x) => x.clone(),
                                                                _ => unreachable!(),
                                                            }
                                                            .clone(),
                                                        ),
                                                    )
                                                }
                                                _ => Spiral::US5::US5_1,
                                            };
                                            let v3889: Spiral::US39 =
                                                if let Spiral::US5::US5_0(v3809_0_0) = &v3809 {
                                                    Spiral::US39::US39_0(Spiral::US40::US40_0(
                                                        v3809_0_0.clone(),
                                                    ))
                                                } else {
                                                    if let Spiral::US5::US5_0(v3880_0_0) = &v3880 {
                                                        Spiral::US39::US39_0(Spiral::US40::US40_1(
                                                            v3880_0_0.clone(),
                                                        ))
                                                    } else {
                                                        Spiral::US39::US39_1
                                                    }
                                                };
                                            let v3901: Result<Vec<u8>, std::io::Error> =
                                                std::fs::read(&*v3632);
                                            let v3946: Vec<u8> = Spiral::method27(v3901.unwrap());
                                            let v3948: Result<
                                                std::string::String,
                                                std::string::FromUtf8Error,
                                            > = std::string::String::from_utf8(v3946);
                                            let v3952: std::string::String = v3948.unwrap();
                                            let v3987: string =
                                                fable_library_rust::String_::fromString(v3952);
                                            let v3995: string =
                                                Spiral::method29(Spiral::method210(
                                                    string("rs"),
                                                    v3987.clone(),
                                                    v3889.clone(),
                                                ));
                                            let v3997: Spiral::US5 =
                                                Spiral::method35(Spiral::method34());
                                            let v4003: Spiral::US5 =
                                                match &v3997 {
                                                    Spiral::US5::US5_0(v3997_0_0)
                                                    =>
                                                    Spiral::US5::US5_0(match &v3997
                                                                           {
                                                                           Spiral::US5::US5_0(x)
                                                                           =>
                                                                           x.clone(),
                                                                           _
                                                                           =>
                                                                           unreachable!(),
                                                                       }.clone()),
                                                    _ =>
                                                    Spiral::method35(string("/home/runner/work/spiral/polyglot/target/Builder/spiral")),
                                                };
                                            let v4009: Spiral::US5 = match &v4003 {
                                                Spiral::US5::US5_0(v4003_0_0) => {
                                                    Spiral::US5::US5_0(
                                                        match &v4003 {
                                                            Spiral::US5::US5_0(x) => x.clone(),
                                                            _ => unreachable!(),
                                                        }
                                                        .clone(),
                                                    )
                                                }
                                                _ => Spiral::method35(string("/workspaces")),
                                            };
                                            let v4013: string = match &v4009 {
                                                Spiral::US5::US5_0(v4009_0_0) => match &v4009 {
                                                    Spiral::US5::US5_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }
                                                .clone(),
                                                _ => panic!(
                                                    "{}",
                                                    string("Option does not have a value."),
                                                ),
                                            };
                                            let v4028: string = Spiral::method36(
                                                if string("deps")
                                                    == (Spiral::method55(v4013.clone()))
                                                {
                                                    let v4021: Spiral::US5 = Spiral::method35(
                                                        Spiral::method41(v4013.clone())
                                                            .clone()
                                                            .unwrap(),
                                                    );
                                                    match &v4021 {
                                                        Spiral::US5::US5_0(v4021_0_0) => {
                                                            match &v4021 {
                                                                Spiral::US5::US5_0(x) => x.clone(),
                                                                _ => unreachable!(),
                                                            }
                                                            .clone()
                                                        }
                                                        _ => panic!(
                                                            "{}",
                                                            string("Option does not have a value."),
                                                        ),
                                                    }
                                                } else {
                                                    v4013
                                                },
                                                string("polyglot"),
                                            );
                                            let v4032: string = toLower(Spiral::method34());
                                            let v4037: string = toLower(v4028);
                                            let v4046: Spiral::US13 =
                                                if startsWith3(v4032, v4037.clone(), false) {
                                                    Spiral::US13::US13_1(v4037.clone())
                                                } else {
                                                    Spiral::US13::US13_0(v4037)
                                                };
                                            let v4058: Result<string, string> = match &v4046 {
                                                Spiral::US13::US13_0(v4046_0_0) => {
                                                    Ok::<string, string>(v4046_0_0.clone())
                                                }
                                                Spiral::US13::US13_1(v4046_1_0) => {
                                                    Err::<string, string>(v4046_1_0.clone())
                                                }
                                            };
                                            let v4060: bool = true;
                                            let _result_unwrap_or_else =
                                                v4058.unwrap_or_else(|x| {
                                                    //;
                                                    let v4062: string = x;
                                                    let v4064: bool = true;
                                                    v4062
                                                });
                                            let v4066: string = _result_unwrap_or_else;
                                            let v4071: string = Spiral::method211(
                                                Spiral::US5::US5_0(v3995.clone()),
                                                string("spiral"),
                                                Spiral::US42::US42_0(Spiral::US41::US41_0),
                                                v4066.clone(),
                                            );
                                            let v4077: string = Spiral::method212(
                                                v3987,
                                                string("spiral"),
                                                LrcPtr::new(Spiral::UH2::UH2_0),
                                                LrcPtr::new(Spiral::UH4::UH4_1(
                                                    string("Fable.Core"),
                                                    string("4.3.0"),
                                                    LrcPtr::new(Spiral::UH4::UH4_0),
                                                )),
                                                v4071.clone(),
                                                v4066.clone(),
                                            );
                                            let v4079: string =
                                                Spiral::method36(v4071.clone(), string("../../.."));
                                            let v4081: string = Spiral::method36(
                                                v4079.clone(),
                                                string("Cargo.toml"),
                                            );
                                            if (Spiral::method38(v4081.clone())) == false {
                                                let v4087: DateTime = DateTime::now();
                                                let v4110: string =
                                                    toString(Spiral::method215(new_guid(), v4087));
                                                let v4135: string =
                                                    append((append((append((append((append((append((append((append((append((append((append((append((append(string("[package]\n"),
                                                                                                                                                           (concat(new_array(&[string("name = \"spiral_"),
                                                                                                                                                                               v4110.clone(),
                                                                                                                                                                               string("\"")]))))),
                                                                                                                                                   string("\n"))),
                                                                                                                                           string("version = \"0.0.1\""))),
                                                                                                                                   string("\n"))),
                                                                                                                           string("edition = \"2021\""))),
                                                                                                                   string("\n"))),
                                                                                                           string(""))),
                                                                                                   string("\n"))),
                                                                                           string("[[bin]]"))),
                                                                                   string("\n"))),
                                                                           (concat(new_array(&[string("name = \"spiral_"),
                                                                                               v4110,
                                                                                               string("\"")]))))),
                                                                   string("\n"))),
                                                           string("path = \"spiral.rs\""));
                                                std::fs::write(&*v4081.clone(), &*v4135).unwrap();
                                                ()
                                            }
                                            {
                                                let v4138: string = Spiral::method36(
                                                    v4071.clone(),
                                                    string("Cargo.toml"),
                                                );
                                                if (Spiral::method38(v4138.clone())) == false {
                                                    let v4144: DateTime = DateTime::now();
                                                    let v4167: string = toString(
                                                        Spiral::method215(new_guid(), v4144),
                                                    );
                                                    let v4192: string =
                                                        append((append((append((append((append((append((append((append((append((append((append((append((append(string("[package]\n"),
                                                                                                                                                               (concat(new_array(&[string("name = \"spiral_"),
                                                                                                                                                                                   v4167.clone(),
                                                                                                                                                                                   string("\"")]))))),
                                                                                                                                                       string("\n"))),
                                                                                                                                               string("version = \"0.0.1\""))),
                                                                                                                                       string("\n"))),
                                                                                                                               string("edition = \"2021\""))),
                                                                                                                       string("\n"))),
                                                                                                               string(""))),
                                                                                                       string("\n"))),
                                                                                               string("[[bin]]"))),
                                                                                       string("\n"))),
                                                                               (concat(new_array(&[string("name = \"spiral_"),
                                                                                                   v4167,
                                                                                                   string("\"")]))))),
                                                                       string("\n"))),
                                                               string("path = \"spiral.rs\""));
                                                    std::fs::write(&*v4138.clone(), &*v4192)
                                                        .unwrap();
                                                    ()
                                                }
                                                {
                                                    let v4196: string =
                                                        Spiral::method36(v4066.clone(),
                                                                         string("lib/rust/fable/fable_modules/fable-library-rust"));
                                                    let v4198: string = Spiral::method36(
                                                        v4071.clone(),
                                                        string("fable_modules/fable-library-rust"),
                                                    );
                                                    Spiral::method220(v4196, v4198.clone());
                                                    {
                                                        let patternInput_18: (i32, string) =
                                                            Spiral::method221(
                                                                v3889.clone(),
                                                                v4071.clone(),
                                                                string("rs"),
                                                                v4077,
                                                                v4046.clone(),
                                                            );
                                                        let v4200: string =
                                                            patternInput_18.1.clone();
                                                        let v4199: i32 = patternInput_18.0.clone();
                                                        let patternInput_27: (
                                                            Spiral::US5,
                                                            Spiral::US5,
                                                            Spiral::US5,
                                                            Spiral::US5,
                                                        ) = if (v4199) != 0_i32 {
                                                            let v4207: () = {
                                                                Spiral::closure89(
                                                                    v4200.clone(),
                                                                    v4199,
                                                                    (),
                                                                );
                                                                ()
                                                            };
                                                            (
                                                                Spiral::US5::US5_0(string("rs")),
                                                                Spiral::US5::US5_1,
                                                                Spiral::US5::US5_1,
                                                                Spiral::US5::US5_0(v4200),
                                                            )
                                                        } else {
                                                            let v4358: Vec<std::string::String> =
                                                                if if let Spiral::US39::US39_1 =
                                                                    &v3889
                                                                {
                                                                    true
                                                                } else {
                                                                    false
                                                                } {
                                                                    v3702.clone()
                                                                } else {
                                                                    let v4259 = Spiral::method231();
                                                                    let v4260: Vec<
                                                                        std::string::String,
                                                                    > = Spiral::method232(
                                                                        v3702.clone(),
                                                                    );
                                                                    let v4262: Vec<
                                                                        std::string::String,
                                                                    > = v4260
                                                                        .into_iter()
                                                                        .filter(|x| {
                                                                            v4259(x.clone().clone())
                                                                        })
                                                                        .collect::<Vec<_>>();
                                                                    if (v4262.len() as i32) > 0_i32
                                                                    {
                                                                        v3702.clone()
                                                                    } else {
                                                                        let v4286: &str =
                                                                            &*string("near-sdk");
                                                                        let v4346: Array<
                                                                            std::string::String,
                                                                        > = new_array(&[
                                                                            String::from(v4286),
                                                                        ]);
                                                                        let v4349: Vec<
                                                                            std::string::String,
                                                                        > = Spiral::method73(
                                                                            v4346.to_vec(),
                                                                        );
                                                                        let v4350: Vec<
                                                                            std::string::String,
                                                                        > = Spiral::method74(v3702);
                                                                        let v4352: bool = true;
                                                                        let mut v4350 = v4350;
                                                                        let v4354: bool = true;
                                                                        v4350.extend(v4349);
                                                                        v4350
                                                                    }
                                                                };
                                                            let v4360: bool = true;
                                                            let _vec_map : Vec<_> = v4358.into_iter().map(|x| { //;
                                                                let v4362:
                                                                        std::string::String =
                                                                    x;
                                                                let v4364:
                                                                        string =
                                                                    fable_library_rust::String_::fromString(v4362);
                                                                let v4383:
                                                                        string =
                                                                    if contains(v4364.clone(),
                                                                                string("="))
                                                                       {
                                                                        v4364.clone()
                                                                    } else {
                                                                        if endsWith3(v4364.clone(),
                                                                                     string("]"),
                                                                                     false)
                                                                           {
                                                                            concat(new_array(&[replace(v4364.clone(),
                                                                                                       string("["),
                                                                                                       string("={version=\'*\',features=[")),
                                                                                               string("}")]))
                                                                        } else {
                                                                            concat(new_array(&[v4364,
                                                                                               string("=\'*\'")]))
                                                                        }
                                                                    };
                                                                let v4385:
                                                                        bool =
                                                                    true; v4383 }).collect::<Vec<_>>();
                                                            let v4387: Vec<string> = _vec_map;
                                                            let v4389:
                                                                        Array<string> =
                                                                    fable_library_rust::NativeArray_::array_from(v4387.clone());
                                                            let _let__v4394: LrcPtr<
                                                                dyn IEnumerable_1<string>,
                                                            > = delay(Func0::new({
                                                                let v4389 = v4389.clone();
                                                                move || {
                                                                    map_1(
                                                                        Func1::new({
                                                                            let v4389 =
                                                                                v4389.clone();
                                                                            move |i_2: i32| {
                                                                                v4389[i_2].clone()
                                                                            }
                                                                        }),
                                                                        rangeNumeric(
                                                                            0_i32,
                                                                            1_i32,
                                                                            (get_Count(
                                                                                v4389.clone(),
                                                                            )) - 1_i32,
                                                                        ),
                                                                    )
                                                                }
                                                            }));
                                                            let v4408: string = join(
                                                                Spiral::method75(),
                                                                toArray_1(_let__v4394),
                                                            );
                                                            let v4413: string = Spiral::method36(
                                                                v4071,
                                                                concat(new_array(&[
                                                                    string("spiral"),
                                                                    string("."),
                                                                    string("rs"),
                                                                ])),
                                                            );
                                                            let v4425: Result<
                                                                Vec<u8>,
                                                                std::io::Error,
                                                            > = std::fs::read(&*v4413.clone());
                                                            let v4470: Vec<u8> =
                                                                Spiral::method27(v4425.unwrap());
                                                            let v4472: Result<
                                                                std::string::String,
                                                                std::string::FromUtf8Error,
                                                            > = std::string::String::from_utf8(
                                                                v4470,
                                                            );
                                                            let v4476: std::string::String =
                                                                v4472.unwrap();
                                                            let v4511:
                                                                        string =
                                                                    fable_library_rust::String_::fromString(v4476);
                                                            let v4519: string = append(
                                                                string("on_startup!"),
                                                                (Spiral::method233()),
                                                            );
                                                            let v4522: string = append(
                                                                string(" method0"),
                                                                (Spiral::method234()),
                                                            );
                                                            let v4532: bool = if contains(
                                                                v4511.clone(),
                                                                v4519.clone(),
                                                            ) {
                                                                (contains(v4511, v4522)) == false
                                                            } else {
                                                                false
                                                            };
                                                            let v4597:
                                                                        string =
                                                                    append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append(string("[package]\n"),
                                                                                                                                                                                                                                           (concat(new_array(&[string("name = \"spiral_"),
                                                                                                                                                                                                                                                               v3995.clone(),
                                                                                                                                                                                                                                                               string("\"")]))))),
                                                                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                                                                           string("version = \"0.0.1\""))),
                                                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                                                           string("edition = \"2021\""))),
                                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                                           string(""))),
                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                           string("[dependencies]"))),
                                                                                                                                                                   string("\n"))),
                                                                                                                                                           (if !((v3889.clone())
                                                                                                                                                                     ==
                                                                                                                                                                     Spiral::US39::US39_1)
                                                                                                                                                               {
                                                                                                                                                                string("fable_library_rust = { workspace = true }")
                                                                                                                                                            } else {
                                                                                                                                                                append((append((append(string("fable_library_rust = { workspace = true, features = ["),
                                                                                                                                                                                       (if v4532
                                                                                                                                                                                           {
                                                                                                                                                                                            string("\"static_do_bindings\", \"datetime\", \"guid\", \"threaded\"")
                                                                                                                                                                                        } else {
                                                                                                                                                                                            string("\"datetime\", \"guid\", \"threaded\"")
                                                                                                                                                                                        }))),
                                                                                                                                                                               string("]"))),
                                                                                                                                                                       string("}"))
                                                                                                                                                            }))),
                                                                                                                                                   string("\n"))),
                                                                                                                                           string("inline_colorization = { workspace = true }"))),
                                                                                                                                   string("\n"))),
                                                                                                                           (v4408))),
                                                                                                                   string("\n"))),
                                                                                                           string(""))),
                                                                                                   string("\n"))),
                                                                                           (if if let Spiral::US39::US39_1
                                                                                                      =
                                                                                                      &v3889
                                                                                                  {
                                                                                                   true
                                                                                               } else {
                                                                                                   false
                                                                                               }
                                                                                               {
                                                                                                append(string("[[bin]]\n"),
                                                                                                       (concat(new_array(&[string("name = \"spiral_"),
                                                                                                                           v3995.clone(),
                                                                                                                           string("\"")]))))
                                                                                            } else {
                                                                                                string("[lib]\ncrate-type = [\"cdylib\"]")
                                                                                            }))),
                                                                                   string("\n"))),
                                                                           string("path = \"spiral.rs\""));
                                                            let v4662:
                                                                        string =
                                                                    append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append((append(string("cargo-features = [\"profile-rustflags\"]\n\n[workspace]\nresolver = \"2\"\nmembers = [\"packages/Rust/*\"]\n\n[workspace.dependencies.fable_library_rust]\n"),
                                                                                                                                                                                                                                                                                                           (concat(new_array(&[string("path = \""),
                                                                                                                                                                                                                                                                                                                               Spiral::method46(v4066.clone()),
                                                                                                                                                                                                                                                                                                                               string("/lib/rust/fable/fable_modules/fable-library-rust\"")]))))),
                                                                                                                                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                                                                                                                                           string("default-features = false"))),
                                                                                                                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                                                                                                                           string("features = []"))),
                                                                                                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                                                                                                           string(""))),
                                                                                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                                                                                           string("[workspace.dependencies]"))),
                                                                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                                                                           string("inline_colorization = \"~0.1\""))),
                                                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                                                           string(""))),
                                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                                           string("[profile.release]"))),
                                                                                                                                                                                   string("\n"))),
                                                                                                                                                                           string("codegen-units = 1"))),
                                                                                                                                                                   string("\n"))),
                                                                                                                                                           string("opt-level = \"z\""))),
                                                                                                                                                   string("\n"))),
                                                                                                                                           string("lto = true"))),
                                                                                                                                   string("\n"))),
                                                                                                                           string("debug = false"))),
                                                                                                                   string("\n"))),
                                                                                                           string("panic = \"abort\""))),
                                                                                                   string("\n"))),
                                                                                           string("overflow-checks = true"))),
                                                                                   string("\n"))),
                                                                           string("rustflags = [\"-C\", \"link-arg=-s\"]"));
                                                            Spiral::method76(v4138.clone(), v4597);
                                                            Spiral::method76(v4081, v4662);
                                                            {
                                                                let v4664: string =
                                                                    Spiral::method36(
                                                                        v4198,
                                                                        string("src/Range.rs"),
                                                                    );
                                                                if Spiral::method38(v4664.clone()) {
                                                                    let v4677: Result<
                                                                        Vec<u8>,
                                                                        std::io::Error,
                                                                    > = std::fs::read(
                                                                        &*v4664.clone(),
                                                                    );
                                                                    let v4722: Vec<u8> =
                                                                        Spiral::method27(
                                                                            v4677.unwrap(),
                                                                        );
                                                                    let v4724:
                                                                                Result<std::string::String,
                                                                                       std::string::FromUtf8Error> =
                                                                            std::string::String::from_utf8(v4722);
                                                                    let v4728: std::string::String =
                                                                        v4724.unwrap();
                                                                    Spiral::method76(v4664,
                                                                                         replace(replace(fable_library_rust::String_::fromString(v4728),
                                                                                                         string("use crate::String_::fromCharCode;"),
                                                                                                         string("use crate::String_::fromChar;")),
                                                                                                 string("fromCharCode(c)"),
                                                                                                 string("std::char::from_u32(c).unwrap()")))
                                                                }
                                                                {
                                                                    let patternInput_19: (
                                                                        i32,
                                                                        string,
                                                                    ) = Spiral::method235(
                                                                        v4046.clone(),
                                                                        v4138.clone(),
                                                                        1_u8,
                                                                    );
                                                                    let v4776: i32 =
                                                                        patternInput_19.0.clone();
                                                                    if (v4776) != 0_i32 {
                                                                        let v4784: () = {
                                                                            Spiral::closure93(
                                                                                patternInput_19
                                                                                    .1
                                                                                    .clone(),
                                                                                v4776,
                                                                                (),
                                                                            );
                                                                            ()
                                                                        };
                                                                        ()
                                                                    }
                                                                    {
                                                                        let v4842: Result<
                                                                            Vec<u8>,
                                                                            std::io::Error,
                                                                        > = std::fs::read(
                                                                            &*v4413.clone(),
                                                                        );
                                                                        let v4887: Vec<u8> =
                                                                            Spiral::method27(
                                                                                v4842.unwrap(),
                                                                            );
                                                                        let v4889:
                                                                                    Result<std::string::String,
                                                                                           std::string::FromUtf8Error> =
                                                                                std::string::String::from_utf8(v4887);
                                                                        let v4893:
                                                                                    std::string::String =
                                                                                v4889.unwrap();
                                                                        let v4928:
                                                                                    string =
                                                                                fable_library_rust::String_::fromString(v4893);
                                                                        let v4936:
                                                                                    string =
                                                                                append(string("pub fn main() -> Result<(), String> "),
                                                                                       (Spiral::method241()));
                                                                        let v4983:
                                                                                    string =
                                                                                append((append((if if let Spiral::US39::US39_1
                                                                                                          =
                                                                                                          &v3889
                                                                                                      {
                                                                                                       true
                                                                                                   } else {
                                                                                                       false
                                                                                                   }
                                                                                                   {
                                                                                                    string("")
                                                                                                } else {
                                                                                                    string("#[near_sdk::near_bindgen]\n#[derive(near_sdk::PanicOnDefault)]\npub struct MainState {\n}\n\n#[near_sdk::near_bindgen]\nimpl MainState {\n    pub fn state_main() {\n        Spiral::method0();\n    }\n}")
                                                                                                }),
                                                                                               string("\n"))),
                                                                                       (if if if let Spiral::US39::US39_1
                                                                                                     =
                                                                                                     &v3889
                                                                                                 {
                                                                                                  true
                                                                                              } else {
                                                                                                  false
                                                                                              }
                                                                                              {
                                                                                               contains(v4928.clone(),
                                                                                                        append((v4519.clone()),
                                                                                                               string("Spiral::method0()")))
                                                                                           } else {
                                                                                               false
                                                                                           }
                                                                                           {
                                                                                            concat(new_array(&[v4936.clone(),
                                                                                                               string(" Ok(Spiral::method0()) }")]))
                                                                                        } else {
                                                                                            concat(new_array(&[v4936.clone(),
                                                                                                               string(" Ok(()) }")]))
                                                                                        }));
                                                                        let v4985: bool = contains(
                                                                            v4928.clone(),
                                                                            v4936,
                                                                        );
                                                                        let v5087: string = if v4985
                                                                        {
                                                                            v4928.clone()
                                                                        } else {
                                                                            (if (if let Spiral::US39::US39_0(v3889_0_0)
                                                                                                =
                                                                                                &v3889
                                                                                            {
                                                                                             if let Spiral::US40::US40_1(v3889_1_0)
                                                                                                    =
                                                                                                    &v3889_0_0
                                                                                                {
                                                                                                 true
                                                                                             } else {
                                                                                                 false
                                                                                             }
                                                                                         } else {
                                                                                             false
                                                                                         })
                                                                                            ==
                                                                                            false
                                                                                        {
                                                                                         Func1::new(move
                                                                                                        |v_7:
                                                                                                             string|
                                                                                                        Spiral::closure94((),
                                                                                                                          v_7))
                                                                                     } else {
                                                                                         let v5083:
                                                                                                 string =
                                                                                             string("use fable_library_rust::DateTime_::DateTime;");
                                                                                         Func1::new({
                                                                                                        let v5083
                                                                                                            =
                                                                                                            v5083.clone();
                                                                                                        move
                                                                                                            |v_8:
                                                                                                                 string|
                                                                                                            Spiral::closure96(v5083.clone(),
                                                                                                                              v_8)
                                                                                                    })
                                                                                     })((if v4532
                                                                                            {
                                                                                             Func1::new(move
                                                                                                            |v_5:
                                                                                                                 string|
                                                                                                            Spiral::closure94((),
                                                                                                                              v_5))
                                                                                         } else {
                                                                                             let v5075:
                                                                                                     string =
                                                                                                 append(string("// "),
                                                                                                        (v4519.clone()));
                                                                                             Func1::new({
                                                                                                            let v4519
                                                                                                                =
                                                                                                                v4519.clone();
                                                                                                            let v5075
                                                                                                                =
                                                                                                                v5075.clone();
                                                                                                            move
                                                                                                                |v_6:
                                                                                                                     string|
                                                                                                                Spiral::closure95(v4519.clone(),
                                                                                                                                  v5075.clone(),
                                                                                                                                  v_6)
                                                                                                        })
                                                                                         })(replace(replace(replace(replace(replace(replace(replace(replace(replace(Spiral::method66(string("\\s\\sfable_library_rust::Native_::getZero\\(\\);"),
                                                                                                                                                                                     string(" fable_library_rust::Native_::getZero::<()>();"),
                                                                                                                                                                                     replace(replace(Spiral::method66(string("\\s\\sgetZero\\(\\);"),
                                                                                                                                                                                                                      string(" getZero::<()>();"),
                                                                                                                                                                                                                      Spiral::method66(string("\\s\\sdefaultOf\\(\\);"),
                                                                                                                                                                                                                                       string(" defaultOf::<()>();"),
                                                                                                                                                                                                                                       replace(replace(concat(new_array(&[v4928,
                                                                                                                                                                                                                                                                          string("\n\n"),
                                                                                                                                                                                                                                                                          v4983,
                                                                                                                                                                                                                                                                          string("\n")])),
                                                                                                                                                                                                                                                       append(string("),)"),
                                                                                                                                                                                                                                                              (";".into())),
                                                                                                                                                                                                                                                       string("));")),
                                                                                                                                                                                                                                               append(string("},)"),
                                                                                                                                                                                                                                                      (";".into())),
                                                                                                                                                                                                                                               string("});")))),
                                                                                                                                                                                                     append(string("(&e.get_Curren"),
                                                                                                                                                                                                            ("t".into())),
                                                                                                                                                                                                     string("(e.get_Current")),
                                                                                                                                                                                             append(string("getNull"),
                                                                                                                                                                                                    ("::<()>()".into())),
                                                                                                                                                                                             string("fable_library_rust::Native_::getZero()"))),
                                                                                                                                                                    string("::Slice\'_"),
                                                                                                                                                                    string("::Slice__")),
                                                                                                                                                            string(" Slice\'_"),
                                                                                                                                                            string(" Slice__")),
                                                                                                                                                    append(string("defaultOf()"),
                                                                                                                                                           (",".into())),
                                                                                                                                                    string("defaultOf::<std::sync::Arc<dyn IDisposable>>(),")),
                                                                                                                                            append(string("__self"),
                                                                                                                                                   ("__.".into())),
                                                                                                                                            string("self.")),
                                                                                                                                    append(string("_self"),
                                                                                                                                           ("_.".into())),
                                                                                                                                    string("self.")),
                                                                                                                            append(string("get_or_insert_wit"),
                                                                                                                                   ("h".into())),
                                                                                                                            string("get_or_init")),
                                                                                                                    append(string("use fable_library_rust::System::Collections::Concurrent::ConcurrentStack_1"),
                                                                                                                           (";".into())),
                                                                                                                    string("type ConcurrentStack_1<T> = T;")),
                                                                                                            append(string("use fable_library_rust::System::TimeZoneInfo"),
                                                                                                                   (";".into())),
                                                                                                            string("type TimeZoneInfo = i64;")),
                                                                                                    append(string("use fable_library_rust::System::Threading::Tasks::TaskCanceledException"),
                                                                                                           (";".into())),
                                                                                                    string("type TaskCanceledException = ();"))))
                                                                        };
                                                                        if (v4985) == false {
                                                                            Spiral::method76(
                                                                                v4413.clone(),
                                                                                v5087.clone(),
                                                                            );
                                                                        }
                                                                        {
                                                                            let v5093:
                                                                                        string =
                                                                                    if (if let Spiral::US39::US39_1
                                                                                               =
                                                                                               &v3889
                                                                                           {
                                                                                            true
                                                                                        } else {
                                                                                            false
                                                                                        })
                                                                                           !=
                                                                                           true
                                                                                       {
                                                                                        concat(new_array(&[string("cargo +nightly-2024-07-14 build --release --target wasm32-unknown-unknown --manifest-path \""),
                                                                                                           v4138.clone(),
                                                                                                           string("\"")]))
                                                                                    } else {
                                                                                        concat(new_array(&[string("cargo run --manifest-path \""),
                                                                                                           v4138,
                                                                                                           string("\"")]))
                                                                                    };
                                                                            let v5106:
                                                                                        Array<(string,
                                                                                               string)> =
                                                                                    if (if let Spiral::US39::US39_1
                                                                                               =
                                                                                               &v3889
                                                                                           {
                                                                                            true
                                                                                        } else {
                                                                                            false
                                                                                        })
                                                                                           !=
                                                                                           true
                                                                                       {
                                                                                        new_empty::<(string,
                                                                                                     string)>()
                                                                                    } else {
                                                                                        new_array(&[(string("TRACE_LEVEL"),
                                                                                                     string("Verbose")),
                                                                                                    (string("RUSTC_WRAPPER"),
                                                                                                     string("sccache")),
                                                                                                    (string("RUST_BACKTRACE"),
                                                                                                     string("full")),
                                                                                                    (string("RUSTFLAGS"),
                                                                                                     string("-C prefer-dynamic"))])
                                                                                    };
                                                                            let v5135:
                                                                                        Result<string,
                                                                                               string> =
                                                                                    match &v4046
                                                                                        {
                                                                                        Spiral::US13::US13_0(v4046_0_0)
                                                                                        =>
                                                                                        Ok::<string,
                                                                                             string>(v4046_0_0.clone()),
                                                                                        Spiral::US13::US13_1(v4046_1_0)
                                                                                        =>
                                                                                        Err::<string,
                                                                                              string>(v4046_1_0.clone()),
                                                                                    };
                                                                            let patternInput_20:
                                                                                        (i32,
                                                                                         string) =
                                                                                    Spiral::method101(v5093.clone(),
                                                                                                      None::<CancellationToken>,
                                                                                                      v5106.clone(),
                                                                                                      None::<Func1<(i32,
                                                                                                                    string,
                                                                                                                    bool),
                                                                                                                   Arc<Async<()>>>>,
                                                                                                      None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                   ()>>,
                                                                                                      true,
                                                                                                      v5135.ok());
                                                                            let v5153: string =
                                                                                patternInput_20
                                                                                    .1
                                                                                    .clone();
                                                                            let v5152: i32 =
                                                                                patternInput_20
                                                                                    .0
                                                                                    .clone();
                                                                            let patternInput_26:
                                                                                        (Spiral::US5,
                                                                                         Spiral::US5,
                                                                                         Spiral::US5,
                                                                                         Spiral::US5) =
                                                                                    if if let Spiral::US39::US39_1
                                                                                              =
                                                                                              &v3889
                                                                                          {
                                                                                           true
                                                                                       } else {
                                                                                           false
                                                                                       }
                                                                                       {
                                                                                        let v5155:
                                                                                                i32 =
                                                                                            get_Count(v5106.clone());
                                                                                        let v5156:
                                                                                                Array<string> =
                                                                                            new_init(&string(""),
                                                                                                     v5155);
                                                                                        let v5157:
                                                                                                LrcPtr<Spiral::Mut5> =
                                                                                            LrcPtr::new(Spiral::Mut5{l0:
                                                                                                                         MutCell::new(0_i32),});
                                                                                        while Spiral::method32(v5155,
                                                                                                               v5157.clone())
                                                                                              {
                                                                                            let v5159:
                                                                                                    i32 =
                                                                                                v5157.l0.get().clone();
                                                                                            let patternInput_21:
                                                                                                    (string,
                                                                                                     string) =
                                                                                                v5106[v5159].clone();
                                                                                            let v5162:
                                                                                                    string =
                                                                                                sprintf!("$env:{}=\'\'{}\'\'",
                                                                                                         patternInput_21.0.clone(),
                                                                                                         patternInput_21.1.clone());
                                                                                            v5156.get_mut()[v5159
                                                                                                                as
                                                                                                                usize]
                                                                                                =
                                                                                                v5162;
                                                                                            {
                                                                                                let v5163:
                                                                                                        i32 =
                                                                                                    (v5159)
                                                                                                        +
                                                                                                        1_i32;
                                                                                                v5157.l0.set(v5163);
                                                                                                ()
                                                                                            }
                                                                                        }
                                                                                        {
                                                                                            let v5187:
                                                                                                    string =
                                                                                                concat(new_array(&[string("pwsh -c \'"),
                                                                                                                   join(string(";"),
                                                                                                                        toArray_1(ofArray_1(new_array(&[join(string(";"),
                                                                                                                                                             toArray_1(ofArray_1(v5156.clone()))),
                                                                                                                                                        v5093])))),
                                                                                                                   string("\'")]));
                                                                                            let patternInput_22:
                                                                                                    (Spiral::US5,
                                                                                                     Spiral::US5,
                                                                                                     Spiral::US5,
                                                                                                     Spiral::US5) =
                                                                                                if (v5152)
                                                                                                       !=
                                                                                                       0_i32
                                                                                                   {
                                                                                                    let v5194:
                                                                                                            () =
                                                                                                        {
                                                                                                            Spiral::closure97(v3738,
                                                                                                                              v4413.clone(),
                                                                                                                              v5153.clone(),
                                                                                                                              v5152,
                                                                                                                              v5187.clone(),
                                                                                                                              ());
                                                                                                            ()
                                                                                                        };
                                                                                                    (Spiral::US5::US5_0(string("rs")),
                                                                                                     Spiral::US5::US5_1,
                                                                                                     Spiral::US5::US5_1,
                                                                                                     Spiral::US5::US5_1)
                                                                                                } else {
                                                                                                    let result_2:
                                                                                                            LrcPtr<MutCell<Spiral::US5>> =
                                                                                                        refCell(Spiral::US5::US5_1);
                                                                                                    try_catch(||
                                                                                                                  result_2.set(Spiral::closure72((),
                                                                                                                                                 Spiral::closure98(v5153.clone(),
                                                                                                                                                                   ()))),
                                                                                                              |ex_2:
                                                                                                                   LrcPtr<Exception>|
                                                                                                                  result_2.set(Spiral::closure100(v4413.clone(),
                                                                                                                                                  v5153.clone(),
                                                                                                                                                  v5187,
                                                                                                                                                  ex_2.clone())));
                                                                                                    {
                                                                                                        let v5250:
                                                                                                                Spiral::US5 =
                                                                                                            result_2.get().clone();
                                                                                                        let v5264:
                                                                                                                Option<string> =
                                                                                                            match &v5250
                                                                                                                {
                                                                                                                Spiral::US5::US5_0(v5250_0_0)
                                                                                                                =>
                                                                                                                Some(match &v5250
                                                                                                                         {
                                                                                                                         Spiral::US5::US5_0(x)
                                                                                                                         =>
                                                                                                                         x.clone(),
                                                                                                                         _
                                                                                                                         =>
                                                                                                                         unreachable!(),
                                                                                                                     }.clone()),
                                                                                                                _
                                                                                                                =>
                                                                                                                None::<string>,
                                                                                                            };
                                                                                                        (Spiral::US5::US5_0(string("rs")),
                                                                                                         Spiral::US5::US5_0(v5087.clone()),
                                                                                                         Spiral::US5::US5_0(v4413.clone()),
                                                                                                         Spiral::US5::US5_0(v5264.unwrap()))
                                                                                                    }
                                                                                                };
                                                                                            (patternInput_22.0.clone(),
                                                                                             patternInput_22.1.clone(),
                                                                                             patternInput_22.2.clone(),
                                                                                             patternInput_22.3.clone())
                                                                                        }
                                                                                    } else {
                                                                                        let v5275:
                                                                                                string =
                                                                                            sprintf!("target/spiral/{}/target/wasm32-unknown-unknown/release/spiral_{}.wasm",
                                                                                                     string("spiral"),
                                                                                                     v3995.clone());
                                                                                        let v5287:
                                                                                                string =
                                                                                            sprintf!("pwsh -c \"pwsh {} {} -Linux -EnvironmentVariables AUTOMATION={}`nNEAR_RPC_TIMEOUT_SECS=100\"",
                                                                                                     string("scripts/invoke-block.ps1"),
                                                                                                     sprintf!("\'deps/spiral/workspace/target/release/spiral_wasm -w {} -t debug {}\'",
                                                                                                              v5275.clone(),
                                                                                                              if let Spiral::US39::US39_0(v3889_0_0)
                                                                                                                     =
                                                                                                                     &v3889
                                                                                                                 {
                                                                                                                  let v5276:
                                                                                                                          Spiral::US40 =
                                                                                                                      v3889_0_0.clone();
                                                                                                                  match &v5276
                                                                                                                      {
                                                                                                                      Spiral::US40::US40_0(v5276_0_0)
                                                                                                                      =>
                                                                                                                      v5276_0_0.clone(),
                                                                                                                      Spiral::US40::US40_1(v5276_1_0)
                                                                                                                      =>
                                                                                                                      v5276_1_0.clone(),
                                                                                                                  }
                                                                                                              } else {
                                                                                                                  string("")
                                                                                                              }),
                                                                                                     Spiral::method3(string("AUTOMATION")));
                                                                                        let patternInput_25:
                                                                                                (Spiral::US5,
                                                                                                 Spiral::US5,
                                                                                                 Spiral::US5,
                                                                                                 Spiral::US5) =
                                                                                            if (v5152)
                                                                                                   ==
                                                                                                   0_i32
                                                                                               {
                                                                                                let patternInput_23:
                                                                                                        (i32,
                                                                                                         string) =
                                                                                                    Spiral::method101(v5287.clone(),
                                                                                                                      None::<CancellationToken>,
                                                                                                                      new_empty::<(string,
                                                                                                                                   string)>(),
                                                                                                                      None::<Func1<(i32,
                                                                                                                                    string,
                                                                                                                                    bool),
                                                                                                                                   Arc<Async<()>>>>,
                                                                                                                      None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                                   ()>>,
                                                                                                                      true,
                                                                                                                      Some(v4066));
                                                                                                let v5312:
                                                                                                        string =
                                                                                                    patternInput_23.1.clone();
                                                                                                let v5311:
                                                                                                        i32 =
                                                                                                    patternInput_23.0.clone();
                                                                                                let patternInput_24:
                                                                                                        (Spiral::US5,
                                                                                                         Spiral::US5,
                                                                                                         Spiral::US5,
                                                                                                         Spiral::US5) =
                                                                                                    if (v5311)
                                                                                                           ==
                                                                                                           0_i32
                                                                                                       {
                                                                                                        (Spiral::US5::US5_0(string("rs")),
                                                                                                         Spiral::US5::US5_0(v5087),
                                                                                                         Spiral::US5::US5_0(v4413.clone()),
                                                                                                         Spiral::US5::US5_0(v5312.clone()))
                                                                                                    } else {
                                                                                                        let v5320:
                                                                                                                () =
                                                                                                            {
                                                                                                                Spiral::closure102(v3738,
                                                                                                                                   v4413.clone(),
                                                                                                                                   v5153.clone(),
                                                                                                                                   v5312,
                                                                                                                                   v5311,
                                                                                                                                   ());
                                                                                                                ()
                                                                                                            };
                                                                                                        (Spiral::US5::US5_0(string("rs")),
                                                                                                         Spiral::US5::US5_1,
                                                                                                         Spiral::US5::US5_1,
                                                                                                         Spiral::US5::US5_1)
                                                                                                    };
                                                                                                (patternInput_24.0.clone(),
                                                                                                 patternInput_24.1.clone(),
                                                                                                 patternInput_24.2.clone(),
                                                                                                 patternInput_24.3.clone())
                                                                                            } else {
                                                                                                let v5378:
                                                                                                        () =
                                                                                                    {
                                                                                                        Spiral::closure103(v3738,
                                                                                                                           v4413.clone(),
                                                                                                                           v5153,
                                                                                                                           v5152,
                                                                                                                           v5275,
                                                                                                                           v5287,
                                                                                                                           ());
                                                                                                        ()
                                                                                                    };
                                                                                                (Spiral::US5::US5_0(string("rs")),
                                                                                                 Spiral::US5::US5_1,
                                                                                                 Spiral::US5::US5_1,
                                                                                                 Spiral::US5::US5_1)
                                                                                            };
                                                                                        (patternInput_25.0.clone(),
                                                                                         patternInput_25.1.clone(),
                                                                                         patternInput_25.2.clone(),
                                                                                         patternInput_25.3.clone())
                                                                                    };
                                                                            if v3738 {
                                                                                let v5442:
                                                                                            string =
                                                                                        if (if let Spiral::US39::US39_1
                                                                                                   =
                                                                                                   &v3889
                                                                                               {
                                                                                                true
                                                                                            } else {
                                                                                                false
                                                                                            })
                                                                                               !=
                                                                                               true
                                                                                           {
                                                                                            string("wasm32-unknown-unknown/release")
                                                                                        } else {
                                                                                            string("debug")
                                                                                        };
                                                                                let v5445:
                                                                                            string =
                                                                                        Spiral::method36(v4079.clone(),
                                                                                                         sprintf!("target/{}/spiral_{}{}",
                                                                                                                  v5442.clone(),
                                                                                                                  v3995.clone(),
                                                                                                                  string("")));
                                                                                let v5448:
                                                                                            string =
                                                                                        Spiral::method36(v4079.clone(),
                                                                                                         sprintf!("target/{}/spiral_{}{}",
                                                                                                                  v5442.clone(),
                                                                                                                  v3995.clone(),
                                                                                                                  string(".wasm")));
                                                                                let v5451:
                                                                                            string =
                                                                                        Spiral::method36(v4079.clone(),
                                                                                                         sprintf!("target/{}/spiral_{}{}",
                                                                                                                  v5442.clone(),
                                                                                                                  v3995.clone(),
                                                                                                                  string(".pdb")));
                                                                                let v5454:
                                                                                            string =
                                                                                        Spiral::method36(v4079.clone(),
                                                                                                         sprintf!("target/{}/spiral_{}{}",
                                                                                                                  v5442.clone(),
                                                                                                                  v3995.clone(),
                                                                                                                  string(".exe")));
                                                                                let v5457:
                                                                                            string =
                                                                                        Spiral::method36(v4079,
                                                                                                         sprintf!("target/{}/spiral_{}{}",
                                                                                                                  v5442,
                                                                                                                  v3995,
                                                                                                                  string(".d")));
                                                                                let v5458:
                                                                                            bool =
                                                                                        Spiral::method38(v5445.clone());
                                                                                let v5459:
                                                                                            bool =
                                                                                        Spiral::method38(v5448.clone());
                                                                                let v5460:
                                                                                            bool =
                                                                                        Spiral::method38(v5451.clone());
                                                                                let v5461:
                                                                                            bool =
                                                                                        Spiral::method38(v5454.clone());
                                                                                let v5462:
                                                                                            bool =
                                                                                        Spiral::method38(v5457.clone());
                                                                                let v5465: () = {
                                                                                    Spiral::closure104(v4413,
                                                                                                               v5457.clone(),
                                                                                                               v5462,
                                                                                                               v5454.clone(),
                                                                                                               v5461,
                                                                                                               v5451.clone(),
                                                                                                               v5460,
                                                                                                               v5448.clone(),
                                                                                                               v5459,
                                                                                                               v5445.clone(),
                                                                                                               v5458,
                                                                                                               ());
                                                                                    ()
                                                                                };
                                                                                let v5515: LrcPtr<
                                                                                    Spiral::UH5,
                                                                                > = if v5458 {
                                                                                    LrcPtr::new(Spiral::UH5::UH5_1(v5445,
                                                                                                                           v5458,
                                                                                                                           LrcPtr::new(Spiral::UH5::UH5_0)))
                                                                                } else {
                                                                                    LrcPtr::new(Spiral::UH5::UH5_0)
                                                                                };
                                                                                let v5517: LrcPtr<
                                                                                    Spiral::UH5,
                                                                                > = if v5459 {
                                                                                    LrcPtr::new(Spiral::UH5::UH5_1(v5448,
                                                                                                                           v5459,
                                                                                                                           v5515.clone()))
                                                                                } else {
                                                                                    v5515
                                                                                };
                                                                                let v5519: LrcPtr<
                                                                                    Spiral::UH5,
                                                                                > = if v5460 {
                                                                                    LrcPtr::new(Spiral::UH5::UH5_1(v5451,
                                                                                                                           v5460,
                                                                                                                           v5517.clone()))
                                                                                } else {
                                                                                    v5517
                                                                                };
                                                                                let v5521: LrcPtr<
                                                                                    Spiral::UH5,
                                                                                > = if v5461 {
                                                                                    LrcPtr::new(Spiral::UH5::UH5_1(v5454,
                                                                                                                           v5461,
                                                                                                                           v5519.clone()))
                                                                                } else {
                                                                                    v5519
                                                                                };
                                                                                Spiral::method252(
                                                                                    if v5462 {
                                                                                        LrcPtr::new(Spiral::UH5::UH5_1(v5457,
                                                                                                                                         v5462,
                                                                                                                                         v5521.clone()))
                                                                                    } else {
                                                                                        v5521
                                                                                    },
                                                                                )
                                                                            }
                                                                            (
                                                                                patternInput_26
                                                                                    .0
                                                                                    .clone(),
                                                                                patternInput_26
                                                                                    .1
                                                                                    .clone(),
                                                                                patternInput_26
                                                                                    .2
                                                                                    .clone(),
                                                                                patternInput_26
                                                                                    .3
                                                                                    .clone(),
                                                                            )
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        };
                                                        (
                                                            patternInput_27.0.clone(),
                                                            patternInput_27.1.clone(),
                                                            patternInput_27.2.clone(),
                                                            patternInput_27.3.clone(),
                                                        )
                                                    }
                                                }
                                            }
                                        } else {
                                            let patternInput_39: (
                                                Spiral::US5,
                                                Spiral::US5,
                                                Spiral::US5,
                                                Spiral::US5,
                                            ) = if (fable_library_rust::String_::fromString(
                                                v40.clone(),
                                            )) == string("typescript")
                                            {
                                                let v5531: string = Spiral::method191();
                                                let v5538: &str = &*v5531;
                                                let v5566: Option<std::string::String> =
                                                    clap::ArgMatches::get_one(&v41.clone(), v5538)
                                                        .cloned();
                                                let v5591: Spiral::US7 = defaultValue(
                                                    Spiral::US7::US7_1,
                                                    map(Spiral::method23(), v5566),
                                                );
                                                let v5598: std::string::String = match &v5591 {
                                                    Spiral::US7::US7_0(v5591_0_0) => match &v5591 {
                                                        Spiral::US7::US7_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                    _ => panic!(
                                                        "{}",
                                                        string("Option does not have a value."),
                                                    ),
                                                };
                                                let v5600: string =
                                                    fable_library_rust::String_::fromString(v5598);
                                                let v5601: string = Spiral::method25();
                                                let v5608: &str = &*v5601;
                                                let v5636: Option<Vec<std::string::String>> =
                                                    clap::ArgMatches::get_many(&v41.clone(), v5608)
                                                        .map(|x| x.cloned().into_iter().collect());
                                                let v5661: Spiral::US11 = defaultValue(
                                                    Spiral::US11::US11_1,
                                                    map(Spiral::method26(), v5636),
                                                );
                                                let v5667: Vec<std::string::String> =
                                                    new_empty::<std::string::String>().to_vec();
                                                let v5670: Vec<std::string::String> = match &v5661 {
                                                    Spiral::US11::US11_0(v5661_0_0) => match &v5661
                                                    {
                                                        Spiral::US11::US11_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                    _ => v5667.clone(),
                                                };
                                                let v5682: Result<Vec<u8>, std::io::Error> =
                                                    std::fs::read(&*v5600);
                                                let v5727: Vec<u8> =
                                                    Spiral::method27(v5682.unwrap());
                                                let v5729: Result<
                                                    std::string::String,
                                                    std::string::FromUtf8Error,
                                                > = std::string::String::from_utf8(v5727);
                                                let v5733: std::string::String = v5729.unwrap();
                                                let v5768: string =
                                                    fable_library_rust::String_::fromString(v5733);
                                                let v5780: string = Spiral::method29(sprintf!(
                                                    "{:?}",
                                                    (string("ts"), v5768.clone())
                                                ));
                                                let v5782: Spiral::US5 =
                                                    Spiral::method35(Spiral::method34());
                                                let v5788: Spiral::US5 =
                                                        match &v5782 {
                                                            Spiral::US5::US5_0(v5782_0_0)
                                                            =>
                                                            Spiral::US5::US5_0(match &v5782
                                                                                   {
                                                                                   Spiral::US5::US5_0(x)
                                                                                   =>
                                                                                   x.clone(),
                                                                                   _
                                                                                   =>
                                                                                   unreachable!(),
                                                                               }.clone()),
                                                            _ =>
                                                            Spiral::method35(string("/home/runner/work/spiral/polyglot/target/Builder/spiral")),
                                                        };
                                                let v5794: Spiral::US5 = match &v5788 {
                                                    Spiral::US5::US5_0(v5788_0_0) => {
                                                        Spiral::US5::US5_0(
                                                            match &v5788 {
                                                                Spiral::US5::US5_0(x) => x.clone(),
                                                                _ => unreachable!(),
                                                            }
                                                            .clone(),
                                                        )
                                                    }
                                                    _ => Spiral::method35(string("/workspaces")),
                                                };
                                                let v5798: string = match &v5794 {
                                                    Spiral::US5::US5_0(v5794_0_0) => match &v5794 {
                                                        Spiral::US5::US5_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                    _ => panic!(
                                                        "{}",
                                                        string("Option does not have a value."),
                                                    ),
                                                };
                                                let v5813: string = Spiral::method36(
                                                    if string("deps")
                                                        == (Spiral::method55(v5798.clone()))
                                                    {
                                                        let v5806: Spiral::US5 = Spiral::method35(
                                                            Spiral::method41(v5798.clone())
                                                                .clone()
                                                                .unwrap(),
                                                        );
                                                        match &v5806 {
                                                            Spiral::US5::US5_0(v5806_0_0) => {
                                                                match &v5806 {
                                                                    Spiral::US5::US5_0(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone()
                                                            }
                                                            _ => panic!(
                                                                "{}",
                                                                string(
                                                                    "Option does not have a value."
                                                                ),
                                                            ),
                                                        }
                                                    } else {
                                                        v5798
                                                    },
                                                    string("polyglot"),
                                                );
                                                let v5817: string = toLower(Spiral::method34());
                                                let v5822: string = toLower(v5813);
                                                let v5831: Spiral::US13 =
                                                    if startsWith3(v5817, v5822.clone(), false) {
                                                        Spiral::US13::US13_1(v5822.clone())
                                                    } else {
                                                        Spiral::US13::US13_0(v5822)
                                                    };
                                                let v5843: Result<string, string> = match &v5831 {
                                                    Spiral::US13::US13_0(v5831_0_0) => {
                                                        Ok::<string, string>(v5831_0_0.clone())
                                                    }
                                                    Spiral::US13::US13_1(v5831_1_0) => {
                                                        Err::<string, string>(v5831_1_0.clone())
                                                    }
                                                };
                                                let v5845: bool = true;
                                                let _result_unwrap_or_else =
                                                    v5843.unwrap_or_else(|x| {
                                                        //;
                                                        let v5847: string = x;
                                                        let v5849: bool = true;
                                                        v5847
                                                    });
                                                let v5851: string = _result_unwrap_or_else;
                                                let v5856: string = Spiral::method211(
                                                    Spiral::US5::US5_0(v5780.clone()),
                                                    string("spiral"),
                                                    Spiral::US42::US42_0(Spiral::US41::US41_1),
                                                    v5851.clone(),
                                                );
                                                let v5862: string = Spiral::method212(
                                                    v5768,
                                                    string("spiral"),
                                                    LrcPtr::new(Spiral::UH2::UH2_0),
                                                    LrcPtr::new(Spiral::UH4::UH4_1(
                                                        string("Fable.Core"),
                                                        string("4.3.0"),
                                                        LrcPtr::new(Spiral::UH4::UH4_0),
                                                    )),
                                                    v5856.clone(),
                                                    v5851.clone(),
                                                );
                                                let v5864: string = Spiral::method36(
                                                    v5851.clone(),
                                                    string("lib/typescript/fable/fable_modules"),
                                                );
                                                let v5865: string = concat(new_array(&[
                                                    string("fable-library-"),
                                                    string("ts"),
                                                ]));
                                                let v5866: string =
                                                    Spiral::method257(v5865.clone());
                                                let v5868: async_walkdir::WalkDir =
                                                    async_walkdir::WalkDir::new(&*v5864.clone());
                                                let v5871: async_walkdir::WalkDir =
                                                    async_walkdir::WalkDir::filter(
                                                        v5868,
                                                        move |x| {
                                                            Func1::new({
                                                                let v5865 = v5865.clone();
                                                                move
                                                                                                                          |v_11:
                                                                                                                               async_walkdir::DirEntry|
                                                                                                                          Spiral::closure108(v5865.clone(),
                                                                                                                                             v_11)
                                                            })(
                                                                x
                                                            )
                                                        },
                                                    );
                                                let v5872 = Spiral::method261(v5866);
                                                let v5874 = futures::stream::StreamExt::filter_map(
                                                    v5871,
                                                    |x| async { v5872(x) },
                                                );
                                                let v5876: std::pin::Pin<
                                                    Box<
                                                        dyn std::future::Future<
                                                            Output = Vec<(string, string)>,
                                                        >,
                                                    >,
                                                > = Box::pin(futures::stream::StreamExt::collect(
                                                    v5874,
                                                ));
                                                let v5878: Vec<(string, string)> = v5876.await;
                                                let v5880: rayon::vec::IntoIter<(string, string)> =
                                                    rayon::iter::IntoParallelIterator::into_par_iter(
                                                        v5878,
                                                    );
                                                let v5883: rayon::iter::Map<
                                                    rayon::vec::IntoIter<(string, string)>,
                                                    _,
                                                > = rayon::iter::ParallelIterator::map(
                                                    v5880,
                                                    |x| {
                                                        Func1::new(move
                                                                                                                     |arg10_0040_20:
                                                                                                                          (string,
                                                                                                                           string)|
                                                                                                                     Spiral::closure116((),
                                                                                                                                        arg10_0040_20))(x)
                                                    },
                                                );
                                                let v5885: Vec<(string, string)> =
                                                    rayon::iter::ParallelIterator::collect(v5883);
                                                let v5888: Option<(string, string)> = tryItem(
                                                    0_i32,
                                                    fable_library_rust::NativeArray_::array_from(
                                                        v5885.clone(),
                                                    ),
                                                );
                                                let v5914: Spiral::US51 = defaultValue(
                                                    Spiral::US51::US51_1,
                                                    map(Spiral::method267(), v5888),
                                                );
                                                let v5920: () = {
                                                    Spiral::closure118(v5914.clone(), ());
                                                    ()
                                                };
                                                Spiral::method270(
                                                    v5856.clone(),
                                                    v5864.clone(),
                                                    v5914.clone(),
                                                );
                                                {
                                                    let patternInput_28: (i32, string) =
                                                        Spiral::method221(
                                                            Spiral::US39::US39_1,
                                                            v5856.clone(),
                                                            string("ts"),
                                                            v5862,
                                                            v5831.clone(),
                                                        );
                                                    let v5969: string = patternInput_28.1.clone();
                                                    let v5968: i32 = patternInput_28.0.clone();
                                                    Spiral::method270(
                                                        v5856.clone(),
                                                        v5864,
                                                        v5914.clone(),
                                                    );
                                                    {
                                                        let patternInput_32: (
                                                            Spiral::US5,
                                                            Spiral::US5,
                                                            Spiral::US5,
                                                            Spiral::US5,
                                                        ) = if (v5968) != 0_i32 {
                                                            let v5976: () = {
                                                                Spiral::closure119(
                                                                    v5969.clone(),
                                                                    v5968,
                                                                    (),
                                                                );
                                                                ()
                                                            };
                                                            (
                                                                Spiral::US5::US5_0(string("ts")),
                                                                Spiral::US5::US5_1,
                                                                Spiral::US5::US5_1,
                                                                Spiral::US5::US5_0(v5969),
                                                            )
                                                        } else {
                                                            let v6028: bool = true;
                                                            let _vec_map : Vec<_> = v5670.into_iter().map(|x| { //;
                                                                    let v6030:
                                                                            std::string::String =
                                                                        x;
                                                                    let v6032:
                                                                            string =
                                                                        fable_library_rust::String_::fromString(v6030);
                                                                    let v6040:
                                                                            string =
                                                                        if contains(v6032.clone(),
                                                                                    string("="))
                                                                           {
                                                                            v6032.clone()
                                                                        } else {
                                                                            concat(new_array(&[string("\""),
                                                                                               v6032,
                                                                                               string("\":\"*\"")]))
                                                                        };
                                                                    let v6042:
                                                                            bool =
                                                                        true; v6040 }).collect::<Vec<_>>();
                                                            let v6044: Vec<string> = _vec_map;
                                                            let v6046:
                                                                            Array<string> =
                                                                        fable_library_rust::NativeArray_::array_from(v6044.clone());
                                                            let v6065: string = join(
                                                                string(",\n"),
                                                                toArray_1(delay(Func0::new({
                                                                    let v6046 = v6046.clone();
                                                                    move || {
                                                                        map_1(
                                                                            Func1::new({
                                                                                let v6046 =
                                                                                    v6046.clone();
                                                                                move |i_3: i32| {
                                                                                    v6046[i_3]
                                                                                        .clone()
                                                                                }
                                                                            }),
                                                                            rangeNumeric(
                                                                                0_i32,
                                                                                1_i32,
                                                                                (get_Count(
                                                                                    v6046.clone(),
                                                                                )) - 1_i32,
                                                                            ),
                                                                        )
                                                                    }
                                                                }))),
                                                            );
                                                            let v6081:
                                                                            string =
                                                                        append((append((append((append((append((append((append(string("{"),
                                                                                                                               (concat(new_array(&[string("  \"name\": \"spiral_"),
                                                                                                                                                   v5780,
                                                                                                                                                   string("\",")]))))),
                                                                                                                       string("  \"dependencies\": {"))),
                                                                                                               (v6065))),
                                                                                                       string("  },"))),
                                                                                               string("    \"devDependencies\": {"))),
                                                                                       string("  },"))),
                                                                               string("}"));
                                                            let v6083: string = Spiral::method36(
                                                                v5856.clone(),
                                                                string("package.json"),
                                                            );
                                                            let v6086: string = Spiral::method36(
                                                                Spiral::method36(
                                                                    v5856.clone(),
                                                                    string("../.."),
                                                                ),
                                                                string("package.json"),
                                                            );
                                                            Spiral::method76(v6083, v6081);
                                                            Spiral::method76(v6086, string(""));
                                                            {
                                                                let v6089: string =
                                                                    Spiral::method36(
                                                                        v5856,
                                                                        concat(new_array(&[
                                                                            string("spiral"),
                                                                            string("."),
                                                                            string("ts"),
                                                                        ])),
                                                                    );
                                                                let v6092: () = {
                                                                    Spiral::closure120(
                                                                        v6089.clone(),
                                                                        (),
                                                                    );
                                                                    ()
                                                                };
                                                                let v6150: Result<
                                                                    Vec<u8>,
                                                                    std::io::Error,
                                                                > = std::fs::read(&*v6089.clone());
                                                                let v6195: Vec<u8> =
                                                                    Spiral::method27(
                                                                        v6150.unwrap(),
                                                                    );
                                                                let v6197: Result<
                                                                    std::string::String,
                                                                    std::string::FromUtf8Error,
                                                                > = std::string::String::from_utf8(
                                                                    v6195,
                                                                );
                                                                let v6201: std::string::String =
                                                                    v6197.unwrap();
                                                                let v6236:
                                                                                string =
                                                                            fable_library_rust::String_::fromString(v6201);
                                                                let v6245:
                                                                                bool =
                                                                            contains(v6236.clone(),
                                                                                     string("// spiral.process_typescript"));
                                                                let v6254: string = if v6245 {
                                                                    v6236.clone()
                                                                } else {
                                                                    Spiral::method66(string("\\s\\sdefaultOf\\(\\);"),
                                                                                                 string(" defaultOf::<()>();"),
                                                                                                 replace(v6236,
                                                                                                         sprintf!("\"./fable_modules/fable-library-ts.{}/",
                                                                                                                  v5914.clone()),
                                                                                                         sprintf!("\"{}/lib/typescript/fable/fable_modules/fable-library-ts.{}/",
                                                                                                                  v5851,
                                                                                                                  v5914)))
                                                                };
                                                                if (v6245) == false {
                                                                    Spiral::method76(v6089.clone(),
                                                                                             concat(new_array(&[v6254.clone(),
                                                                                                                string("\n\n"),
                                                                                                                string("// spiral.process_typescript"),
                                                                                                                string("\n")])));
                                                                }
                                                                {
                                                                    let v6257: string =
                                                                        concat(new_array(&[
                                                                            string(
                                                                                "bun --bun run \"",
                                                                            ),
                                                                            v6089.clone(),
                                                                            string("\""),
                                                                        ]));
                                                                    let v6259: string =
                                                                        Spiral::method3(string(
                                                                            "PATH",
                                                                        ));
                                                                    let v6299: Spiral::US5 =
                                                                        if (v6259.clone())
                                                                            == string("")
                                                                        {
                                                                            Spiral::US5::US5_1
                                                                        } else {
                                                                            Spiral::US5::US5_0(concat(new_array(&[string("~/.bun/bin"),
                                                                                                                          if cfg!(windows)
                                                                                                                             {
                                                                                                                              string(";")
                                                                                                                          } else {
                                                                                                                              string(":")
                                                                                                                          },
                                                                                                                          v6259])))
                                                                        };
                                                                    let v6315:
                                                                                    Array<(string,
                                                                                           string)> =
                                                                                toArray(Spiral::method275(Spiral::method274(match &v6299
                                                                                                                                {
                                                                                                                                Spiral::US5::US5_0(v6299_0_0)
                                                                                                                                =>
                                                                                                                                LrcPtr::new(Spiral::UH4::UH4_1(string("PATH"),
                                                                                                                                                               match &v6299
                                                                                                                                                                   {
                                                                                                                                                                   Spiral::US5::US5_0(x)
                                                                                                                                                                   =>
                                                                                                                                                                   x.clone(),
                                                                                                                                                                   _
                                                                                                                                                                   =>
                                                                                                                                                                   unreachable!(),
                                                                                                                                                               }.clone(),
                                                                                                                                                               LrcPtr::new(Spiral::UH4::UH4_0))),
                                                                                                                                _
                                                                                                                                =>
                                                                                                                                LrcPtr::new(Spiral::UH4::UH4_0),
                                                                                                                            },
                                                                                                                            LrcPtr::new(Spiral::UH4::UH4_1(string("TRACE_LEVEL"),
                                                                                                                                                           string("Verbose"),
                                                                                                                                                           LrcPtr::new(Spiral::UH4::UH4_0)))),
                                                                                                          empty::<(string,
                                                                                                                   string)>()));
                                                                    let v6346: Result<
                                                                        string,
                                                                        string,
                                                                    > = match &v5831 {
                                                                        Spiral::US13::US13_0(
                                                                            v5831_0_0,
                                                                        ) => Ok::<string, string>(
                                                                            v5831_0_0.clone(),
                                                                        ),
                                                                        Spiral::US13::US13_1(
                                                                            v5831_1_0,
                                                                        ) => Err::<string, string>(
                                                                            v5831_1_0.clone(),
                                                                        ),
                                                                    };
                                                                    let patternInput_29:
                                                                                    (i32,
                                                                                     string) =
                                                                                Spiral::method101(v6257.clone(),
                                                                                                  None::<CancellationToken>,
                                                                                                  v6315.clone(),
                                                                                                  None::<Func1<(i32,
                                                                                                                string,
                                                                                                                bool),
                                                                                                               Arc<Async<()>>>>,
                                                                                                  None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                               ()>>,
                                                                                                  true,
                                                                                                  v6346.ok());
                                                                    let v6364: string =
                                                                        patternInput_29.1.clone();
                                                                    let v6363: i32 =
                                                                        patternInput_29.0.clone();
                                                                    let v6365: i32 =
                                                                        get_Count(v6315.clone());
                                                                    let v6366: Array<string> =
                                                                        new_init(
                                                                            &string(""),
                                                                            v6365,
                                                                        );
                                                                    let v6367: LrcPtr<
                                                                        Spiral::Mut5,
                                                                    > = LrcPtr::new(Spiral::Mut5 {
                                                                        l0: MutCell::new(0_i32),
                                                                    });
                                                                    while Spiral::method32(
                                                                        v6365,
                                                                        v6367.clone(),
                                                                    ) {
                                                                        let v6369: i32 =
                                                                            v6367.l0.get().clone();
                                                                        let patternInput_30: (
                                                                            string,
                                                                            string,
                                                                        ) = v6315[v6369].clone();
                                                                        let v6372: string = sprintf!(
                                                                            "$env:{}=\'\'{}\'\'",
                                                                            patternInput_30
                                                                                .0
                                                                                .clone(),
                                                                            patternInput_30
                                                                                .1
                                                                                .clone()
                                                                        );
                                                                        v6366.get_mut()
                                                                            [v6369 as usize] =
                                                                            v6372;
                                                                        {
                                                                            let v6373: i32 =
                                                                                (v6369) + 1_i32;
                                                                            v6367.l0.set(v6373);
                                                                            ()
                                                                        }
                                                                    }
                                                                    {
                                                                        let v6386: string = sprintf!(
                                                                            "pwsh -c \'{}; {}\'",
                                                                            join(
                                                                                string(";"),
                                                                                toArray_1(
                                                                                    ofArray_1(
                                                                                        v6366
                                                                                            .clone(
                                                                                            )
                                                                                    )
                                                                                )
                                                                            ),
                                                                            v6257
                                                                        );
                                                                        let patternInput_31: (
                                                                            Spiral::US5,
                                                                            Spiral::US5,
                                                                            Spiral::US5,
                                                                            Spiral::US5,
                                                                        ) = if (v6363) == 0_i32 {
                                                                            let result_3: LrcPtr<
                                                                                MutCell<
                                                                                    Spiral::US5,
                                                                                >,
                                                                            > = refCell(
                                                                                Spiral::US5::US5_1,
                                                                            );
                                                                            try_catch(||
                                                                                                      result_3.set(Spiral::closure72((),
                                                                                                                                     Spiral::closure121(v6364.clone(),
                                                                                                                                                        ()))),
                                                                                                  |ex_3:
                                                                                                       LrcPtr<Exception>|
                                                                                                      result_3.set(Spiral::closure122(v6089.clone(),
                                                                                                                                      v6364.clone(),
                                                                                                                                      v6386.clone(),
                                                                                                                                      ex_3.clone())));
                                                                            {
                                                                                let v6393:
                                                                                                    Spiral::US5 =
                                                                                                result_3.get().clone();
                                                                                let v6407:
                                                                                                    Option<string> =
                                                                                                match &v6393
                                                                                                    {
                                                                                                    Spiral::US5::US5_0(v6393_0_0)
                                                                                                    =>
                                                                                                    Some(match &v6393
                                                                                                             {
                                                                                                             Spiral::US5::US5_0(x)
                                                                                                             =>
                                                                                                             x.clone(),
                                                                                                             _
                                                                                                             =>
                                                                                                             unreachable!(),
                                                                                                         }.clone()),
                                                                                                    _
                                                                                                    =>
                                                                                                    None::<string>,
                                                                                                };
                                                                                (Spiral::US5::US5_0(string("ts")),
                                                                                             Spiral::US5::US5_0(v6254),
                                                                                             Spiral::US5::US5_0(v6089.clone()),
                                                                                             Spiral::US5::US5_0(v6407.unwrap()))
                                                                            }
                                                                        } else {
                                                                            let v6416: () = {
                                                                                Spiral::closure124(
                                                                                    v6089,
                                                                                    v6364,
                                                                                    v6363,
                                                                                    v6386,
                                                                                    (),
                                                                                );
                                                                                ()
                                                                            };
                                                                            (
                                                                                Spiral::US5::US5_0(
                                                                                    string("ts"),
                                                                                ),
                                                                                Spiral::US5::US5_1,
                                                                                Spiral::US5::US5_1,
                                                                                Spiral::US5::US5_1,
                                                                            )
                                                                        };
                                                                        (
                                                                            patternInput_31
                                                                                .0
                                                                                .clone(),
                                                                            patternInput_31
                                                                                .1
                                                                                .clone(),
                                                                            patternInput_31
                                                                                .2
                                                                                .clone(),
                                                                            patternInput_31
                                                                                .3
                                                                                .clone(),
                                                                        )
                                                                    }
                                                                }
                                                            }
                                                        };
                                                        (
                                                            patternInput_32.0.clone(),
                                                            patternInput_32.1.clone(),
                                                            patternInput_32.2.clone(),
                                                            patternInput_32.3.clone(),
                                                        )
                                                    }
                                                }
                                            } else {
                                                let patternInput_38: (
                                                    Spiral::US5,
                                                    Spiral::US5,
                                                    Spiral::US5,
                                                    Spiral::US5,
                                                ) = if (fable_library_rust::String_::fromString(
                                                    v40.clone(),
                                                )) == string("python")
                                                {
                                                    let v6478: string = Spiral::method191();
                                                    let v6485: &str = &*v6478;
                                                    let v6513: Option<std::string::String> =
                                                        clap::ArgMatches::get_one(
                                                            &v41.clone(),
                                                            v6485,
                                                        )
                                                        .cloned();
                                                    let v6538: Spiral::US7 = defaultValue(
                                                        Spiral::US7::US7_1,
                                                        map(Spiral::method23(), v6513),
                                                    );
                                                    let v6545: std::string::String = match &v6538 {
                                                        Spiral::US7::US7_0(v6538_0_0) => {
                                                            match &v6538 {
                                                                Spiral::US7::US7_0(x) => x.clone(),
                                                                _ => unreachable!(),
                                                            }
                                                            .clone()
                                                        }
                                                        _ => panic!(
                                                            "{}",
                                                            string("Option does not have a value."),
                                                        ),
                                                    };
                                                    let v6547: string =
                                                        fable_library_rust::String_::fromString(
                                                            v6545,
                                                        );
                                                    let v6548: string = Spiral::method25();
                                                    let v6555: &str = &*v6548;
                                                    let v6583: Option<Vec<std::string::String>> =
                                                        clap::ArgMatches::get_many(
                                                            &v41.clone(),
                                                            v6555,
                                                        )
                                                        .map(|x| x.cloned().into_iter().collect());
                                                    let v6608: Spiral::US11 = defaultValue(
                                                        Spiral::US11::US11_1,
                                                        map(Spiral::method26(), v6583),
                                                    );
                                                    let v6614: Vec<std::string::String> =
                                                        new_empty::<std::string::String>().to_vec();
                                                    let v6617: Vec<std::string::String> =
                                                        match &v6608 {
                                                            Spiral::US11::US11_0(v6608_0_0) => {
                                                                match &v6608 {
                                                                    Spiral::US11::US11_0(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone()
                                                            }
                                                            _ => v6614.clone(),
                                                        };
                                                    let v6618: bool =
                                                        if let Spiral::US0::US0_0 = &v0_1 {
                                                            true
                                                        } else {
                                                            false
                                                        };
                                                    let v6630: Result<Vec<u8>, std::io::Error> =
                                                        std::fs::read(&*v6547);
                                                    let v6675: Vec<u8> =
                                                        Spiral::method27(v6630.unwrap());
                                                    let v6677: Result<
                                                        std::string::String,
                                                        std::string::FromUtf8Error,
                                                    > = std::string::String::from_utf8(v6675);
                                                    let v6681: std::string::String = v6677.unwrap();
                                                    let v6716: string =
                                                        fable_library_rust::String_::fromString(
                                                            v6681,
                                                        );
                                                    let v6728: string = Spiral::method29(sprintf!(
                                                        "{:?}",
                                                        (string("py"), v6716.clone())
                                                    ));
                                                    let v6730: Spiral::US5 =
                                                        Spiral::method35(Spiral::method34());
                                                    let v6736:
                                                                    Spiral::US5 =
                                                                match &v6730 {
                                                                    Spiral::US5::US5_0(v6730_0_0)
                                                                    =>
                                                                    Spiral::US5::US5_0(match &v6730
                                                                                           {
                                                                                           Spiral::US5::US5_0(x)
                                                                                           =>
                                                                                           x.clone(),
                                                                                           _
                                                                                           =>
                                                                                           unreachable!(),
                                                                                       }.clone()),
                                                                    _ =>
                                                                    Spiral::method35(string("/home/runner/work/spiral/polyglot/target/Builder/spiral")),
                                                                };
                                                    let v6742: Spiral::US5 = match &v6736 {
                                                        Spiral::US5::US5_0(v6736_0_0) => {
                                                            Spiral::US5::US5_0(
                                                                match &v6736 {
                                                                    Spiral::US5::US5_0(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone(),
                                                            )
                                                        }
                                                        _ => {
                                                            Spiral::method35(string("/workspaces"))
                                                        }
                                                    };
                                                    let v6746: string = match &v6742 {
                                                        Spiral::US5::US5_0(v6742_0_0) => {
                                                            match &v6742 {
                                                                Spiral::US5::US5_0(x) => x.clone(),
                                                                _ => unreachable!(),
                                                            }
                                                            .clone()
                                                        }
                                                        _ => panic!(
                                                            "{}",
                                                            string("Option does not have a value."),
                                                        ),
                                                    };
                                                    let v6761: string = Spiral::method36(
                                                        if string("deps")
                                                            == (Spiral::method55(v6746.clone()))
                                                        {
                                                            let v6754: Spiral::US5 =
                                                                Spiral::method35(
                                                                    Spiral::method41(v6746.clone())
                                                                        .clone()
                                                                        .unwrap(),
                                                                );
                                                            match &v6754
                                                                                         {
                                                                                         Spiral::US5::US5_0(v6754_0_0)
                                                                                         =>
                                                                                         match &v6754
                                                                                             {
                                                                                             Spiral::US5::US5_0(x)
                                                                                             =>
                                                                                             x.clone(),
                                                                                             _
                                                                                             =>
                                                                                             unreachable!(),
                                                                                         }.clone(),
                                                                                         _
                                                                                         =>
                                                                                         panic!("{}",
                                                                                                string("Option does not have a value."),),
                                                                                     }
                                                        } else {
                                                            v6746
                                                        },
                                                        string("polyglot"),
                                                    );
                                                    let v6765: string = toLower(Spiral::method34());
                                                    let v6770: string = toLower(v6761);
                                                    let v6779: Spiral::US13 =
                                                        if startsWith3(v6765, v6770.clone(), false)
                                                        {
                                                            Spiral::US13::US13_1(v6770.clone())
                                                        } else {
                                                            Spiral::US13::US13_0(v6770)
                                                        };
                                                    let v6791: Result<string, string> = match &v6779
                                                    {
                                                        Spiral::US13::US13_0(v6779_0_0) => {
                                                            Ok::<string, string>(v6779_0_0.clone())
                                                        }
                                                        Spiral::US13::US13_1(v6779_1_0) => {
                                                            Err::<string, string>(v6779_1_0.clone())
                                                        }
                                                    };
                                                    let v6793: bool = true;
                                                    let _result_unwrap_or_else = v6791
                                                        .unwrap_or_else(|x| {
                                                            //;
                                                            let v6795: string = x;
                                                            let v6797: bool = true;
                                                            v6795
                                                        });
                                                    let v6799: string = _result_unwrap_or_else;
                                                    let v6804: string = Spiral::method211(
                                                        Spiral::US5::US5_0(v6728.clone()),
                                                        string("spiral"),
                                                        Spiral::US42::US42_0(Spiral::US41::US41_2),
                                                        v6799.clone(),
                                                    );
                                                    let v6810: string = Spiral::method212(
                                                        v6716,
                                                        string("spiral"),
                                                        LrcPtr::new(Spiral::UH2::UH2_0),
                                                        LrcPtr::new(Spiral::UH4::UH4_1(
                                                            string("Fable.Core"),
                                                            string("4.3.0"),
                                                            LrcPtr::new(Spiral::UH4::UH4_0),
                                                        )),
                                                        v6804.clone(),
                                                        v6799.clone(),
                                                    );
                                                    Spiral::method220(Spiral::method36(Spiral::method36(v6799,
                                                                                                                string("lib/python/fable/fable_modules")),
                                                                                               string("fable_library")),
                                                                              Spiral::method36(v6804.clone(),
                                                                                               string("fable_modules/fable_library")));
                                                    {
                                                        let patternInput_33: (i32, string) =
                                                            Spiral::method221(
                                                                Spiral::US39::US39_1,
                                                                v6804.clone(),
                                                                string("py"),
                                                                v6810,
                                                                v6779.clone(),
                                                            );
                                                        let v6819: string =
                                                            patternInput_33.1.clone();
                                                        let v6818: i32 = patternInput_33.0.clone();
                                                        let patternInput_37: (
                                                            Spiral::US5,
                                                            Spiral::US5,
                                                            Spiral::US5,
                                                            Spiral::US5,
                                                        ) = if (v6818) != 0_i32 {
                                                            let v6826: () = {
                                                                Spiral::closure125(
                                                                    v6819.clone(),
                                                                    v6818,
                                                                    (),
                                                                );
                                                                ()
                                                            };
                                                            (
                                                                Spiral::US5::US5_0(string("py")),
                                                                Spiral::US5::US5_1,
                                                                Spiral::US5::US5_1,
                                                                Spiral::US5::US5_0(v6819),
                                                            )
                                                        } else {
                                                            let v6878: bool = true;
                                                            let _vec_map : Vec<_> = v6617.into_iter().map(|x| { //;
                                                                        let v6880:
                                                                                std::string::String =
                                                                            x;
                                                                        let v6882:
                                                                                string =
                                                                            fable_library_rust::String_::fromString(v6880);
                                                                        let v6890:
                                                                                string =
                                                                            if contains(v6882.clone(),
                                                                                        string("="))
                                                                               {
                                                                                v6882.clone()
                                                                            } else {
                                                                                concat(new_array(&[string("\""),
                                                                                                   v6882,
                                                                                                   string("\":\"*\"")]))
                                                                            };
                                                                        let v6892:
                                                                                bool =
                                                                            true; v6890 }).collect::<Vec<_>>();
                                                            let v6894: Vec<string> = _vec_map;
                                                            let v6896:
                                                                                Array<string> =
                                                                            fable_library_rust::NativeArray_::array_from(v6894.clone());
                                                            let v6915: string = join(
                                                                string(",\n"),
                                                                toArray_1(delay(Func0::new({
                                                                    let v6896 = v6896.clone();
                                                                    move || {
                                                                        map_1(
                                                                            Func1::new({
                                                                                let v6896 =
                                                                                    v6896.clone();
                                                                                move |i_4: i32| {
                                                                                    v6896[i_4]
                                                                                        .clone()
                                                                                }
                                                                            }),
                                                                            rangeNumeric(
                                                                                0_i32,
                                                                                1_i32,
                                                                                (get_Count(
                                                                                    v6896.clone(),
                                                                                )) - 1_i32,
                                                                            ),
                                                                        )
                                                                    }
                                                                }))),
                                                            );
                                                            let v6931:
                                                                                string =
                                                                            append((append((append((append((append((append((append(string("{"),
                                                                                                                                   (concat(new_array(&[string("  \"name\": \"spiral_"),
                                                                                                                                                       v6728,
                                                                                                                                                       string("\",")]))))),
                                                                                                                           string("  \"dependencies\": {"))),
                                                                                                                   (v6915))),
                                                                                                           string("  },"))),
                                                                                                   string("    \"devDependencies\": {"))),
                                                                                           string("  },"))),
                                                                                   string("}"));
                                                            let v6933: string = Spiral::method36(
                                                                v6804.clone(),
                                                                string("package.json"),
                                                            );
                                                            let v6936: string = Spiral::method36(
                                                                Spiral::method36(
                                                                    v6804.clone(),
                                                                    string("../.."),
                                                                ),
                                                                string("package.json"),
                                                            );
                                                            Spiral::method76(v6933, v6931);
                                                            Spiral::method76(v6936, string(""));
                                                            {
                                                                let v6939: string =
                                                                    Spiral::method36(
                                                                        v6804,
                                                                        concat(new_array(&[
                                                                            string("spiral"),
                                                                            string("."),
                                                                            string("py"),
                                                                        ])),
                                                                    );
                                                                let v6942: () = {
                                                                    Spiral::closure126(
                                                                        v6939.clone(),
                                                                        (),
                                                                    );
                                                                    ()
                                                                };
                                                                let v7000: Result<
                                                                    Vec<u8>,
                                                                    std::io::Error,
                                                                > = std::fs::read(&*v6939.clone());
                                                                let v7045: Vec<u8> =
                                                                    Spiral::method27(
                                                                        v7000.unwrap(),
                                                                    );
                                                                let v7047: Result<
                                                                    std::string::String,
                                                                    std::string::FromUtf8Error,
                                                                > = std::string::String::from_utf8(
                                                                    v7045,
                                                                );
                                                                let v7051: std::string::String =
                                                                    v7047.unwrap();
                                                                let v7086:
                                                                                    string =
                                                                                fable_library_rust::String_::fromString(v7051);
                                                                let v7095: bool = contains(
                                                                    v7086.clone(),
                                                                    string(
                                                                        "# spiral.process_python",
                                                                    ),
                                                                );
                                                                let v7107: string = if v7095 {
                                                                    v7086.clone()
                                                                } else {
                                                                    Spiral::method66(string("\\s\\sdefaultOf\\(\\);"),
                                                                                                     string(" defaultOf::<()>();"),
                                                                                                     replace(v7086,
                                                                                                             append(string("),)"),
                                                                                                                    (";".into())),
                                                                                                             string("));")))
                                                                };
                                                                if (v7095) == false {
                                                                    Spiral::method76(v6939.clone(),
                                                                                                 concat(new_array(&[v7107.clone(),
                                                                                                                    string("\n\n"),
                                                                                                                    string("# spiral.process_python"),
                                                                                                                    string("\n")])));
                                                                }
                                                                {
                                                                    let v7110: string =
                                                                        concat(new_array(&[
                                                                            string("python \""),
                                                                            v6939.clone(),
                                                                            string("\""),
                                                                        ]));
                                                                    let v7113: Array<(
                                                                        string,
                                                                        string,
                                                                    )> = new_array(&[(
                                                                        string("TRACE_LEVEL"),
                                                                        string("Verbose"),
                                                                    )]);
                                                                    let v7142: Result<
                                                                        string,
                                                                        string,
                                                                    > = match &v6779 {
                                                                        Spiral::US13::US13_0(
                                                                            v6779_0_0,
                                                                        ) => Ok::<string, string>(
                                                                            v6779_0_0.clone(),
                                                                        ),
                                                                        Spiral::US13::US13_1(
                                                                            v6779_1_0,
                                                                        ) => Err::<string, string>(
                                                                            v6779_1_0.clone(),
                                                                        ),
                                                                    };
                                                                    let patternInput_34:
                                                                                        (i32,
                                                                                         string) =
                                                                                    Spiral::method101(v7110.clone(),
                                                                                                      None::<CancellationToken>,
                                                                                                      v7113.clone(),
                                                                                                      None::<Func1<(i32,
                                                                                                                    string,
                                                                                                                    bool),
                                                                                                                   Arc<Async<()>>>>,
                                                                                                      None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                   ()>>,
                                                                                                      true,
                                                                                                      v7142.ok());
                                                                    let v7160: string =
                                                                        patternInput_34.1.clone();
                                                                    let v7159: i32 =
                                                                        patternInput_34.0.clone();
                                                                    let v7161: i32 =
                                                                        get_Count(v7113.clone());
                                                                    let v7162: Array<string> =
                                                                        new_init(
                                                                            &string(""),
                                                                            v7161,
                                                                        );
                                                                    let v7163: LrcPtr<
                                                                        Spiral::Mut5,
                                                                    > = LrcPtr::new(Spiral::Mut5 {
                                                                        l0: MutCell::new(0_i32),
                                                                    });
                                                                    while Spiral::method32(
                                                                        v7161,
                                                                        v7163.clone(),
                                                                    ) {
                                                                        let v7165: i32 =
                                                                            v7163.l0.get().clone();
                                                                        let patternInput_35: (
                                                                            string,
                                                                            string,
                                                                        ) = v7113[v7165].clone();
                                                                        let v7168: string = sprintf!(
                                                                            "$env:{}=\'\'{}\'\'",
                                                                            patternInput_35
                                                                                .0
                                                                                .clone(),
                                                                            patternInput_35
                                                                                .1
                                                                                .clone()
                                                                        );
                                                                        v7162.get_mut()
                                                                            [v7165 as usize] =
                                                                            v7168;
                                                                        {
                                                                            let v7169: i32 =
                                                                                (v7165) + 1_i32;
                                                                            v7163.l0.set(v7169);
                                                                            ()
                                                                        }
                                                                    }
                                                                    {
                                                                        let v7182: string = sprintf!(
                                                                            "pwsh -c \'{}; {}\'",
                                                                            join(
                                                                                string(";"),
                                                                                toArray_1(
                                                                                    ofArray_1(
                                                                                        v7162
                                                                                            .clone(
                                                                                            )
                                                                                    )
                                                                                )
                                                                            ),
                                                                            v7110
                                                                        );
                                                                        let patternInput_36: (
                                                                            Spiral::US5,
                                                                            Spiral::US5,
                                                                            Spiral::US5,
                                                                            Spiral::US5,
                                                                        ) = if (v7159) == 0_i32 {
                                                                            let result_4: LrcPtr<
                                                                                MutCell<
                                                                                    Spiral::US5,
                                                                                >,
                                                                            > = refCell(
                                                                                Spiral::US5::US5_1,
                                                                            );
                                                                            try_catch(||
                                                                                                          result_4.set(Spiral::closure72((),
                                                                                                                                         Spiral::closure127(v7160.clone(),
                                                                                                                                                            ()))),
                                                                                                      |ex_4:
                                                                                                           LrcPtr<Exception>|
                                                                                                          result_4.set(Spiral::closure128(v6939.clone(),
                                                                                                                                          v7160.clone(),
                                                                                                                                          v7182.clone(),
                                                                                                                                          ex_4.clone())));
                                                                            {
                                                                                let v7189:
                                                                                                        Spiral::US5 =
                                                                                                    result_4.get().clone();
                                                                                let v7203:
                                                                                                        Option<string> =
                                                                                                    match &v7189
                                                                                                        {
                                                                                                        Spiral::US5::US5_0(v7189_0_0)
                                                                                                        =>
                                                                                                        Some(match &v7189
                                                                                                                 {
                                                                                                                 Spiral::US5::US5_0(x)
                                                                                                                 =>
                                                                                                                 x.clone(),
                                                                                                                 _
                                                                                                                 =>
                                                                                                                 unreachable!(),
                                                                                                             }.clone()),
                                                                                                        _
                                                                                                        =>
                                                                                                        None::<string>,
                                                                                                    };
                                                                                (Spiral::US5::US5_0(string("py")),
                                                                                                 Spiral::US5::US5_0(v7107),
                                                                                                 Spiral::US5::US5_0(v6939.clone()),
                                                                                                 Spiral::US5::US5_0(v7203.unwrap()))
                                                                            }
                                                                        } else {
                                                                            let v7212: () = {
                                                                                Spiral::closure130(
                                                                                    v6939,
                                                                                    v7160,
                                                                                    v7159,
                                                                                    v7182,
                                                                                    (),
                                                                                );
                                                                                ()
                                                                            };
                                                                            (
                                                                                Spiral::US5::US5_0(
                                                                                    string("py"),
                                                                                ),
                                                                                Spiral::US5::US5_1,
                                                                                Spiral::US5::US5_1,
                                                                                Spiral::US5::US5_1,
                                                                            )
                                                                        };
                                                                        (
                                                                            patternInput_36
                                                                                .0
                                                                                .clone(),
                                                                            patternInput_36
                                                                                .1
                                                                                .clone(),
                                                                            patternInput_36
                                                                                .2
                                                                                .clone(),
                                                                            patternInput_36
                                                                                .3
                                                                                .clone(),
                                                                        )
                                                                    }
                                                                }
                                                            }
                                                        };
                                                        (
                                                            patternInput_37.0.clone(),
                                                            patternInput_37.1.clone(),
                                                            patternInput_37.2.clone(),
                                                            patternInput_37.3.clone(),
                                                        )
                                                    }
                                                } else {
                                                    let v7273: () = {
                                                        Spiral::closure131(v41, v40, ());
                                                        ()
                                                    };
                                                    (
                                                        Spiral::US5::US5_1,
                                                        Spiral::US5::US5_1,
                                                        Spiral::US5::US5_1,
                                                        Spiral::US5::US5_1,
                                                    )
                                                };
                                                (
                                                    patternInput_38.0.clone(),
                                                    patternInput_38.1.clone(),
                                                    patternInput_38.2.clone(),
                                                    patternInput_38.3.clone(),
                                                )
                                            };
                                            (
                                                patternInput_39.0.clone(),
                                                patternInput_39.1.clone(),
                                                patternInput_39.2.clone(),
                                                patternInput_39.3.clone(),
                                            )
                                        };
                                        let v7335: Spiral::US5 = patternInput_40.3.clone();
                                        let v7334: Spiral::US5 = patternInput_40.2.clone();
                                        let v7333: Spiral::US5 = patternInput_40.1.clone();
                                        let v7332: Spiral::US5 = patternInput_40.0.clone();
                                        new_array(&[
                                            (
                                                string("extension"),
                                                match &v7332 {
                                                    Spiral::US5::US5_0(v7332_0_0) => match &v7332 {
                                                        Spiral::US5::US5_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                    _ => string(""),
                                                },
                                            ),
                                            (
                                                string("code"),
                                                match &v7333 {
                                                    Spiral::US5::US5_0(v7333_0_0) => match &v7333 {
                                                        Spiral::US5::US5_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                    _ => string(""),
                                                },
                                            ),
                                            (
                                                string("code_path"),
                                                match &v7334 {
                                                    Spiral::US5::US5_0(v7334_0_0) => match &v7334 {
                                                        Spiral::US5::US5_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                    _ => string(""),
                                                },
                                            ),
                                            (
                                                string("output"),
                                                match &v7335 {
                                                    Spiral::US5::US5_0(v7335_0_0) => match &v7335 {
                                                        Spiral::US5::US5_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                    _ => string(""),
                                                },
                                            ),
                                        ])
                                    }
                                }
                            }
                        }
                    } else {
                        new_array(&[
                            (string("extension"), string("")),
                            (string("code"), string("")),
                            (string("code_path"), string("")),
                            (string("output"), string("")),
                        ])
                    };
                    let v7369: Vec<(string, string)> = v7367.to_vec();
                    let v7372: bool = true;
                    let _func1_from_v7370 = Func1::from(move |value| {
                        //;
                        let patternInput_41: (string, string) = value;
                        let v7382: &str = &*patternInput_41.0.clone();
                        let v7415: std::string::String = String::from(v7382);
                        let v7448: &str = &*patternInput_41.1.clone();
                        let v7481: std::string::String = String::from(v7448);
                        let v7514: bool = true;
                        LrcPtr::new((v7415, v7481)) /*;
                                                    let v7516: bool = */
                    }); //;
                    let v7518: Func1<
                        (string, string),
                        LrcPtr<(std::string::String, std::string::String)>,
                    > = _func1_from_v7370;
                    let v7521: Vec<LrcPtr<(std::string::String, std::string::String)>> = v7369
                        .into_iter()
                        .map(|x| {
                            Func1::new({
                                let v7518 = v7518.clone();
                                move |arg10_0040_31: (string, string)| {
                                    Spiral::closure76(v7518.clone(), arg10_0040_31)
                                }
                            })(x.clone())
                        })
                        .collect::<Vec<_>>();
                    let v7522: string =
                string("std::collections::BTreeMap::from_iter(v7521.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))");
                    let v7523: std::collections::BTreeMap<
                        std::string::String,
                        std::string::String,
                    > = std::collections::BTreeMap::from_iter(
                        v7521
                            .iter()
                            .map(|x| x.as_ref())
                            .map(|&(ref k, ref v)| (k.clone(), v.clone())),
                    );
                    let v7525: Result<std::string::String, serde_json::Error> =
                        serde_json::to_string(&v7523);
                    let v7526 = Spiral::method285();
                    let v7530: Result<std::string::String, string> = v7525.map_err(|x| v7526(x));
                    let v7543: bool = true;
                    let _result_map_ = v7530.map(|x| {
                        //;
                        let v7545: std::string::String = x;
                        let v7547: string = fable_library_rust::String_::fromString(v7545);
                        let v7549: bool = true;
                        v7547
                    });
                    let v7551: Result<string, string> = _result_map_;
                    let v7554: string = string("}");
                    let v7559: bool = true;
                    let _fix_closure_v7556 = v7551;
                    let v7566: string = append(
                        (append(
                            (append(
                                (append(string("true; _fix_closure_v7556 "), (v7554))),
                                string("); "),
                            )),
                            string(""),
                        )),
                        string(" // rust.fix_closure\'"),
                    );
                    let v7567: bool = true;
                    _fix_closure_v7556
                },
            ); // rust.fix_closure';
            let v7569 = __future_init;
            v7569
        }
        pub fn closure1(unitVar: (), v0_1: Array<string>) -> i32 {
            let v3: () = {
                Spiral::closure2((), ());
                ()
            };
            let v28: LrcPtr<Spiral::Mut4> =
                (Spiral::TraceState::trace_state().get().clone().unwrap())
                    .4
                    .clone();
            let v44: () = {
                Spiral::closure5(v0_1, ());
                ()
            };
            let v90: clap::Command = Spiral::method0();
            let v92: clap::ArgMatches = clap::Command::get_matches(v90);
            let v94: std::pin::Pin<Box<dyn std::future::Future<Output = Result<string, string>>>> =
                Spiral::method20(v28.l0.get().clone(), v92);
            let v96: Result<string, string> = futures::executor::block_on(v94);
            let v100: string = v96.unwrap();
            if if let Spiral::US0::US0_2 = &v28.l0.get().clone() {
                true
            } else {
                false
            } {
                let v116: () = {
                    Spiral::closure10(v100, ());
                    ()
                };
                ()
            }
            0_i32
        }
        pub fn v0() -> Func0<()> {
            static v0: OnceInit<Func0<()>> = OnceInit::new();
            v0.get_or_init(|| Func0::new(move || Spiral::closure0((), ())))
                .clone()
        }
        pub fn tests() {
            (Spiral::v0())();
        }
        pub fn v1() -> Func1<Array<string>, i32> {
            static v1: OnceInit<Func1<Array<string>, i32>> = OnceInit::new();
            v1.get_or_init(|| Func1::new(move |v: Array<string>| Spiral::closure1((), v)))
                .clone()
        }
        pub fn main(args: Array<string>) -> i32 {
            (Spiral::v1())(args)
        }
    }
}
pub use module_6ff740fe::*;
#[path = "../../lib/spiral/async_.rs"]
mod module_2335f2f5;
pub use module_2335f2f5::*;
#[path = "../../lib/spiral/common.rs"]
mod module_652e6d81;
pub use module_652e6d81::*;
#[path = "../../lib/spiral/crypto.rs"]
mod module_dd5f95ef;
pub use module_dd5f95ef::*;
#[path = "../../lib/spiral/date_time.rs"]
mod module_ca5e6cb2;
pub use module_ca5e6cb2::*;
#[path = "../../lib/spiral/file_system.rs"]
mod module_5ab1faf0;
pub use module_5ab1faf0::*;
#[path = "../../lib/spiral/lib.rs"]
mod module_b386774b;
pub use module_b386774b::*;
#[path = "../../lib/spiral/networking.rs"]
mod module_ce497f72;
pub use module_ce497f72::*;
#[path = "../../lib/spiral/platform.rs"]
mod module_9a61edd3;
pub use module_9a61edd3::*;
#[path = "../../lib/spiral/runtime.rs"]
mod module_502d7e30;
pub use module_502d7e30::*;
#[path = "../../lib/spiral/sm.rs"]
mod module_34f67952;
pub use module_34f67952::*;
#[path = "../../lib/spiral/threading.rs"]
mod module_11c0c5c2;
pub use module_11c0c5c2::*;
#[path = "../../lib/spiral/trace.rs"]
mod module_28ecba0d;
pub use module_28ecba0d::*;
#[path = "../../deps/polyglot/lib/fsharp/Common.rs"]
mod module_ad43931;
pub use module_ad43931::*;
pub mod Polyglot {
    pub use crate::module_ad43931::Polyglot::*;
}
pub fn main() {
    let args = std::env::args().skip(1).map(fromString).collect();
    Spiral::main(array_from(args));
}
