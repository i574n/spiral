#!meta

{"kernelInfo":{"defaultKernelName":"spiral","items":[{"name":"spiral"}]}}

#!markdown

# console

#!spiral

//// test

open testing

#!markdown

## fsharp

#!markdown

### console_color

#!spiral

nominal console_color = $'System.ConsoleColor'

#!markdown

### reset_color

#!spiral

inl reset_color () : () =
    run_target function
        | Fsharp => fun () => $'System.Console.ResetColor ()'
        | _ => fun () => ()

#!markdown

### set_foreground_color

#!spiral

inl set_foreground_color (color : console_color) : () =
    run_target function
        | Fsharp => fun () => $'System.Console.ForegroundColor <- !color '
        | _ => fun () => ()

#!markdown

## console

#!markdown

### write_line

#!spiral

inl write_line obj : () =
    backend_switch {
        Gleam = fun () =>
            backend_switch {
                Gleam = fun () =>
                    backend_switch {
                        Gleam = fun () =>
                            global "import gleam/io"
                    }
                    : ()
            }
            $'io.println(!obj)' : ()
        Fsharp = fun () =>
            fun () => obj |> $'System.Console.WriteLine'
            |> exec_unit
        Python = fun () => $'print(!obj)' : ()
    }

#!markdown

### write

#!spiral

inl write forall t. (x : t) : () =
    backend_switch {
        Python = fun () => $'print(!x, end="")' : ()
        Fsharp = fun () => $'!x |> System.Console.Write' : ()
    }

#!markdown

### write_ln

#!spiral

inl write_ln l : () =
    write l
    backend_switch {
        Cuda = fun () => $'printf("\\n")' : ()
        Python = fun () => $"print()" : ()
        Fsharp = fun () => write_line () : ()
    }

#!markdown

### color_reset

#!spiral

inl color_reset () =
    run_target function
        | Gleam _ => fun () => $'"\\u{001b}[0m"'
        | Rust _ => fun () =>
            open rust
            open rust.rust_operators
            inl color_reset : rust.ref sm'.str = !\($'"inline_colorization::color_reset"')
            color_reset
            |> sm'.ref_to_std_string
            |> sm'.from_std_string
        | _ => fun () => $'"\\u001b[0m"'

#!markdown

### color_bright_black

#!spiral

inl color_bright_black () =
    run_target function
        | Gleam _ => fun () => $'"\\u{001b}[90m"'
        | Rust _ => fun () =>
            open rust
            open rust.rust_operators
            inl color_reset : rust.ref sm'.str = !\($'"inline_colorization::color_bright_black"')
            color_reset
            |> sm'.ref_to_std_string
            |> sm'.from_std_string
        | _ => fun () => $'"\\u001b[90m"'

#!markdown

### color_bright_red

#!spiral

inl color_bright_red () =
    run_target function
        | Gleam _ => fun () => $'"\\u{001b}[91m"'
        | Rust _ => fun () =>
            open rust
            open rust.rust_operators
            inl color_reset : rust.ref sm'.str = !\($'"inline_colorization::color_bright_red"')
            color_reset
            |> sm'.ref_to_std_string
            |> sm'.from_std_string
        | _ => fun () => $'"\\u001b[91m"'

#!markdown

### color_bright_green

#!spiral

inl color_bright_green () =
    run_target function
        | Gleam _ => fun () => $'"\\u{001b}[92m"'
        | Rust _ => fun () =>
            open rust
            open rust.rust_operators
            inl color_reset : rust.ref sm'.str = !\($'"inline_colorization::color_bright_green"')
            color_reset
            |> sm'.ref_to_std_string
            |> sm'.from_std_string
        | _ => fun () => $'"\\u001b[92m"'

#!markdown

### color_yellow

#!spiral

inl color_yellow () =
    run_target function
        | Gleam _ => fun () => $'"\\u{001b}[93m"'
        | Rust _ => fun () =>
            open rust
            open rust.rust_operators
            inl color_reset : rust.ref sm'.str = !\($'"inline_colorization::color_yellow"')
            color_reset
            |> sm'.ref_to_std_string
            |> sm'.from_std_string
        | _ => fun () => $'"\\u001b[93m"'

#!markdown

### color_bright_blue

#!spiral

inl color_bright_blue () =
    run_target function
        | Gleam _ => fun () => $'"\\u{001b}[94m"'
        | Rust _ => fun () =>
            open rust
            open rust.rust_operators
            inl color_reset : rust.ref sm'.str = !\($'"inline_colorization::color_bright_blue"')
            color_reset
            |> sm'.ref_to_std_string
            |> sm'.from_std_string
        | _ => fun () => $'"\\u001b[94m"'

#!markdown

### color_bright_magenta

#!spiral

inl color_bright_magenta () =
    run_target function
        | Gleam _ => fun () => $'"\\u{001b}[95m"'
        | Rust _ => fun () =>
            open rust
            open rust.rust_operators
            inl color_reset : rust.ref sm'.str = !\($'"inline_colorization::color_bright_magenta"')
            color_reset
            |> sm'.ref_to_std_string
            |> sm'.from_std_string
        | _ => fun () => $'"\\u001b[95m"'

#!markdown

### color_bright_cyan

#!spiral

inl color_bright_cyan () =
    run_target function
        | Gleam _ => fun () => $'"\\u{001b}[96m"'
        | Rust _ => fun () =>
            open rust
            open rust.rust_operators
            inl color_reset : rust.ref sm'.str = !\($'"inline_colorization::color_bright_cyan"')
            color_reset
            |> sm'.ref_to_std_string
            |> sm'.from_std_string
        | _ => fun () => $'"\\u001b[96m"'

#!markdown

### color_bright_white

#!spiral

inl color_bright_white () =
    run_target function
        | Gleam _ => fun () => $'"\\u{001b}[97m"'
        | Rust _ => fun () =>
            open rust
            open rust.rust_operators
            inl color_reset : rust.ref sm'.str = !\($'"inline_colorization::color_bright_white"')
            color_reset
            |> sm'.ref_to_std_string
            |> sm'.from_std_string
        | _ => fun () => $'"\\u001b[97m"'
