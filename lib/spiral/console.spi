/// # console

/// ## fsharp

/// ### console_color
nominal console_color = $'System.ConsoleColor'

/// ### reset_color
inl reset_color () : () =
    run_target function
        | Fsharp => fun () => $'System.Console.ResetColor ()'
        | _ => fun () => ()

/// ### set_foreground_color
inl set_foreground_color (color : console_color) : () =
    run_target function
        | Fsharp => fun () => $'System.Console.ForegroundColor <- !color '
        | _ => fun () => ()

/// ## console

/// ### write_line
inl write_line obj : () =
    backend_switch {
        Gleam = fun () =>
            backend_switch {
                Gleam = fun () =>
                    backend_switch {
                        Gleam = fun () =>
                            global "import gleam/io"
                    }
                    : ()
            }
            $'io.println(!obj)' : ()
        Fsharp = fun () =>
            fun () => obj |> $'System.Console.WriteLine'
            |> exec_unit
        Python = fun () => $'print(!obj)' : ()
    }

/// ### write
inl write forall t. (x : t) : () =
    backend_switch {
        Python = fun () => $'print(!x, end="")' : ()
        Fsharp = fun () => $'!x |> System.Console.Write' : ()
    }

/// ### write_ln
inl write_ln l : () =
    write l
    backend_switch {
        Cuda = fun () => $'printf("\\n")' : ()
        Python = fun () => $"print()" : ()
        Fsharp = fun () => write_line () : ()
    }

/// ### color_reset
inl color_reset () =
    run_target function
        | Gleam _ => fun () => $'"\\u{001b}[0m"'
        | Rust _ => fun () =>
            open rust
            open rust.rust_operators
            inl color_reset : rust.ref sm'.str = !\($'"inline_colorization::color_reset"')
            color_reset
            |> sm'.ref_to_std_string
            |> sm'.from_std_string
        | _ => fun () => $'"\\u001b[0m"'

/// ### color_bright_black
inl color_bright_black () =
    run_target function
        | Gleam _ => fun () => $'"\\u{001b}[90m"'
        | Rust _ => fun () =>
            open rust
            open rust.rust_operators
            inl color_reset : rust.ref sm'.str = !\($'"inline_colorization::color_bright_black"')
            color_reset
            |> sm'.ref_to_std_string
            |> sm'.from_std_string
        | _ => fun () => $'"\\u001b[90m"'

/// ### color_bright_red
inl color_bright_red () =
    run_target function
        | Gleam _ => fun () => $'"\\u{001b}[91m"'
        | Rust _ => fun () =>
            open rust
            open rust.rust_operators
            inl color_reset : rust.ref sm'.str = !\($'"inline_colorization::color_bright_red"')
            color_reset
            |> sm'.ref_to_std_string
            |> sm'.from_std_string
        | _ => fun () => $'"\\u001b[91m"'

/// ### color_bright_green
inl color_bright_green () =
    run_target function
        | Gleam _ => fun () => $'"\\u{001b}[92m"'
        | Rust _ => fun () =>
            open rust
            open rust.rust_operators
            inl color_reset : rust.ref sm'.str = !\($'"inline_colorization::color_bright_green"')
            color_reset
            |> sm'.ref_to_std_string
            |> sm'.from_std_string
        | _ => fun () => $'"\\u001b[92m"'

/// ### color_yellow
inl color_yellow () =
    run_target function
        | Gleam _ => fun () => $'"\\u{001b}[93m"'
        | Rust _ => fun () =>
            open rust
            open rust.rust_operators
            inl color_reset : rust.ref sm'.str = !\($'"inline_colorization::color_yellow"')
            color_reset
            |> sm'.ref_to_std_string
            |> sm'.from_std_string
        | _ => fun () => $'"\\u001b[93m"'

/// ### color_bright_blue
inl color_bright_blue () =
    run_target function
        | Gleam _ => fun () => $'"\\u{001b}[94m"'
        | Rust _ => fun () =>
            open rust
            open rust.rust_operators
            inl color_reset : rust.ref sm'.str = !\($'"inline_colorization::color_bright_blue"')
            color_reset
            |> sm'.ref_to_std_string
            |> sm'.from_std_string
        | _ => fun () => $'"\\u001b[94m"'

/// ### color_bright_magenta
inl color_bright_magenta () =
    run_target function
        | Gleam _ => fun () => $'"\\u{001b}[95m"'
        | Rust _ => fun () =>
            open rust
            open rust.rust_operators
            inl color_reset : rust.ref sm'.str = !\($'"inline_colorization::color_bright_magenta"')
            color_reset
            |> sm'.ref_to_std_string
            |> sm'.from_std_string
        | _ => fun () => $'"\\u001b[95m"'

/// ### color_bright_cyan
inl color_bright_cyan () =
    run_target function
        | Gleam _ => fun () => $'"\\u{001b}[96m"'
        | Rust _ => fun () =>
            open rust
            open rust.rust_operators
            inl color_reset : rust.ref sm'.str = !\($'"inline_colorization::color_bright_cyan"')
            color_reset
            |> sm'.ref_to_std_string
            |> sm'.from_std_string
        | _ => fun () => $'"\\u001b[96m"'

/// ### color_bright_white
inl color_bright_white () =
    run_target function
        | Gleam _ => fun () => $'"\\u{001b}[97m"'
        | Rust _ => fun () =>
            open rust
            open rust.rust_operators
            inl color_reset : rust.ref sm'.str = !\($'"inline_colorization::color_bright_white"')
            color_reset
            |> sm'.ref_to_std_string
            |> sm'.from_std_string
        | _ => fun () => $'"\\u001b[97m"'
