/// # networking
open rust.rust_operators

/// ## rust

/// ### reqwest_response
nominal reqwest_response =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"reqwest_wasm::Response\")>]\n#endif\ntype reqwest_Response = class end"
        $'' : $'reqwest_Response'
    )

/// ### reqwest_error
nominal reqwest_error =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"reqwest_wasm::Error\")>]\n#endif\ntype reqwest_Error = class end"
        $'' : $'reqwest_Error'
    )

/// ### request_builder
nominal request_builder =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"reqwest_wasm::RequestBuilder\")>]\n#endif\ntype reqwest_RequestBuilder = class end"
        $'' : $'reqwest_RequestBuilder'
    )

/// ### request_type
union request_type =
    | Get
    | Post

/// ### request
type request =
    {
        url : string
        request_type : request_type
        body : string
        json : bool
        auto_refresh : bool
    }

/// ### new_request_get
inl new_request_get (url : string) : request_builder =
    inl url = join url
    inl url = url |> sm'.to_std_string
    inl url = join url
    !\($'"reqwest_wasm::Client::builder().build().map_err(|err| err.to_string())?.get(!url)"')

/// ### new_request_post
inl new_request_post (url : string) : request_builder =
    inl url = join url
    inl url = url |> sm'.to_std_string
    inl url = join url
    !\($'"reqwest_wasm::Client::builder().build().map_err(|err| err.to_string())?.post(!url)"')

/// ### request_send
inl request_send (request : request_builder) : async.future_pin (resultm.result' reqwest_response reqwest_error) =
    inl request = join request
    !\($'"Box::pin(reqwest_wasm::RequestBuilder::send(!request))"')

/// ### request_body
inl request_body (body : string) (request : request_builder) : request_builder =
    inl body = body |> sm'.to_std_string
    !\\(body, $'"reqwest_wasm::RequestBuilder::body(!request, $0)"')

/// ### request_header
inl request_header (key : string) (value : string) (request : request_builder) : request_builder =
    inl request = join request
    inl key = key |> sm'.to_std_string
    inl value = value |> sm'.to_std_string
    !\\((key, value), $'"reqwest_wasm::RequestBuilder::header(!request, $0, $1)"')

/// ### request_json
inl request_json forall t. (obj : t) (request : request_builder) : request_builder =
    !\($'"reqwest_wasm::RequestBuilder::json(!request, &!obj)"')

/// ### response_text
inl response_text (response : reqwest_response) : async.future_pin (resultm.result' sm'.std_string reqwest_error) =
    !\($'"Box::pin(reqwest_wasm::Response::text(!response))"')

/// ## fsharp

/// ### tcp_client
nominal tcp_client =
    `(
        backend_switch `(()) `({}) {
            Fsharp = (fun () =>
                global "#if FABLE_COMPILER\n\ntype System_Net_Sockets_TcpClient = System.IDisposable\n\#else\ntype System_Net_Sockets_TcpClient = System.Net.Sockets.TcpClient\n#endif\n"
                        ) : () -> ()
        }
        $'' : $'System_Net_Sockets_TcpClient'
    )

/// ### new_tcp_client
inl new_tcp_client () : tcp_client =
    run_target function
        | Fsharp (Native) => fun () => $'new `tcp_client ()'
        | _ => fun () => null ()

/// ### ip_address
nominal ip_address = $'System.Net.IPAddress'

/// ### ip_address_parse
inl ip_address_parse (s : string) : ip_address =
    s |> $'`ip_address.Parse'

/// ### tcp_listener
nominal tcp_listener = $'System.Net.Sockets.TcpListener'

/// ### new_tcp_listener
inl new_tcp_listener (ip_address : ip_address) (port : i32) : tcp_listener =
    $'new `tcp_listener (!ip_address, !port)'

/// ### listener_start
inl listener_start (listener : tcp_listener) : () =
    listener |> $'_.Start()'

/// ### listener_stop
inl listener_stop (listener : tcp_listener) : () =
    listener |> $'_.Stop()'

/// ### client_connect_async
inl client_connect_async
    (host : string)
    (port : i32)
    (ct : threading.cancellation_token)
    (client : tcp_client)
    : async.value_task
    =
    run_target function
        | Fsharp (Native) => fun () => $'!client.ConnectAsync (!host, !port, !ct)'
        | _ => fun () => null ()

/// ## main
inl main () =
    init_trace_state None
