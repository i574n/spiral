#!meta

{"kernelInfo":{"defaultKernelName":"spiral","items":[{"name":"spiral"}]}}

#!markdown

# parsing

#!spiral

open sm'_operators

#!spiral

//// test

open testing

#!markdown

## fparsec

#!spiral

//// test

#r @"../../../../../../../.nuget/packages/fparsec/2.0.0-beta2/lib/netstandard2.1/FParsec.dll"
#r @"../../../../../../../.nuget/packages/fparsec/2.0.0-beta2/lib/netstandard2.1/FParsecCS.dll"

///! _

()

#!spiral

//// test

nominal position_ = $'FParsec.Position'
nominal parser_error_ = $'FParsec.Error.ParserError'

nominal reply_ t = $'FParsec.Reply<`t>'

nominal char_stream_ t = $'FParsec.CharStream<`t>'

// nominal parser t u = char_stream u -> reply t
nominal parser_ t u = $'FParsec.Primitives.Parser<`t, `u>'

inl p_char_ forall t. (x : char) : parser_ char t =
    x |> $'FParsec.CharParsers.pchar'

inl p_string_ forall t. (x : string) : parser_ string t =
    x |> $'FParsec.CharParsers.pstring'

inl (>>.$) forall t u v. (a : parser_ t v) (b : parser_ u v) : parser_ u v =
    b |> $'FParsec.Primitives.(>>.)' a

inl (.>>$) forall t u v. (a : parser_ t v) (b : parser_ u v) : parser_ t v =
    b |> $'FParsec.Primitives.(.>>)' a

inl (.>>.$) forall t u v. (a : parser_ t v) (b : parser_ u v) : parser_ (pair t u) v =
    b |> $'FParsec.Primitives.(.>>.)' a

inl (>>%$) forall t u v. (a : parser_ t v) (b : u) : parser_ u v =
    b |> $'FParsec.Primitives.(>>%)' a

inl (>>=$) forall t u v. (a : parser_ t v) (b : t -> parser_ u v) : parser_ u v =
    b |> $'FParsec.Primitives.(>>=)' a

inl (|>>$) forall t u v. (a : parser_ t v) (b : t -> u) : parser_ u v =
    inl b = fun x => x |> b
    b |> $'FParsec.Primitives.(|>>)' a

inl any_char_ () : parser_ char _ =
    $'FParsec.CharParsers.anyChar'

inl any_string_ () : parser_ string _ =
    $'FParsec.CharParsers.anyString'

inl any_string__ (n : int) : parser_ string _ =
    n |> $'FParsec.CharParsers.anyString'

inl eof_ () : parser_ () _ =
    $'FParsec.CharParsers.eof'

inl spaces_ () : parser_ () () =
    $'FParsec.CharParsers.spaces'

inl spaces1_ () : parser_ () () =
    $'FParsec.CharParsers.spaces1'

inl (<|>$) forall t u. (a : parser_ t u) (b : parser_ t u) : parser_ t u =
    b |> $'FParsec.Primitives.(<|>)' a

inl many_satisfy_ forall t. (x : char -> bool) : parser_ string t =
    x |> $'FParsec.CharParsers.manySatisfy'

inl satisfy_ forall t. (x : char -> bool) : parser_ char t =
    x |> $'FParsec.CharParsers.satisfy'

inl none_of_ (x : list char) : parser_ char () =
    x
    |> listm'.box
    |> listm'.to_array'
    |> $'FParsec.CharParsers.noneOf'

inl any_of_ (x : list char) : parser_ char () =
    x
    |> listm'.box
    |> listm'.to_array'
    |> $'FParsec.CharParsers.anyOf'

inl skip_any_of_ (x : list char) : parser_ () () =
    x
    |> listm'.box
    |> listm'.to_array'
    |> $'FParsec.CharParsers.skipAnyOf'

inl between_ forall t u v x. (a : parser_ t x) (b : parser_ u x) (c : parser_ v x) : parser_ v x =
    c |> $'FParsec.Primitives.between' a b

inl many_chars_ forall t. (x : parser_ char t) : parser_ string t =
    x |> $'FParsec.CharParsers.manyChars'

inl many1_chars_ forall t. (x : parser_ char t) : parser_ string t =
    x |> $'FParsec.CharParsers.many1Chars'

inl many_strings_ forall t. (x : parser_ string t) : parser_ string t =
    x |> $'FParsec.CharParsers.manyStrings'

inl skip_any_string_ forall t. (n : int) : parser_ () t =
    n |> $'FParsec.CharParsers.skipAnyString'

inl many1_strings_ forall t. (x : parser_ string t) : parser_ string t =
    x |> $'FParsec.CharParsers.many1Strings'

inl opt_ forall t u. (a : parser_ t u) : parser_ (optionm'.option' t) u =
    a |> $'FParsec.Primitives.opt'

inl choice_ forall t u. (a : list (parser_ t u)) : parser_ t u =
    a
    |> listm'.box
    |> seq.of_list'
    |> $'FParsec.Primitives.choice'

inl delay_ forall t u. (fn : () -> parser_ t u) : parser_ t u =
    fn |> $'FParsec.Primitives.parse.Delay'

inl peek_ forall t u. (a : parser_ t u) : parser_ char u =
    $'!a.Peek ()'

inl not_followed_by_ forall t u. (a : parser_ t u) : parser_ () u =
    a |> $'FParsec.Primitives.notFollowedBy'

inl sep_by_ forall t u v. (a : parser_ t v) (b : parser_ u v) : parser_ (listm'.list' t) v =
    b |> $'FParsec.Primitives.sepBy' a

inl sep_by1_ forall t u v. (a : parser_ t v) (b : parser_ u v) : parser_ (listm'.list' t) v =
    b |> $'FParsec.Primitives.sepBy1' a

inl sep_end_by_ forall t u v. (a : parser_ t v) (b : parser_ u v) : parser_ (listm'.list' t) v =
    b |> $'FParsec.Primitives.sepEndBy' a

inl many_ forall t u. (a : parser_ t u) : parser_ (listm'.list' t) u =
    a |> $'FParsec.Primitives.many'

inl many1_ forall t u. (a : parser_ t u) : parser_ (listm'.list' t) u =
    a |> $'FParsec.Primitives.many1'

inl many1_satisfy_ forall t. (x : char -> bool) : parser_ string t =
    x |> $'FParsec.CharParsers.many1Satisfy'

nominal parser_result'_ t u = $'FParsec.CharParsers.ParserResult<`t, `u>'

inl run_ forall t. (parser : parser_ t ()) (x : string) : parser_result'_ t () =
    x |> $'FParsec.CharParsers.run' parser

union parser_result_ t u =
    | Success : t * u * position_
    | Failure : string * parser_error_ * u

inl parser_result_ forall t u. = function
    | Success (a, b, c) => $'`(parser_result'_ t u).Success (!a, !b, !c)' : parser_result'_ t u
    | Failure (a, b, c) => $'`(parser_result'_ t u).Failure (!a, !b, !c)' : parser_result'_ t u

inl parser_result'_ forall t u. (x : parser_result'_ t u) : parser_result_ t u =
    $'let mutable _!x = None '
    $'match !x with'
    $'| FParsec.CharParsers.Success (a, b, c) -> (' : ()
    $'(fun () ->'
    $'(fun () ->'
    (Success ((dyn $'a'), dyn $'b', dyn $'c') : _ t u) |> emit_unit
    $')'
    $'|> fun x -> x ()'
    $') () ) | FParsec.CharParsers.Failure (a, b, c) -> (' : ()
    $'(fun () ->'
    $'(fun () ->'
    (Failure ((dyn $'a'), dyn $'b', dyn $'c') : _ t u) |> emit_unit
    $')'
    $'|> fun x -> x ()'
    $') () )' : ()
    $'|> fun x -> _!x <- Some x'
    $'match _!x with Some x -> x | None -> failwith "??? / _!x=None"'

inl parse_ parser input : result _ _ =
    match input |> run_ parser |> parser_result'_ with
    | Success (result, b, c) => Ok (result, c)
    | Failure (error_msg, b, c) => Error (error_msg, b)

#!spiral

//// test

inl split_args (args : string) : result (array_base (string * position_)) (string * parser_error_) =
    inl esc = [ '\\'; '`' ]
    inl quotes = [ '"' ]
    inl special = esc ++ quotes
    inl p_esc_char c =
        p_char_ c >>.$ any_char_ () |>>$ fun c' => $'$"{!c}{!c'}"'
    inl p_word = special |> none_of_ |>>$ sm'.obj_to_string
    inl p_plain = special ++ [ ' ' ] |> none_of_ |> many1_chars_
    inl p_text = p_word |> many1_strings_
    inl p_esc = esc |> listm.map p_esc_char |> choice_
    inl p_quoted = (p_word <|>$ p_esc) |> many_ |>>$ (seq.of_list' >> sm'.concat "")
    inl p_quoted_all = p_quoted |> between_ (p_char_ '"') (p_char_ '"')
    inl p_esc_root = p_esc |>>$ (fun _ => "") >>.$ (p_word |> many_) |>>$ (seq.of_list' >> sm'.concat "")
    inl p_content = p_plain <|>$ p_quoted_all <|>$ p_esc_root
    inl p_args = spaces1_ () |> sep_by_ p_content
    args
    |> parse_ p_args
    |> resultm.map fun (a', b') =>
        (
            (
                a'
                |> listm'.to_array'
                |> a
                |> am.map fun x => x, b'
                |> fun (a x : _ int _) => x
            )
        )

[
    "a b c",
    ;[ "a"; "b"; "c" ]

    "e f \"g h\" i",
    ;[ "e"; "f"; "g h"; "i" ]

    "\"j k\" \"l\" \"m\"",
    ;[ "j k"; "l"; "m" ]

    "s -t \"u \`\"v\`\" w\"",
    ;[ "s"; "-t"; "u \`\"v\`\" w" ]

    "n -o \"p \\\"q\\\" r\"",
    ;[ "n"; "-o"; "p \\\"q\\\" r" ]

    "r -s \"t \\\"u\\\"\"",
    ;[ "r"; "-s"; "t \\\"u\\\"" ]

    $'$"x -y \\\"$z -a \'(b=\\\\\\"c-id=)[a-fA-F0-9]{{8}}\', {{ \`$_[1] + \`$d++ }}\\\""',
    ;[ "x"; "-y"; "$z -a '(b=\\\"c-id=)[a-fA-F0-9]{8}', { `$_[1] + `$d++ }" ]

    "e -f \"$g -h '(i=`\"j-id=)[a-fA-F0-9]{8}', { `$_[1] + `$k++ }\"",
    ;[ "e"; "-f"; "$g -h '(i=`\"j-id=)[a-fA-F0-9]{8}', { `$_[1] + `$k++ }" ]

    $'$"--l \\\\\\"\'\'\' m \'\'\'\\\\\\" "',
    ;[ "--l"; "''' m '''" ]

    $'$"n --o --p q --r \\\"s:/t u/v.w\\\" --x \\\"y:/z.a\\\" --b c.d \\\"\\\\e{{f-g}}\\\" h.i \\\"j (k)\\\""',
    ;[ "n"; "--o"; "--p"; "q"; "--r"; "s:/t u/v.w"; "--x"; "y:/z.a"; "--b"; "c.d"; "\\e{f-g}"; "h.i"; "j (k)" ]

    $'\@$"l ""m n:\\o.p"""',
    ;[ "l"; "m n:\\o.p" ]
]
|> listm.rev
|> listm.map fun input, expected =>
    input
    |> split_args
    |> fun x =>
        try
            fun () =>
                ($'$"\ninput: {!input}"' : string)
                |> console.write_line
                x
                |> resultm.get
                |> am'.map_base fst
                |> _assert_eq' expected
                false
            fun ex =>
                ($'$"error / expected: %A{!expected} / ex: %A{!ex}"' : string)
                |> console.write_line
                Some true
        |> optionm.value
|> listm'.filter id
|> function
    | [] => ()
    | x => failwith $'$"{!x}"'

#!markdown

## parsing

#!markdown

### position

#!markdown

### range

#!spiral

type range =
    {
        from : int
        to : int
    }

#!spiral

type position =
    {
        line : int
        col : int
    }

#!markdown

### parser_state

#!spiral

nominal parser_state =
    {
        line_text : sm'.string_builder
        position : position
    }

#!markdown

### new_parser_state

#!spiral

inl new_parser_state line_text (line : i32) (col : i32) =
    { line_text = line_text |> sm'.string_builder; position = { line col } }

#!markdown

### new_parser_state'

#!spiral

inl new_parser_state' () =
    new_parser_state "" 1 1 |> parser_state

#!markdown

### parser

#!spiral

type parser t = string * int * parser_state -> result (t * int * parser_state) string

#!markdown

### parse

#!spiral

inl parse forall t.
    (p : parser t)
    (input : string)
    (s : parser_state)
    : result (t * string * parser_state) string
    =
    p (input, 0, s)
    |> resultm.map fun result, i, s' =>
        result,
        input |> sm'.range (am'.Start i) (am'.End eval),
        s'

#!markdown

### inc

#!spiral

inl inc (parser_state s) = function
    | '\n' => { line = s.position.line + 1; col = 1 }
    | _ => { s.position with col = s.position.col + 1 }.position

#!markdown

### update_char

#!spiral

inl update_char (parser_state s as s') (c : char) : parser_state =
    { s with
        position =
            match c with
            | '\n' => { line = s.position.line + 1; col = 1 }
            | _ => { s.position with col = s.position.col + 1 }.position
        line_text =
            match c with
            | '\n' => s.line_text |> sm'.builder_clear
            | _ => s.line_text |> sm'.builder_append $c
    } |> parser_state

#!markdown

### update

#!spiral

inl update result s =
    (s, result |> sm'.to_char_list)
    ||> listm.fold update_char

#!markdown

### run_parser

#!spiral

inl run_parser parser input =
    input
    |> parse parser
    |> fun parser => parser (new_parser_state' ())

#!markdown

### any_char

#!spiral

inl any_char () : parser char = fun input, i, s =>
    if i >= (input |> sm'.length)
    then "parsing.any_char / unexpected end of input / " ++# ({ s } |> sm'.format) |> Error
    else
        inl c = input |> sm'.index i
        Ok (c, i + 1, c |> update_char s)

#!spiral

//// test
///! gleam
///! fsharp
///! cuda
///! typescript

"abc"
|> run_parser (any_char ())
|> resultm.get
|> sm'.format_debug
|> _assert_eq $$('a', "bc", new_parser_state "a" 1 2)

#!spiral

//// test

"abc"
|> parse_ (any_char_ ())
|> resultm.get
|> sm'.format_debug
|> _assert_eq' $$('a', ($'FParsec.Position (null, 0, 1, 2)' : position_))

#!markdown

### p_char

#!spiral

inl p_char (c : char) : parser char =
    fun input, i, (parser_state ({ line_text position = { line col } } as s) as s') =>
        if i >= (input |> sm'.length)
        then "parsing.p_char / unexpected end of input / " ++# ({ c s } |> sm'.format) |> Error
        else
            inl got = input |> sm'.index i
            if got = c
            then Ok (got, i + 1, got |> update_char s')
            else
                inl total_len = input |> sm'.length
                inl end =
                    match input |> sm'.index_of_char_from i '\n' with
                    | -1 => total_len
                    | j  => (if j >= i then j else i + j) |> min total_len
                inl rest = input |> sm'.range (am'.Start i) (am'.End fun _ => end)
                inl pointer_line = (" " |> sm'.replicate (col - 1)) ++# "^"
                "parsing.p_char / "
                ++# ({ expected = c; line col } |> sm'.format)
                ++# "\n" ++# $line_text ++# rest
                ++# "\n" ++# pointer_line ++# "\n"
                |> Error

#!spiral

//// test
///! gleam
///! fsharp
///! cuda
///! typescript

"abc"
|> run_parser (p_char 'a')
|> resultm.get
|> sm'.format_debug
|> _assert_eq $$('a', "bc", new_parser_state "a" 1 2)

#!spiral

//// test

"abc"
|> parse_ (p_char_ 'a')
|> resultm.get
|> sm'.format_debug
|> _assert_eq' $$('a', ($'FParsec.Position (null, 0, 1, 2)' : position_))

#!markdown

### any_string

#!spiral

inl any_string length : parser string = fun input, i, s =>
    if (input |> sm'.length) - i < length
    then "parsing.any_string / unexpected end of input / " ++# ({ s } |> sm'.format) |> Error
    else
        inl result = input |> sm'.range (am'.Start i) (am'.End fun _ => i + length)
        Ok (
            result,
            i + length,
            s |> update result
        )

#!spiral

//// test
////! gleam // { actual = #("ab", "def", "ab", 1, 3); expected = #("abc", "def", "abc", 1, 4) }
///! fsharp
///! cuda
///! typescript

"abcdef"
|> run_parser (any_string 3)
|> resultm.get
|> sm'.format_debug
|> _assert_eq $$("abc", "def", new_parser_state "abc" 1 4)

#!spiral

//// test

"abcdef"
|> parse_ (any_string__ 3)
|> resultm.get
|> sm'.obj_to_string
|> _assert_eq' (("abc", ($'FParsec.Position (null, 0, 1, 4)' : position_)) |> sm'.obj_to_string)

#!markdown

### skip_any_string

#!spiral

inl skip_any_string length : parser () = fun input, i, s =>
    if (input |> sm'.length) - i < length
    then "parsing.skip_any_string / unexpected end of input / " ++# ({ s } |> sm'.format) |> Error
    else
        Ok (
            (),
            i + length,
            s |> update (input |> sm'.range (am'.Start i) (am'.End fun _ => i + length))
        )

#!spiral

//// test
////! gleam // { actual = #("def", "ab", 1, 3); expected = #("def", "abc", 1, 4) }
///! fsharp
///! cuda
///! typescript

"abcdef"
|> run_parser (skip_any_string 3)
|> resultm.get
|> sm'.format_debug
|> _assert_eq $$((), "def", new_parser_state "abc" 1 4)

#!markdown

### (>>.)

#!spiral

inl (>>.) forall t u. (a : parser t) (b : parser u) : parser u = fun input, i, s =>
    match a (input, i, s) with
    | Ok (_, i', s') => b (input, i', s')
    | Error e => Error e

#!spiral

//// test
////! gleam // { actual = Us0i1("parsing.p_char / { expected = a; line = 2; col = 1 }\nef\nghi\n^\n"); expected = Us0i1("parsing.p_char / { expected = a; line = 2; col = 2 }\ndef\n ^\n") }
///! fsharp
///! cuda
///! typescript

"abc\ndef\nghi"
|> run_parser (skip_any_string 5 >>. p_char 'a')
|> _assert_eq (Error "parsing.p_char / { expected = a; line = 2; col = 2 }\ndef\n ^\n")

#!markdown

### (>>.)

#!spiral

inl (.>>) forall t u. (a : parser t) (b : parser u) : parser t = fun input, i, s =>
    match a (input, i, s) with
    | Ok (ra, i', s') =>
        b (input, i', s')
        |> resultm.map fun _, i'', s'' =>
            ra, i'', s''
    | Error e => Error e

#!markdown

### (.>>.)

#!spiral

inl (.>>.) forall t u. (a : parser t) (b : parser u) : parser (t * u) = fun input, i, s =>
    match a (input, i, s) with
    | Ok (ra, i', s') =>
        b (input,  i', s')
        |> resultm.map fun rb, i'', s'' =>
            (ra, rb), i'', s''
    | Error e => Error e

#!markdown

### (>>%)

#!spiral

inl (>>%) forall t u. (a : parser t) (b : u) : parser u =
    a >> resultm.map fun _, i', s' =>
        b, i', s'

#!spiral

//// test
///! gleam
///! fsharp
///! cuda
///! typescript

"abc"
|> run_parser (p_char 'a' >>. p_char 'b')
|> resultm.get
|> sm'.format_debug
|> _assert_eq $$('b', "c", new_parser_state "ab" 1 3)

#!spiral

//// test

"abc"
|> parse_ (p_char_ 'a' >>.$ p_char_ 'b')
|> resultm.get
|> sm'.obj_to_string
|> _assert_eq' (('b', ($'FParsec.Position (null, 0, 1, 3)' : position_)) |> sm'.obj_to_string)

#!spiral

//// test

"abc\ndef\nghi"
|> parse_ (skip_any_string_ 5 >>.$ p_char_ 'a')
|> resultm.unwrap_err
|> sm'.obj_to_string
|> sm'.replace "\r\n" "\n"
|> _assert_eq "(Error in Ln: 2 Col: 2\ndef\n ^\nExpecting: 'a'\n, Error in Ln: 2 Col: 2\nExpecting: 'a'\n)"

#!markdown

### none_of

#!spiral

inl none_of (chars : list char) : parser char = fun input, i, s =>
    inl chars' () : string =
        backend_switch {
            Gleam = fun () => chars |> listm'.box |> sm'.format
            Fsharp = fun () => chars |> listm'.box |> listm'.to_array' |> sm'.format
            Python = fun () => chars |> listm'.box |> listm'.to_array' |> sm'.format
        }
    if i >= (input |> sm'.length) then
        "parsing.none_of / unexpected end of input / "
        ++# ({ chars' = chars' (); s } |> sm'.format)
        |> Error
    else
        inl ch = input |> sm'.index i
        if chars |> listm'.exists' ((=) ch) |> not
        then Ok (ch, i + 1, s |> update $ch)
        else
            "parsing.none_of / unexpected char / "
            ++# ({ first_char = ch; chars' = chars' (); s } |> sm'.format)
            |> Error

#!spiral

//// test
///! gleam
///! fsharp
///! cuda
///! typescript

"abc"
|> run_parser (none_of ['a'; 'b'; 'c'])
|> _assert_eq (
    backend_switch {
        Gleam = fun () =>
            "parsing.none_of / unexpected char / "
            ++# "{ first_char = a; chars' = [\"a\", \"b\", \"c\"]; s = #(\"\", 1, 1) }"
        Fsharp = fun () =>
            run_target function
            | TypeScript _ => fun () =>
                join
                    "parsing.none_of / unexpected char / "
                    ++# "{ first_char = a; chars' = a,b,c; s = ,1,1 }"
            | _ => fun () =>
                join
                    "parsing.none_of / unexpected char / "
                    ++# "{ first_char = a; chars' = [|'a'; 'b'; 'c'|]; s = struct (, 1, 1) }"
        Python = fun () =>
            "parsing.none_of / unexpected char / "
            ++# "{ first_char = a; chars' = ['a' 'b' 'c']; s = (, 1, 1) }"
    }
    |> Error
)

"def"
|> run_parser (none_of ['a'; 'b'; 'c'])
|> resultm.get
|> sm'.format_debug
|> _assert_eq $$('d', "ef", new_parser_state "d" 1 2)

#!spiral

//// test

"abc"
|> parse_ (none_of_ ['a'; 'b'; 'c'])
|> resultm.unwrap_err
|> sm'.obj_to_string
|> sm'.replace "\r\n" "\n"
|> _assert_eq ($'"(Error in Ln: 1 Col: 1\nabc\n^\nExpecting: any char not in ‘abc’\n, Error in Ln: 1 Col: 1\nExpecting: any char not in ‘abc’\n)"')

"def"
|> parse_ (none_of_ ['a'; 'b'; 'c'])
|> resultm.get
|> sm'.obj_to_string
|> _assert_eq' ($('d', ($'FParsec.Position (null, 0, 1, 2)' : position_)))

#!markdown

### (<|>)

#!spiral

inl (<|>) forall t. (a : parser t) (b : parser t) : parser t = fun input, i, s =>
    match a (input, i, s) with
    | Ok _ as r => r
    | Error _ => b (input, i, s)

#!spiral

//// test
////! gleam // { actual = Us0i1("parsing.p_char / { expected = b; line = 1; col = 1 }\ncb\n^\n"); expected = Us0i1("parsing.p_char / { expected = b; line = 1; col = 1 }\ncba\n^\n") }
///! fsharp
///! cuda
///! typescript

"abc"
|> run_parser (p_char 'a' <|> p_char 'b')
|> resultm.get
|> sm'.format_debug
|> _assert_eq $$('a', "bc", new_parser_state "a" 1 2)

"cba"
|> run_parser (p_char 'a' <|> p_char 'b')
|> _assert_eq (Error "parsing.p_char / { expected = b; line = 1; col = 1 }\ncba\n^\n")

#!markdown

### (|>>)

#!spiral

inl (|>>) p f : parser _ =
    p >> resultm.map fun r, i', s' =>
        f r, i', s'

#!spiral

//// test
///! gleam
///! fsharp
///! cuda
///! typescript

"abc"
|> run_parser (p_char 'a' |>> sm'.char_to_upper)
|> resultm.get
|> sm'.format_debug
|> _assert_eq $$('A', "bc", new_parser_state "a" 1 2)

#!markdown

### many

#!spiral

inl many forall b c. (p : _ * _ * _ -> _ (b * _ * _) c) : parser (list _) = fun input, i0, s0 =>
    // let rec 루프 acc input =
    let rec 루프 (acc : list b) (i : int) (s : parser_state) : result (list b * int * parser_state) string =
        match p (input, i, s) with
        | Ok (x, i', s') =>
            if i' = i
            then "parsing.many / inner parser succeeded without consuming input" |> Error
            else s' |> 루프 (x :: acc) i'
        | Error _ => Ok (acc |> listm.rev, i, s)
    s0 |> 루프 [] i0

#!spiral

//// test
///! gleam
///! fsharp
///! cuda
///! typescript

"aaabbc"
|> run_parser (many (p_char 'a' <|> p_char 'b'))
|> resultm.get
|> sm'.format_debug
|> _assert_eq $$(['a'; 'a'; 'a'; 'b'; 'b'], "c", new_parser_state "aaabb" 1 6)

#!markdown

### many1_chars

#!spiral

inl many1_chars (p : parser char) : parser string = fun input, i0, s0 =>
    match p (input, i0, s0) with
    | Ok (first, i1, s1) =>
        let rec 루프 (acc : string) (i : int) (s : parser_state)
            : result (string * int * parser_state) string
            =
            match p (input, i, s) with
            | Ok (c, i', s') =>
                if i' = i
                then "parsing.many1_chars / inner parser succeeded without consuming input" |> Error
                else s' |> 루프 (acc ++# $c) i'
            | Error _ => Ok (acc, i, s)
        s1 |> 루프 $first i1
    | Error e => Error e

#!spiral

//// test
///! gleam
///! fsharp
///! cuda
///! typescript

"aaabbc"
|> run_parser (many1_chars (p_char 'a' <|> p_char 'b'))
|> resultm.get
|> sm'.format_debug
|> _assert_eq $$("aaabb", "c", new_parser_state "aaabb" 1 6)

#!markdown

### many_chars

#!spiral

inl many_chars (p : parser char) : parser string = fun input, i, s =>
    match many1_chars p (input, i, s) with
    | Ok (res, i', s') => Ok (res, i', s')
    | Error _ => Ok ("", i, s)

#!markdown

### many_chars_till

#!spiral

inl many_chars_till (p : parser char) (end_p : parser _) : parser string = fun input, i0, s0 =>
    let rec 루프 (acc : string) (i : int) (s : parser_state) : result (string * int * parser_state) string =
        match end_p (input, i, s) with
        | Ok _ => Ok (acc, i, s)
        | Error _ =>
            match p (input, i, s) with
            | Ok (c, i', s') =>
                if i' = i
                then "parsing.many_chars_till / inner parser succeeded without consuming input" |> Error
                else s' |> 루프 (acc ++# $c) i'
            | Error _ => Ok (acc, i, s)
    s0 |> 루프 "" i0

#!markdown

### many1

#!spiral

inl many1 (p : parser _) : parser (list _) = fun input, i0, s0 =>
    match p (input, i0, s0) with
    | Error e => Error e
    | Ok (first, i1, s1) =>
        let rec 루프 acc (i : int) (s : parser_state) : result (list _ * int * parser_state) string =
            match p (input, i, s) with
            | Ok (x, i', s') =>
                if i' = i
                then "parsing.many1 / inner parser succeeded without consuming input" |> Error
                else s' |> 루프 (x :: acc) i'
            | Error _ => Ok (acc |> listm.rev, i, s)
        s1 |> 루프 [ first ] i1

#!spiral

//// test
////! gleam // { actual = Us2i1("parsing.p_char / { expected = b; line = 1; col = 1 }\ncb\n^\n"); expected = Us2i1("parsing.p_char / { expected = b; line = 1; col = 1 }\ncba\n^\n") }
///! fsharp
///! cuda
///! typescript

"aaabbc"
|> run_parser (many1 (p_char 'a' <|> p_char 'b'))
|> resultm.get
|> sm'.format_debug
|> _assert_eq $$([ 'a'; 'a'; 'a'; 'b'; 'b' ], "c", new_parser_state "aaabb" 1 6)

"bcc"
|> run_parser (many1 (p_char 'a' <|> p_char 'b'))
|> resultm.get
|> sm'.format_debug
|> _assert_eq $$([ 'b' ], "cc", new_parser_state "b" 1 2)

"cba"
|> run_parser (many1 (p_char 'a' <|> p_char 'b'))
|> _assert_eq (Error "parsing.p_char / { expected = b; line = 1; col = 1 }\ncba\n^\n")

#!markdown

### many1_strings

#!spiral

inl many1_strings (p : parser _) : parser string = fun input, i, s =>
    match many1 p (input, i, s) with
    | Ok (parts, i', s') =>
        Ok (
            parts
            |> listm.map sm'.obj_to_string
            |> listm'.box
            |> seq.of_list'
            |> sm'.concat "",
            i',
            s'
        )
    | Error e => Error e

#!spiral

//// test
///! gleam
///! fsharp
///! cuda
///! typescript

"aaabbc"
|> run_parser (many1_strings (p_char 'a' <|> p_char 'b'))
|> resultm.get
|> sm'.format_debug
|> _assert_eq $$("aaabb", "c", new_parser_state "aaabb" 1 6)

#!markdown

### many_strings

#!spiral

inl many_strings (p : parser _) : parser string = fun input, i, s =>
    match many p (input, i, s) with
    | Ok (parts, i', s') =>
        Ok (
            parts
            |> listm.map sm'.obj_to_string
            |> listm'.box
            |> seq.of_list'
            |> sm'.concat "",
            i',
            s'
        )
    | Error _ => Ok ("", i, s)

#!markdown

### choice

#!spiral

inl choice forall t. parsers : parser t = fun input, i, s =>
    let rec 루프 = function
        | [] => "parsing.choice / no parsers succeeded" |> Error 
        | (p : _ -> _ (t * int * parser_state) _) :: ps =>
            match p (input, i, s) with
            | Ok _ as r => r
            | Error _ => ps |> 루프
    parsers |> 루프

#!spiral

//// test
///! gleam
///! fsharp
///! cuda
///! typescript

"bca"
|> run_parser (choice [ p_char 'a'; p_char 'b'; p_char 'c' ])
|> resultm.get
|> sm'.format_debug
|> _assert_eq $$('b', "ca", new_parser_state "b" 1 2)

"cba"
|> run_parser (choice [ p_char 'a'; p_char 'b'; p_char 'c' ])
|> resultm.get
|> sm'.format_debug
|> _assert_eq $$('c', "ba", new_parser_state "c" 1 2)

#!markdown

### between

#!spiral

inl between p_open p_close p_content : parser _ = fun input, i0, s0 =>
    match p_open (input, i0, s0) with
    | Ok (_, i1, s1) =>
        match p_content (input, i1, s1) with
        | Ok (result, i2, s2) =>
            match p_close (input, i2, s2) with
            | Ok (_, i3, s3) => Ok (result, i3, s3)
            | Error e =>
                inl rest1 = input |> sm'.range (am'.Start i1) (am'.End eval)
                inl rest2 = input |> sm'.range (am'.Start i2) (am'.End eval)
                "parsing.between / expected closing delimiter / "
                ++# ({ e input rest1 rest2 } |> sm'.format)
                |> Error
        | Error _ => "parsing.between / expected content" |> Error 
    | Error e => e |> Error

#!spiral

//// test

"[aaabb"
|> parse_ (between_ (p_char_ '[') (p_char_ ']') (many1_chars_ (p_char_ 'a' <|>$ p_char_ 'b')))
|> resultm.unwrap_err
|> sm'.format_debug

#!spiral

//// test
///! gleam
///! fsharp
///! cuda
///! typescript

"[aaabb]"
|> run_parser (between (p_char '[') (p_char ']') (many1_chars (p_char 'a' <|> p_char 'b')))
|> resultm.get
|> sm'.format_debug
|> _assert_eq $$("aaabb", "", new_parser_state "[aaabb]" 1 8)

"[aaabb"
|> run_parser (between (p_char '[') (p_char ']') (many1_chars (p_char 'a' <|> p_char 'b')))
|> resultm.unwrap_err
|> sm'.format_debug
|> _assert_eq (
    "parsing.between / expected closing delimiter / "
    ++# "{ e = parsing.p_char / unexpected end of input / { c = ]; "
    ++# "s = " ++# ((new_parser_state "[aaabb" 1 7) |> sm'.format) ++# " }; "
    ++# "input = [aaabb; rest1 = aaabb; rest2 =  }"
)

#!markdown

### sep_by

#!spiral

inl sep_by forall b. p sep : parser (list b) = fun input, i0, s0 =>
    let rec 루프 (acc : list b) (i : int) (s : parser_state) : result (list b * int * parser_state) string =
        match p (input, i, s) with
        | Ok (result, i1, s1) =>
            match sep (input, i1, s1) with
            | Ok (_, i2, s2) => 루프 (result :: acc) i2 s2
            | Error _ => Ok ((result :: acc) |> listm.rev, i1, s1)
        | Error _ => Ok (acc |> listm.rev, i, s)
    루프 [] i0 s0

#!markdown

### span_from

#!spiral

inl span_from pred str i0 =
    let rec 루프 i =
        if i >= (str |> sm'.length)
        then i
        elif pred (str |> sm'.index i)
        then 루프 (i + 1)
        else i
    루프 i0

#!markdown

### spaces1

#!spiral

inl spaces1 () : parser () = fun input, i, s =>
    inl j = i |> span_from ((=) ' ') input
    if j = i
    then "parsing.spaces1 / expected at least one space" |> Error
    else Ok ((), j, s)

#!markdown

### spaces

#!spiral

inl spaces () : parser () = fun input, i, s =>
    Ok ((), i |> span_from ((=) ' ') input, s)

#!markdown

### p_digit

#!spiral

inl p_digit () : parser char = fun input, i, s =>
    if i >= (input |> sm'.length)
    then "parsing.p_digit / unexpected end of input / " ++# ({ s } |> sm'.format) |> Error
    else
        match input |> sm'.index i with
        | ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') as c => Ok (c, i + 1, s)
        | c => "parsing.p_digit / unexpected char / " ++# ({ c } |> sm'.format) |> Error

#!spiral

//// test
///! gleam
///! fsharp
///! cuda
///! typescript

"1 2 3"
|> run_parser (sep_by (p_digit ()) (spaces1 ()))
|> resultm.get
|> sm'.format_debug
|> _assert_eq $$([ '1'; '2'; '3' ], "", new_parser_state "" 1 1)

#!spiral

//// test
///! gleam
///! fsharp
///! cuda
///! typescript
////! python // assert_eq { actual = (UH0_1 ("1", UH0_0), 'a 2', <fable_modules.fable_library.system_text.StringBuilder object at 0x000000000168B5F0>, 1, 1); expected = (UH0_1 ("1", UH0_0), 'a 2', <fable_modules.fable_library.system_text.StringBuilder object at 0x000000000168B110>, 1, 1) }

"1 a 2"
|> run_parser (sep_by (p_digit ()) (spaces1 ()))
|> resultm.get
|> sm'.format_debug
|> _assert_eq $$([ '1' ], "a 2", new_parser_state "" 1 1)

#!markdown

### opt

#!spiral

inl opt p : parser (option _) = fun input, i, s =>
    match p (input, i, s) with
    | Ok (result, i', s') => Ok (result |> Some, i', s')
    | Error _ => Ok (None, i, s)

#!markdown

### rest_of_line

#!spiral

inl rest_of_line () : parser string = fun input, i0, s =>
    inl total_len = input |> sm'.length
    inl j =
        match input |> sm'.index_of_char_from i0 '\n' with
        | -1 => total_len
        | k  => (if k >= i0 then k else i0 + k) |> min total_len
    inl result = input |> sm'.range (am'.Start i0) (am'.End fun _ => j)
    Ok (result, j, s)

#!markdown

### eof

#!spiral

inl eof () : parser () = fun input, i, s =>
    if (input |> sm'.length) = i
    then Ok ((), i, s)
    else
        "parsing.eof / expected end of input / "
        ++# ({ rest = input |> sm'.range (am'.Start i) (am'.End eval) } |> sm'.format)
        |> Error
