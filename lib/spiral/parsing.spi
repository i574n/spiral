/// # parsing
open sm'_operators

/// ## fparsec

/// ## parsing

/// ### range
type range =
    {
        from : int
        to : int
    }

/// ### position
type position =
    {
        line : int
        col : int
    }

/// ### parser_state
nominal parser_state =
    {
        line_text : sm'.string_builder
        position : position
    }

/// ### parser
type parser t = string * parser_state -> result (t * string * parser_state) string

/// ### parse
inl parse forall t. (p : parser t) (input : string) : result (t * string * parser_state) string =
    inl input =
        input
        |> optionm'.of_obj
        |> optionm'.default_value' ""
    p (input, { line_text = "" |> sm'.string_builder; position = { line = 1; col = 1 } } |> parser_state)

/// ### inc
inl inc (parser_state s) = function
    | '\n' => { line = s.position.line + 1; col = 1 }
    | _ => { s.position with col = s.position.col + 1 }.position

/// ### update
inl update result s =
    (s, result |> sm'.to_char_list)
    ||> listm.fold fun (parser_state s as s') c =>
        { s with
            position = c |> inc s'
            line_text =
                match c with
                | '\n' => s.line_text |> sm'.builder_clear
                | c => s.line_text |> sm'.builder_append $c
        } |> parser_state

/// ### any_char
inl any_char () : parser char = function
    | "", s => "parsing.any_char / unexpected end of input / " ++# ({ s } |> sm'.format) |> Error
    | x, s =>
        inl first_char = x |> sm'.index 0i32
        Ok (
            first_char,
            x |> sm'.range (am'.Start 1i32) (am'.End eval),
            s |> update $first_char
        )

/// ### p_char
inl p_char (c : char) : parser char = function
    | "", s => "parsing.p_char / unexpected end of input / " ++# ({ c s } |> sm'.format) |> Error
    | input, (parser_state ({ line_text position = { line col } } as s) as s') =>
        inl first_char = input |> sm'.index 0i32
        // [
            // "parsing.p_char"
            // " / c: "; $c
            // " / input: "; input
            // " / s: "; { s } |> sm'.format
        // ]
        // |> sm'.concat_list ""
        // |> console.write_line
        if first_char = c then
            Ok (
                first_char,
                input |> sm'.range (am'.Start 1i32) (am'.End eval),
                s' |> update $first_char
            )
        else
            inl message : string =
                inl rest =
                    input
                    |> sm'.range
                        (am'.Start 0i32)
                        (am'.End fun l =>
                            match (input |> sm'.index_of "\n") - 1 with
                            | -2 => l () + 1
                            | i => i + 1
                        )
                "parsing.p_char / "
                ++# ({ expected = c; line col } |> sm'.format)
                ++# "\n" ++# $line_text ++# rest
            inl pointer_line = (" " |> sm'.replicate (col - 1)) ++# "^"
            message ++# "\n" ++# pointer_line ++# "\n"
            |> Error

/// ### any_string
inl any_string length : parser string = fun input, s =>
    if sm'.length input < length
    then "parsing.any_string / unexpected end of input / " ++# ({ s } |> sm'.format) |> Error
    else
        inl result = input |> sm'.range (am'.Start 0i32) (am'.End fun _ => length)
        Ok (
            result,
            input |> sm'.range (am'.Start length) (am'.End eval),
            s |> update result
        )

/// ### skip_any_string
inl skip_any_string length : parser () = fun input, s =>
    if sm'.length input < length
    then "parsing.skip_any_string / unexpected end of input / " ++# ({ s } |> sm'.format) |> Error
    else
        Ok (
            (),
            input |> sm'.range (am'.Start length) (am'.End eval),
            s |> update (input |> sm'.range (am'.Start 0i32) (am'.End fun _ => length))
        )

/// ### (>>.)
inl (>>.) forall t u. (a : parser t) (b : parser u) : parser u = fun input, s =>
    match a (input, s) with
    | Ok (_, rest, s) => b (rest, s)
    | Error e => Error e

/// ### (>>.)
inl (.>>) forall t u. (a : parser t) (b : parser u) : parser t = fun input, s =>
    match a (input, s) with
    | Ok (result, rest, s) =>
        b (rest, s)
        |> resultm.map fun _, rest, s =>
            result, rest, s
    | Error e => Error e

/// ### (.>>.)
inl (.>>.) forall t u. (a : parser t) (b : parser u) : parser (t * u) = fun input, s =>
    match a (input, s) with
    | Ok (result_a, rest, s) =>
        b (rest, s)
        |> resultm.map fun result_b, rest, s =>
            (result_a, result_b), rest, s
    | Error e => Error e

/// ### (>>%)
inl (>>%) forall t u. (a : parser t) (b : u) : parser u =
    a >> resultm.map fun _, rest, s =>
        b, rest, s

/// ### none_of
inl none_of (chars : list char) x =
    inl chars' () : string =
        backend_switch {
            Gleam = fun () => chars |> listm'.box |> sm'.format
            Fsharp = fun () => chars |> listm'.box |> listm'.to_array' |> sm'.format
            Python = fun () => chars |> listm'.box |> listm'.to_array' |> sm'.format
        }
    match x with
    | "", s =>
        ("parsing.none_of / unexpected end of input / " ++# ({ chars = chars' (); s } |> sm'.format)) |> Error
    | x, s =>
        inl first_char = x |> sm'.index 0i32
        if chars |> listm'.exists' ((=) first_char) |> not then
            Ok (
                first_char,
                x |> sm'.range (am'.Start 1i32) (am'.End eval),
                s |> update $first_char
            )
        else
            "parsing.none_of / unexpected char / " ++# ({ first_char chars = chars' (); s } |> sm'.format)
            |> Error

/// ### (<|>)
inl (<|>) forall t. (a : parser t) (b : parser t) : parser t = fun input, s =>
    match a (input, s) with
    | Ok _ as result => result
    | Error _ => b (input, s)

/// ### (|>>)
inl (|>>) p f : parser _ =
    p >> resultm.map fun result, rest =>
        f result, rest

/// ### many
// inl many p : parser (list _) = fun input =>
inl many forall b c. (p : _ -> _ (b * _ * _) c) : parser (list _) = fun input =>
    // let rec loop acc input =
    let rec loop forall a.
        (acc : list b)
        (input : string * parser_state)
        : result (list b * string * parser_state) a
        =
        match p input with
        | Ok (result, rest) => loop (result :: acc) rest
        | Error _ => Ok (acc |> listm.rev, input)
    loop [] input

/// ### many1_chars
inl many1_chars p : parser string =
    p >> resultm.map fun first_result, rest =>
        let rec loop acc input =
            match p input with
            | Ok (result, rest) => rest |> loop (acc ++# $result)
            | Error _ => acc, input
        rest |> loop $first_result

/// ### many_chars
inl many_chars p : parser string = fun input =>
    match many1_chars p input with
    | Ok (result, rest) => Ok (result, rest)
    | Error e => Ok ("", input)

/// ### many_chars_till
inl many_chars_till p end_p : parser string = fun input =>
    match end_p input with
    | Ok _ => Ok ("", input)
    | Error _ => many_chars p input

/// ### many1
inl many1 p : parser (list _) =
    p >> resultm.map fun first_result, rest =>
        let rec loop acc input =
            match p input with
            | Ok (result, rest) => loop (result :: acc) rest
            | Error _ => acc |> listm.rev, input
        loop [ first_result ] rest

/// ### many1_strings
inl many1_strings p : parser string =
    many1 p >> resultm.map fun results, rest =>
        results
        |> listm.map sm'.obj_to_string
        |> listm'.box
        |> seq.of_list'
        |> sm'.concat "",
        rest

/// ### many_strings
inl many_strings p : parser string = fun input =>
    match many p input with
    | Ok (results, rest) =>
        Ok (results |> listm.map sm'.obj_to_string |> listm'.box |> seq.of_list' |> sm'.concat "", rest)
    | Error e => Ok ("", input)

/// ### choice
// inl choice parsers : parser _ = fun input =>
inl choice forall t. parsers : parser t = fun input =>
    // let rec loop = function
    let rec loop forall a. (x : list (string * parser_state -> result a string)) : result a string =
        match x with
        | [] => Error "parsing.choice / no parsers succeeded"
        | p :: ps =>
            match p input with
            | Ok _ as result => result
            | Error _ => loop ps
    loop parsers

/// ### between
inl between p_open p_close p_content : parser _ = fun input =>
    match p_open input with
    | Ok (_, rest1) =>
        match p_content rest1 with
        | Ok (result, rest2) =>
            match p_close rest2 with
            | Ok (_, rest3) => Ok (result, rest3)
            | Error e =>
                "parsing.between / expected closing delimiter / " ++# ({ e input rest1 rest2 } |> sm'.format)
                |> Error
        | Error _ => Error "parsing.between / expected content"
    | Error e => Error e

/// ### sep_by
// inl sep_by p sep : parser (list _) = fun input, s =>
inl sep_by forall b. p sep : parser (list b) = fun input, s =>
    // let rec loop acc input s =
    let rec loop forall a.
        (acc : list b)
        (input : string)
        (s : parser_state)
        : result (list b * string * parser_state) a
        =
        match p (input, s) with
        | Ok (result, rest, s) =>
            match sep (rest, s) with
            | Ok (_, rest, s) => loop (result :: acc) rest s
            | Error _ => Ok ((result :: acc) |> listm.rev, rest, s)
        | Error _ => Ok (acc |> listm.rev, input, s)
    loop [] input s

/// ### span
inl span pred str =
    // let rec loop i =
    let rec loop forall t {number; int}. (i : t) : t =
        if i >= sm'.length str
        then i
        elif pred (str |> sm'.index i)
        then loop (i + 1)
        else i
    loop 0

/// ### spaces1
inl spaces1 () : parser () = fun input, s =>
    match input |> span ((=) ' ') with
    | 0i32 => Error "parsing.spaces1 / expected at least one space"
    | n => Ok ((), input |> sm'.range (am'.Start n) (am'.End eval), s)

/// ### spaces
inl spaces () : parser () = fun input, s =>
    input
    |> span ((=) ' ')
    |> fun (n : i32) =>
        Ok ((), input |> sm'.range (am'.Start n) (am'.End eval), s)

/// ### p_digit
inl p_digit () : parser char = fun input, s =>
    match input |> sm'.index 0i32 with
    | ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') as c =>
        Ok (c, input |> sm'.range (am'.Start 1i32) (am'.End eval), s)
    | c => "parsing.p_digit / unexpected char / " ++# ({ c } |> sm'.format) |> Error

/// ### opt
inl opt p : parser (option _) = fun input, s =>
    match p (input, s) with
    | Ok (result, rest, s) => Ok (Some result, rest, s)
    | Error _ => Ok (None, input, s)

/// ### rest_of_line
inl rest_of_line () : parser string = fun input, s =>
    inl i : i32 = input |> span ((<>) '\n')
    inl result = input |> sm'.range (am'.Start i) (am'.End eval)
    Ok (result, result, s)

/// ### eof
inl eof () : parser () = fun input, s =>
    if sm'.length input = 0i32
    then Ok ((), input, s)
    else "parsing.eof / expected end of input / " ++# ({ input } |> sm'.format) |> Error
