/// # seq

/// ## seq

/// ### seq
type seq dim el = dim -> option el

/// ### try_item
inl try_item n s =
    n |> s

/// ### from_list
inl from_list list =
    fun n =>
        list
        |> listm'.try_item n

/// ### map
inl map fn s =
    fun n =>
        n
        |> s
        |> optionm.map fn

/// ### mapi
inl mapi fn s =
    fun n =>
        n
        |> s
        |> optionm.map (fn n)

/// ### choose
inl choose forall dim {number} t u. (fn : t -> option u) (s : seq dim t) : seq dim u =
    fun n =>
        inl rec body fn s i i' =
            match i |> s with
            | None => None
            | Some x =>
                match x |> fn with
                | Some x when n = i' => Some x
                | Some _ => 루프 (i + 1) (i' + 1)
                | _ => 루프 (i + 1) i'
        and inl 루프 i i' =
            if n |> var_is |> not
            then body fn s i i'
            else
                inl fn = join fn
                inl s = join s
                join body fn s i i'
        루프 0 0

/// ### indexed
inl indexed s =
    s
    |> mapi fun i x =>
        i, x

/// ### zip
inl zip n seq1 seq2 =
    seq1 n, seq2 n

/// ### zip_with
inl zip_with fn seq1 seq2 =
    fun n =>
        fn (seq1 n) (seq2 n)

/// ### fold
inl fold fn init seq =
    inl rec 루프 acc n =
        match seq n with
        | Some x => 루프 (fn acc x) (n + 1)
        | None => acc
    루프 init 0

inl fold_ fn init seq =
    let rec 루프 acc n =
        match seq n with
        | Some x => 루프 (fn acc x) (n + 1)
        | None => acc
    루프 init 0

/// ### sum
inl sum seq =
    seq |> fold (+) 0

inl sum_ seq =
    seq |> fold_ (+) 0

/// ### to_list
inl to_list seq =
    seq
    |> fold (fun acc x => x :: acc) []
    |> listm.rev

inl to_list_ seq =
    seq
    |> fold_ (fun acc x => x :: acc) []
    |> listm.rev

/// ### from_array
inl from_array forall dim {number; int} el. (array : a dim el) : seq dim el =
    fun n =>
        if n >= length array
        then None
        else index array n |> Some

/// ### to_array
inl to_array seq =
    inl ar = a ;[] |> mut
    ((), seq)
    ||> fold fun _ x =>
        ar <- *ar ++ a ;[x]
    *ar

inl to_array_ seq =
    inl ar = a ;[] |> mut
    ((), seq)
    ||> fold_ fun _ x =>
        ar <- *ar ++ a ;[x]
    *ar

/// ### take_while
inl take_while cond seq =
    inl rec 루프 acc i =
        match seq i with
        | Some st when cond st i => 루프 (st :: acc) (i + 1)
        | _ => acc |> listm.rev
    루프 [] 0

/// ### take_while_
inl take_while_ cond seq =
    let rec 루프 acc i =
        match seq i with
        | Some st when cond st i => 루프 (st :: acc) (i + 1)
        | _ => acc |> listm.rev
    루프 [] 0

/// ### memoize
inl memoize seq =
    inl state = mut []
    fun n =>
        match *state |> listm'.try_find (fun (n', _) => n' = n) with
        | Some (_, v) => v
        | None =>
            inl new_state = seq n
            state <- (n, new_state) :: *state
            new_state

inl memoize_ seq =
    inl state = mut []
    fun n =>
        match *state |> listm'.try_find_ (fun (n', _) => n' = n) with
        | Some (_, v) => v
        | None =>
            inl new_state = seq n
            state <- (n, new_state) :: *state
            new_state

/// ### iterate
// inl iterate f x0 num_steps =
inl iterate forall a b {number}. (f : a -> a) (x0 : a) (num_steps : b) : a =
    // inl rec 루프 x n =
    inl rec 루프 forall c {number}. (x : a) (n : c) : a =
        if n <= 0
        then x
        else 루프 (f x) (n - 1)
    루프 x0 num_steps

// inl iterate_ f x0 num_steps =
inl iterate_ forall a b {number}. (f : a -> a) (x0 : a) (num_steps : b) : a =
    // let rec 루프 x n =
    let rec 루프 forall c {number}. (x : a) (n : c) : a =
        if n <= 0
        then x
        else 루프 (f x) (n - 1)
    루프 x0 num_steps

inl iterate' f x0 num_steps =
    listm.init num_steps id
    |> listm.fold (fun x _ => f x) x0

/// ### find_last
inl find_last forall item result. fold_fn fn target : option result =
    fold_fn (fun (item : item) (result : option result) =>
        match result with
        | None => fn item
        | result => result
    ) target (None : option result)

inl array_find_last forall item result. (fn : item -> option result) (target : a i32 item) : option result =
    find_last am.foldBack fn target

inl list_find_last forall item result. (fn : item -> option result) (target : list item) : option result =
    find_last listm.foldBack fn target

/// ## fsharp

/// ### seq'
type seq_switch' t =
    {
        Gleam : $'List(`t)'
        Fsharp : $'`t seq'
        Python : $'list'
    }
nominal seq' t = $'backend_switch `(seq_switch' t)'

/// ### length'
inl length' forall t. (items : seq' t) : int =
    backend_switch {
        Gleam = fun () =>
            global "import gleam/list"
            $'!items |> list.length' : int
        Fsharp = fun () => items |> $'Seq.length' : int
        Python = fun () => $'len(!items)' : int
    }

/// ### to_list'
inl to_list' forall t. (items : seq' t) : listm'.list' t =
    backend_switch {
        Gleam = fun () => $'!items ' : listm'.list' t
        Fsharp = fun () => items |> $'Seq.toList' : listm'.list' t
        Python = fun () => $'!items ' : listm'.list' t
    }

/// ### new_seq
inl new_seq forall t. fn : seq' t =
    backend_switch {
        Gleam = fun () =>
            $'!fn()' : seq' t
        Fsharp = fun () =>
            fun () =>
                $'seq {'
                fn |> indent
                $'}' : ()
            |> let'
            |> fun x => x : seq' t
        Python = fun () =>
            $'list(!fn())' : seq' t
    }

/// ### of_array'
inl of_array' forall dim t. (items : a dim t) : seq' t =
    backend_switch {
        Gleam = fun () =>
            global "import gary/array"
            $'!items |> array.to_list' : seq' t
        Fsharp = fun () =>
            fun () =>
                $'for i = 0 to !items.Length - 1 do yield !items.[i]'
            |> new_seq
            |> fun x => x : seq' t
        Python = fun () => $'[item for item in !items]' : seq' t
    }

/// ### of_array
inl of_array forall dim t. (items : a dim t) : seq' t =
    backend_switch {
        Gleam = fun () =>
            global "import gary/array"
            $'!items |> array.to_list' : seq' t
        Fsharp = fun () => $'!items |> Seq.ofArray' : seq' t
        Python = fun () => $'list(iter(!items))' : seq' t
    }

/// ### of_array_base
inl of_array_base forall t. (items : array_base t) : seq' t =
    a items
    |> fun x => x : _ int _
    |> of_array

/// ### to_array'
inl to_array' forall dim t. (items : seq' t) : a dim t =
    backend_switch {
        Gleam = fun () =>
            global "import gary/array"
            $'!items |> array.from_list' : a dim t
        Fsharp = fun () => items |> $'Seq.toArray' : a dim t
        Python = fun () => $'(cp if cuda else np).array(!items)' : a dim t
    }

/// ### of_list'
inl of_list' forall t. (items : listm'.list' t) : seq' t =
    backend_switch {
        Gleam = fun () => $'!items ' : seq' t
        Fsharp = fun () =>
            fun () =>
                items |> yield_from
            |> new_seq
            |> fun x => x : seq' t
        Python = fun () => $'!items ' : seq' t
    }

/// ### cast'
inl cast' forall t u. (items : u) : seq' t =
    backend_switch {
        Gleam = fun () => $'!items ' : seq' t
        Fsharp = fun () => items |> $'Seq.cast' : seq' t
        Python = fun () => $'list(!items)' : seq' t
    }

/// ### rev'
inl rev'' forall t. (items : seq' t) : seq' t =
    backend_switch {
        Gleam = fun () =>
            global "import gleam/list"
            $'!items |> list.reverse' : seq' t
        Fsharp = fun () => items |> $'Seq.rev' : seq' t
        Python = fun () => $'list(reversed(!items))' : seq' t
    }

/// ## rust

/// ### fuse
nominal fuse t =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"core::iter::Fuse<$0>\")>]\n#endif\ntype core_iter_Fuse<'T> = class end"
        $'' : $'core_iter_Fuse<`t>'
    )
