/// # sm'

/// ## rust

/// ### std_string
nominal std_string =
    `(
        backend_switch `(()) `({}) {
            Fsharp =
                (fun () =>
                    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"std::string::String\")>]\ntype std_string_String = class end\n\#else\ntype std_string_String = string\n#endif\n"
                ) : () -> ()
        }
        $'' : $'std_string_String'
    )

/// ### to_string'

/// ### from_std_string
inl from_std_string (str : std_string) : string =
    open rust
    rust.emit_expr `std_string `string str ($'"fable_library_rust::String_::fromString($0)"' : string)

/// ## sm'

/// ### symbol_to_string
inl symbol_to_string forall t {symbol}. : string =
    // inl x = real_core.type_lit_to_lit `t
    // inl x = real_core.type_to_symbol `t
    // inl x = real_core.type_lit_to_lit `t
    // !!!!SymbolToString (`(`t))
    inl x = real_core.type_to_symbol `t
    !!!!SymbolToString (x)

/// ### index

/// ### length

/// ### to_char_list

/// ### is_empty

/// ### to_option

/// ### slice

/// ### append_real
inl append_real (x : string) (s : string) : string =
    backend_switch `string `({}) {
        Gleam = (fun () => $'!s <> !x ' : string) : () -> string
        Fsharp = (fun () => (+.) `string s x) : () -> string
        Python = (fun () => (+.) `string s x) : () -> string
    }

/// ### append

/// ### (++#)
inl (++#) (a : string) (b : string) : string =
    append_real b a

/// ### (++\\#)

/// ### (++\#)

/// ### string_builder
nominal string_builder_python =
    `(
        global "import io"
        $'' : $'io.StringIO'
    )
type string_builder_switch =
    {
        Gleam : string
        Fsharp : $'System.Text.StringBuilder'
        Python : string_builder_python
    }
nominal string_builder = $'backend_switch `(string_builder_switch)'

/// ### format_debug
inl format_debug forall t. (x : t) : string =
    typecase t with
    | string => x
    | _ =>
        backend_switch `string `({}) {
            Gleam =
                (fun () =>
                    typecase t with
                    | char => to `(`x) `string x
                    | string_builder => to `(`x) `string x
                    | _ =>
                        global "import gleam/string"
                        inl x =
                            typecase t with
                            | array_base _ => $'!x |> array.to_list' : t
                            | _ => x
                        $'string.inspect(!x)' : string
                    ) : () -> string
            Fsharp = (fun () => $'$"%A{!x}"' : string) : () -> string
            Python =
                (fun () =>
                    $'f"{!x}"' : string
                ) : () -> string
        }

/// ### (~$$)

/// ### format_pretty
inl format_pretty forall t. (x : t) : string =
    run_target_args `string `t (fun () => x) function
        | Rust _ => fun x =>
            open rust
            inl result = rust.emit_expr `t `std_string x ($'"format\!(\\\"{:\#?}\\\", $0)"' : string)
            from_std_string result
        | _ => fun _ => format_debug `t x

/// ### prim

/// ### printable
prototype printable t : t -> ()

/// ### format_real
let format_real forall t. (x : t) : string =
    inl empty : string =
        backend_switch `string `({}) {
            Gleam =
                (fun () =>
                    ""
                ) : () -> string
            Fsharp =
                (fun () =>
                    join ""
                ) : () -> string
            Python =
                (fun () =>
                    ""
                ) : () -> string
        }
    inl result = mut `string empty
    inl rec write x =
        inl p ((a : string), b) =
            inl s : string =
                backend_switch `string `({}) {
                    Gleam =
                        (fun () =>
                            match b with
                            | (_ : string) => b : string
                            // | (_ : f32) | (_ : f64) => format_debug `(`b) b
                            | _ => format_debug `(`b) b
                        ) : () -> string
                    Fsharp =
                        (fun () =>
                            match b with
                            | (_ : f32) | (_ : f64) => $'$"%+.6f{!b}"' : string
                            | (_ : string) => b : string
                            | _ => $'$"{!b}"' : string
                        ) : () -> string
                    Python =
                        (fun () =>
                            match b with
                            | (_ : f32) | (_ : f64) => $'"{:.6f}".format(!b)' : string
                            | (_ : string) => b : string
                            | _ => $'f"{!b}"' : string
                        ) : () -> string
                }
            backend_switch `(()) `({}) {
                Gleam =
                    (fun () =>
                        exec_unit ((fun () => result <- (++#) ((~*) `string result) s) : () -> ())
                    ) : () -> ()
                Fsharp =
                    (fun () =>
                        join
                            result <- (++#) ((~*) `string result) s
                    ) : () -> ()
                Python =
                    (fun () =>
                        join
                            result <- (++#) ((~*) `string result) s
                    ) : () -> ()
            }

        match x with // According to Bing it shouldn't matter whether these are %d or %lld in printf.
        | () => ()
        | (x : i8) | (x : i16) | (x : i32) | (x : i64) => p ("%d", x)
        | (x : u8) | (x : u16) | (x : u32) | (x : u64) => p ("%u", x)
        | (x : f32) | (x : f64) => p ("%f", x)
        | (x : string) => p ("%s", x)
        | (x : char) => p ("%c", x)
        | (x : bool) => p ("%s", if x then "true" else "false")
        | (a,b) => write a . write ", " . write b
        | {} as x =>
            write "{ "
            inl _result =
                real_core.record_fold
                    fun { state = separator key value } =>
                        write separator
                        write (symbol_to_string `(`key)) . write " = " . write value
                        "; "
                    () x
            write " }"
        | x when real_core.symbol_is x => write (symbol_to_string `(`x))
        | x when real_core.function_is x => write (x ())
        | x when real_core.union_is x =>
            if real_core.prototype_has `(`x) printable then printable `(`x) x
            else
                write (format_debug `(`x) x)
                // real_core.unbox x (fun (k, v) =>
                //     write k
                //     match v with
                //     | () => ()
                //     | _ => write "(" . write v . write ")"
                //     )
        | x when real_core.nominal_is x =>
            if real_core.prototype_has `(`x) printable then printable `(`x) x
            // elif layout_is x then write *x // TODO: Deal with all the layout type cases.
            else write (format_pretty `(`x) x)
        | x => write (format_debug `(`x) x)
    write x
    (~*) `string result

/// ### format

/// ### to_char_array

/// ### concat_array

/// ### concat_list

/// ### ellipsis

/// ## fsharp

/// ### last_index_of

/// ### index_of_char

/// ### index_of_char_from

/// ### index_of

/// ### replicate

/// ### obj_to_string

/// ### pad_left

/// ### pad_right

/// ### convert_to_utf32

/// ### ends_with

/// ### starts_with

/// ### is_white_space

/// ### substring

/// ### to_lower

/// ### to_upper

/// ### char_to_upper

/// ### builder_append

/// ### builder_append_line

/// ### builder_replace

/// ### builder_clear

/// ### builder_insert

/// ### trim

/// ### concat

/// ### length'

/// ### to_string any

/// ### (~$)

/// ### replace

/// ### split

/// ### split_string

/// ### join'

/// ### encoding

/// ### encoding_utf8

/// ### utf8_get_bytes

/// ### byte_to_string

/// ## rust

/// ### str

/// ### chars

/// ### char_is_alphanumeric

/// ### byte_slice

/// ### display

/// ### base64_decode_error

/// ### borsh_io_error

/// ### utf8_error

/// ### from_utf8_error

/// ### json_value

/// ### json_error

/// ### serde_wasm_bindgen_error

/// ### js_string

/// ### os_str

/// ### c_str

/// ### c_string

/// ### os_string

/// ### raw_string_literal

/// ### raw_string_literal_static

/// ### (~#)

/// ### (~##)

/// ### include_str

/// ### as_str

/// ### from_iter

/// ### ref_to_std_string

/// ### cow_to_std_string

/// ### to_std_string

/// ### as_str_std

/// ### into_boxed_str

/// ### os_string_as_ref

/// ### to_os_string

/// ### new_c_string

/// ### os_to_str

/// ### from_os_str_ref

/// ### format_custom'

/// ### format_debug'

/// ### format'

/// ### format_hex'

/// ### format''

/// ### regex

/// ### regex_error

/// ### new_regex

/// ### captures

/// ### regex_capture_matches

/// ### regex_capture_names

/// ### match'

/// ### regex_captures_iter

/// ### regex_captures

/// ### replace_regex'

/// ### serialize

/// ### deserialize

/// ### borsh_serialize

/// ### borsh_deserialize

/// ### deserialize_vec

/// ### encode_uri_component

/// ### strip_prefix

/// ### str_from_utf8

/// ### string_from_utf8

/// ### base64_decode

/// ### encoding'

/// ### encoding_utf8'

/// ### encoding_1252

/// ### encoding_encode

/// ### utf8_decode

/// ### windows

/// ### any

/// ### slice_contains

/// ### as_bytes

/// ### into_bytes

/// ## python

/// ### encode_utf8

/// ## sm'

/// ### contains

/// ### to_string result t u

/// ### format_exception

/// ### concat_list

/// ### range

/// ### trim_end

/// ### trim_start

/// ### ellipsis_end

/// ### format_ellipsis

/// ### replace_regex

/// ## main

/// ## rust
