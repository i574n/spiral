#!meta

{"kernelInfo":{"defaultKernelName":"spiral","items":[{"name":"spiral"}]}}

#!markdown

# testing

#!markdown

## testing

#!spiral

open sm'_operators

#!markdown

### testing_trace

#!spiral

union testing_trace =
    | Console
    | Trace
    | TraceRaw
    | Silent

#!markdown

### __expect

#!spiral

inl rec __expect
    (fn : _ -> _ -> bool)
    (trace' : testing_trace)
    (name : string)
    (b : _)
    (a : _)
    : ()
    =
    inl result = fn a b
    inl result =
        result || join result
    inl get_raw_text () =
        { name actual = a; expected = b } |> sm'.format
    match trace' with
    | Console =>
        inl text = get_raw_text ()
        text |> console.write_line
        text
    | Trace =>
        trace Info (fun () => name) fun () => { actual = a; expected = b }
        get_raw_text ()
    | TraceRaw =>
        inl text = get_raw_text ()
        trace_raw Info fun () => text
        text
    | Silent => reflection.nameof { __expect }
    |> assert result

#!markdown

### __assert_approx_eq

#!spiral

inl rec __assert_approx_eq trace e b a =
    __expect
        (fun a b => abs (b - a) < (e |> optionm.defaultWith 0.00000001))
        trace
        (reflection.nameof { __assert_approx_eq })
        b
        a

inl _assert_approx_eq e b a =
    __assert_approx_eq Console e b a

#!spiral

//// test
///! gleam
///! fsharp
///! cuda
///! rust
///! typescript
///! python

12.345f64
|> _assert_approx_eq (Some 0.0001f64) 12.345f64

#!spiral

//// test
//// print_code

1f64
|> __assert_approx_eq Console (Some 3) 2

#!spiral

//// test
//// print_code

(dyn 1f64)
|> _assert_approx_eq (Some 3) 2

#!markdown

### __assert_eq

#!spiral

inl rec __assert_eq trace b a =
    __expect (=) trace (reflection.nameof { __assert_eq }) b a

inl _assert_eq b a =
    __assert_eq Console b a

#!markdown

### __assert_eq'

#!spiral

inl rec __assert_eq' trace b a =
    __expect (=.) trace (reflection.nameof { __assert_eq' }) b a

inl _assert_eq' b a =
    __assert_eq' Console b a

#!markdown

### __assert_ne

#!spiral

inl rec __assert_ne trace b a =
    __expect (<>.) trace (reflection.nameof { __assert_ne }) b a

inl _assert_ne b a =
    __assert_ne Console b a

#!markdown

### __assert_gt

#!spiral

inl rec __assert_gt trace b a =
    __expect (>) trace (reflection.nameof { __assert_gt }) b a

inl _assert_gt b a =
    __assert_gt Console b a

#!markdown

### __assert_ge

#!spiral

inl rec __assert_ge trace b a =
    __expect (>=) trace (reflection.nameof { __assert_ge }) b a

inl _assert_ge b a =
    __assert_ge Console b a

#!markdown

### __assert_lt

#!spiral

inl rec __assert_lt trace b a =
    __expect (<) trace (reflection.nameof { __assert_lt }) b a

inl _assert_lt b a =
    __assert_lt Console b a

#!markdown

### __assert_le

#!spiral

inl rec __assert_le trace b a =
    __expect (<=) trace (reflection.nameof { __assert_le }) b a

inl _assert_le b a =
    __assert_le Console b a

#!markdown

### __assert

#!spiral

inl rec __assert fn trace b a =
    __expect fn trace (reflection.nameof { __assert }) a b

inl _assert fn b a =
    __assert fn Console b a

#!markdown

### __assert_between

#!spiral

inl rec __assert_between trace a b actual =
    inl assert_between actual (a, b) =
        __assert_ge Silent a actual
        __assert_le Silent b actual
        true
    __expect assert_between trace (reflection.nameof { __assert_between }) (a, b) actual

inl _assert_between a b actual =
    __assert_between Console a b actual

#!markdown

### _assert_fn

#!spiral

inl rec _assert_fn fn list =
    list
    |> listm.rev
    |> listm.map fun input, expected => join
        input
        |> fn
        |> resultm.get
        |> fun x =>
            inl expected' = join expected
            inl name = reflection.nameof { _assert_fn }
            try
                fun () =>
                    console.write_line ""
                    trace Verbose
                        fun () => name
                        fun () => { input }
                    x
                    |> sm'.format
                    |> _assert_eq' (expected' |> sm'.format)
                    true
                fun ex =>
                    trace Critical
                        fun () => name ++# " / error"
                        fun () => { ex expected }
                    Some false
            |> optionm.value
    |> listm'.filter not
    |> function
        | [] => ()
        | x => x |> sm'.format_debug |> failwith

#!spiral

//// test
///! gleam
///! fsharp
///! cuda
///! rust
///! typescript
///! python

[
    3i32,
    2i32

    2,
    1
]
|> _assert_fn fun x =>
    x - 1
    |> Ok
    |> fun x => x : _ _ ()

#!markdown

### _assert_in

#!spiral

inl _assert_in items x =
    (None, items)
    ||> listm.fold fun acc x' =>
        match acc with
        | Some x => Some x
        | None =>
            if x' <>. x
            then None
            else
                trace Debug (fun () => "_assert_in") fun () => { x x' }
                Some ()
    |> function
        | Some _ => ()
        | None =>
            "_assert_in / " ++# ({ x items } |> sm'.format) |> failwith

#!markdown

## fsharp

#!markdown

### __assert_contains

#!spiral

inl rec __assert_contains forall t u. (trace : testing_trace) (b : t) (a : u) : () =
    __expect
        fun a b =>
            a
            |> $'List.ofSeq'
            |> fun x => x : listm'.list' t
            |> $'List.tryFind' ((=) b)
            |> optionm'.unbox
            |> fun (x : option t) => x <> None
        trace
        // TODO: forall nameof (Cannot dyn a forall into a runtime var.)
        // Metavars that are not part of the enclosing function's signature are not allowed. They need to be values.
        // Got: {__assert_contains : testing_trace -> _ -> _ -> ()} -> string
        // (reflection.nameof { __assert_contains })
        "__assert_contains"
        b
        a

inl _assert_contains b a =
    __assert_contains Console b a

#!spiral

//// test

;[ "a"; "b"; "c" ]
|> _assert_contains "b"

#!spiral

//// test

"abcd"
|> _assert_contains 'b'

#!markdown

### _throws

#!spiral

inl _throws (fn : () -> ()) : option exn =
    inl none = None : option exn
    inl some (s : exn) = Some s
    backend_switch {
        Fsharp = fun () =>
            $'try !fn (); !none with ex -> ex |> !some ' : option exn
        Python = fun () =>
            $'fn = !fn '
            $'none = !none '
            $'some = !some '
            $'try: fn(); x = none '
            $'except Exception as ex: x = some(ex)'
            $'x' : option exn
    }

#!markdown

### print_and_return

#!spiral

inl rec print_and_return x =
    inl name = reflection.nameof { print_and_return }
    name ++# ({ x } |> sm'.format)
    |> console.write_line
    x
